--- tmp/ontogpt-0.2.0.tar.gz
+++ tmp/ontogpt-0.2.1.tar.gz
├── filetype from file(1)
│ @@ -1 +1 @@
│ -gzip compressed data, was "ontogpt-0.2.0.tar", max compression
│ +gzip compressed data, was "ontogpt-0.2.1.tar", max compression
│   --- ontogpt-0.2.0.tar
├── +++ ontogpt-0.2.1.tar
│ ├── file list
│ │ @@ -1,73 +1,75 @@
│ │ --rw-r--r--   0        0        0     1485 2023-03-23 01:14:46.967599 ontogpt-0.2.0/LICENSE
│ │ --rw-r--r--   0        0        0     9428 2023-03-23 01:14:46.967599 ontogpt-0.2.0/README.md
│ │ --rw-r--r--   0        0        0     1868 2023-03-23 01:15:37.168118 ontogpt-0.2.0/pyproject.toml
│ │ --rw-r--r--   0        0        0      219 2023-03-23 01:14:46.995600 ontogpt-0.2.0/src/ontogpt/__init__.py
│ │ --rw-r--r--   0        0        0    13493 2023-03-23 01:14:46.995600 ontogpt-0.2.0/src/ontogpt/cli.py
│ │ --rw-r--r--   0        0        0      245 2023-03-23 01:14:46.995600 ontogpt-0.2.0/src/ontogpt/clients/__init__.py
│ │ --rw-r--r--   0        0        0     3192 2023-03-23 01:14:46.995600 ontogpt-0.2.0/src/ontogpt/clients/openai_client.py
│ │ --rw-r--r--   0        0        0     2913 2023-03-23 01:14:46.995600 ontogpt-0.2.0/src/ontogpt/clients/pubmed_client.py
│ │ --rw-r--r--   0        0        0      639 2023-03-23 01:14:46.995600 ontogpt-0.2.0/src/ontogpt/clients/soup_client.py
│ │ --rw-r--r--   0        0        0       80 2023-03-23 01:14:46.995600 ontogpt-0.2.0/src/ontogpt/converters/__init__.py
│ │ --rw-r--r--   0        0        0     5319 2023-03-23 01:14:46.995600 ontogpt-0.2.0/src/ontogpt/converters/ontology_converter.py
│ │ --rw-r--r--   0        0        0       51 2023-03-23 01:14:46.995600 ontogpt-0.2.0/src/ontogpt/engines/__init__.py
│ │ --rw-r--r--   0        0        0    19352 2023-03-23 01:14:46.995600 ontogpt-0.2.0/src/ontogpt/engines/halo_engine.py
│ │ --rw-r--r--   0        0        0    21993 2023-03-23 01:14:46.995600 ontogpt-0.2.0/src/ontogpt/engines/knowledge_engine.py
│ │ --rw-r--r--   0        0        0      648 2023-03-23 01:14:46.995600 ontogpt-0.2.0/src/ontogpt/engines/resolver.py
│ │ --rw-r--r--   0        0        0    17711 2023-03-23 01:14:46.995600 ontogpt-0.2.0/src/ontogpt/engines/spires_engine.py
│ │ --rw-r--r--   0        0        0      684 2023-03-23 01:14:46.995600 ontogpt-0.2.0/src/ontogpt/engines/synonym_engine.py
│ │ --rw-r--r--   0        0        0       69 2023-03-23 01:14:46.995600 ontogpt-0.2.0/src/ontogpt/evaluation/__init__.py
│ │ --rw-r--r--   0        0        0        0 2023-03-23 01:14:46.995600 ontogpt-0.2.0/src/ontogpt/evaluation/ctd/__init__.py
│ │ --rw-r--r--   0        0        0   425228 2023-03-23 01:14:46.995600 ontogpt-0.2.0/src/ontogpt/evaluation/ctd/database/CDR_TestSet.BioC.xml.gz
│ │ --rw-r--r--   0        0        0   409439 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/evaluation/ctd/database/CDR_TrainSet.BioC.xml.gz
│ │ --rw-r--r--   0        0        0   413985 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/evaluation/ctd/database/synonyms.yaml
│ │ --rw-r--r--   0        0        0    10351 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/evaluation/ctd/eval_ctd.py
│ │ --rw-r--r--   0        0        0        0 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/evaluation/drugmechdb/__init__.py
│ │ --rw-r--r--   0        0        0     2200 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/evaluation/drugmechdb/datamodel/drugmechdb.py
│ │ --rw-r--r--   0        0        0     2027 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/evaluation/drugmechdb/datamodel/drugmechdb.yaml
│ │ --rw-r--r--   0        0        0    10698 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/evaluation/drugmechdb/eval_drugmechdb.py
│ │ --rw-r--r--   0        0        0     2851 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/evaluation/evaluation_engine.py
│ │ --rw-r--r--   0        0        0     6159 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/evaluation/go/eval_go.py
│ │ --rw-r--r--   0        0        0        0 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/evaluation/hpoa/__init__.py
│ │ --rw-r--r--   0        0        0     8972 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/evaluation/hpoa/eval_hpoa.py
│ │ --rw-r--r--   0        0        0      541 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/evaluation/resolver.py
│ │ --rw-r--r--   0        0        0        0 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/io/__init__.py
│ │ --rw-r--r--   0        0        0      370 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/io/exporter.py
│ │ --rw-r--r--   0        0        0     4307 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/io/html_exporter.py
│ │ --rw-r--r--   0        0        0     3232 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/io/markdown_exporter.py
│ │ --rw-r--r--   0        0        0     2305 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/io/owl_exporter.py
│ │ --rw-r--r--   0        0        0      750 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/io/yaml_wrapper.py
│ │ --rw-r--r--   0        0        0       67 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/__init__.py
│ │ --rw-r--r--   0        0        0      401 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/all.yaml
│ │ --rw-r--r--   0        0        0     5954 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/biological_process.py
│ │ --rw-r--r--   0        0        0     2027 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/biological_process.yaml
│ │ --rw-r--r--   0        0        0     3676 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/core.py
│ │ --rw-r--r--   0        0        0     3098 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/core.yaml
│ │ --rw-r--r--   0        0        0     6190 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/ctd.py
│ │ --rw-r--r--   0        0        0     6683 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/ctd.yaml
│ │ --rw-r--r--   0        0        0     5559 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/drug.py
│ │ --rw-r--r--   0        0        0     1856 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/drug.yaml
│ │ --rw-r--r--   0        0        0     6197 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/environmental_sample.py
│ │ --rw-r--r--   0        0        0     2880 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/environmental_sample.yaml
│ │ --rw-r--r--   0        0        0     8251 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/gocam.py
│ │ --rw-r--r--   0        0        0     4871 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/gocam.yaml
│ │ --rw-r--r--   0        0        0     6594 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/halo.py
│ │ --rw-r--r--   0        0        0     2367 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/halo.yaml
│ │ --rw-r--r--   0        0        0     6227 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/mendelian_disease.py
│ │ --rw-r--r--   0        0        0     3130 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/mendelian_disease.yaml
│ │ --rw-r--r--   0        0        0     5356 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/metabolic_process.py
│ │ --rw-r--r--   0        0        0     1633 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/metabolic_process.yaml
│ │ --rw-r--r--   0        0        0     7272 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/metagenome_study.py
│ │ --rw-r--r--   0        0        0     3910 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/metagenome_study.yaml
│ │ --rw-r--r--   0        0        0     5111 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/ontology_class.py
│ │ --rw-r--r--   0        0        0     2686 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/ontology_class.yaml
│ │ --rw-r--r--   0        0        0     7457 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/reaction.py
│ │ --rw-r--r--   0        0        0     3187 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/reaction.yaml
│ │ --rw-r--r--   0        0        0     7169 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/recipe.py
│ │ --rw-r--r--   0        0        0     5749 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/recipe.yaml
│ │ --rw-r--r--   0        0        0     7945 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/treatment.py
│ │ --rw-r--r--   0        0        0     4485 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/templates/treatment.yaml
│ │ --rw-r--r--   0        0        0        0 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/webapp/__init__.py
│ │ --rw-r--r--   0        0        0      861 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/webapp/html/form.html
│ │ --rw-r--r--   0        0        0      201 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/webapp/html/results.html
│ │ --rw-r--r--   0        0        0     1768 2023-03-23 01:14:46.999600 ontogpt-0.2.0/src/ontogpt/webapp/main.py
│ │ --rw-r--r--   0        0        0    11532 1970-01-01 00:00:00.000000 ontogpt-0.2.0/PKG-INFO
│ │ +-rw-r--r--   0        0        0     1485 2023-04-06 15:21:19.285790 ontogpt-0.2.1/LICENSE
│ │ +-rw-r--r--   0        0        0     9428 2023-04-06 15:21:19.285790 ontogpt-0.2.1/README.md
│ │ +-rw-r--r--   0        0        0     2174 2023-04-06 15:22:18.729142 ontogpt-0.2.1/pyproject.toml
│ │ +-rw-r--r--   0        0        0      219 2023-04-06 15:21:19.313792 ontogpt-0.2.1/src/ontogpt/__init__.py
│ │ +-rw-r--r--   0        0        0    16152 2023-04-06 15:21:19.313792 ontogpt-0.2.1/src/ontogpt/cli.py
│ │ +-rw-r--r--   0        0        0      244 2023-04-06 15:21:19.317792 ontogpt-0.2.1/src/ontogpt/clients/__init__.py
│ │ +-rw-r--r--   0        0        0     3192 2023-04-06 15:21:19.317792 ontogpt-0.2.1/src/ontogpt/clients/openai_client.py
│ │ +-rw-r--r--   0        0        0     2900 2023-04-06 15:21:19.317792 ontogpt-0.2.1/src/ontogpt/clients/pubmed_client.py
│ │ +-rw-r--r--   0        0        0      598 2023-04-06 15:21:19.317792 ontogpt-0.2.1/src/ontogpt/clients/soup_client.py
│ │ +-rw-r--r--   0        0        0       81 2023-04-06 15:21:19.317792 ontogpt-0.2.1/src/ontogpt/converters/__init__.py
│ │ +-rw-r--r--   0        0        0     5280 2023-04-06 15:21:19.317792 ontogpt-0.2.1/src/ontogpt/converters/ontology_converter.py
│ │ +-rw-r--r--   0        0        0       51 2023-04-06 15:21:19.317792 ontogpt-0.2.1/src/ontogpt/engines/__init__.py
│ │ +-rw-r--r--   0        0        0    19204 2023-04-06 15:21:19.317792 ontogpt-0.2.1/src/ontogpt/engines/halo_engine.py
│ │ +-rw-r--r--   0        0        0    22101 2023-04-06 15:21:19.317792 ontogpt-0.2.1/src/ontogpt/engines/knowledge_engine.py
│ │ +-rw-r--r--   0        0        0      648 2023-04-06 15:21:19.317792 ontogpt-0.2.1/src/ontogpt/engines/resolver.py
│ │ +-rw-r--r--   0        0        0    17711 2023-04-06 15:21:19.317792 ontogpt-0.2.1/src/ontogpt/engines/spires_engine.py
│ │ +-rw-r--r--   0        0        0      697 2023-04-06 15:21:19.317792 ontogpt-0.2.1/src/ontogpt/engines/synonym_engine.py
│ │ +-rw-r--r--   0        0        0       70 2023-04-06 15:21:19.317792 ontogpt-0.2.1/src/ontogpt/evaluation/__init__.py
│ │ +-rw-r--r--   0        0        0        0 2023-04-06 15:21:19.317792 ontogpt-0.2.1/src/ontogpt/evaluation/ctd/__init__.py
│ │ +-rw-r--r--   0        0        0   425228 2023-04-06 15:21:19.317792 ontogpt-0.2.1/src/ontogpt/evaluation/ctd/database/CDR_TestSet.BioC.xml.gz
│ │ +-rw-r--r--   0        0        0   409439 2023-04-06 15:21:19.317792 ontogpt-0.2.1/src/ontogpt/evaluation/ctd/database/CDR_TrainSet.BioC.xml.gz
│ │ +-rw-r--r--   0        0        0   413985 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/evaluation/ctd/database/synonyms.yaml
│ │ +-rw-r--r--   0        0        0    10351 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/evaluation/ctd/eval_ctd.py
│ │ +-rw-r--r--   0        0        0        0 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/evaluation/drugmechdb/__init__.py
│ │ +-rw-r--r--   0        0        0     2200 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/evaluation/drugmechdb/datamodel/drugmechdb.py
│ │ +-rw-r--r--   0        0        0     2027 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/evaluation/drugmechdb/datamodel/drugmechdb.yaml
│ │ +-rw-r--r--   0        0        0    10682 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/evaluation/drugmechdb/eval_drugmechdb.py
│ │ +-rw-r--r--   0        0        0     2851 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/evaluation/evaluation_engine.py
│ │ +-rw-r--r--   0        0        0     6159 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/evaluation/go/eval_go.py
│ │ +-rw-r--r--   0        0        0        0 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/evaluation/hpoa/__init__.py
│ │ +-rw-r--r--   0        0        0     8972 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/evaluation/hpoa/eval_hpoa.py
│ │ +-rw-r--r--   0        0        0      541 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/evaluation/resolver.py
│ │ +-rw-r--r--   0        0        0        0 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/io/__init__.py
│ │ +-rw-r--r--   0        0        0      370 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/io/exporter.py
│ │ +-rw-r--r--   0        0        0     4308 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/io/html_exporter.py
│ │ +-rw-r--r--   0        0        0     3232 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/io/markdown_exporter.py
│ │ +-rw-r--r--   0        0        0     2351 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/io/owl_exporter.py
│ │ +-rw-r--r--   0        0        0      741 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/io/yaml_wrapper.py
│ │ +-rw-r--r--   0        0        0       68 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/__init__.py
│ │ +-rw-r--r--   0        0        0      401 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/all.yaml
│ │ +-rw-r--r--   0        0        0     5918 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/biological_process.py
│ │ +-rw-r--r--   0        0        0     2027 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/biological_process.yaml
│ │ +-rw-r--r--   0        0        0     3634 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/core.py
│ │ +-rw-r--r--   0        0        0     3098 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/core.yaml
│ │ +-rw-r--r--   0        0        0     6200 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/ctd.py
│ │ +-rw-r--r--   0        0        0     6683 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/ctd.yaml
│ │ +-rw-r--r--   0        0        0     5500 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/drug.py
│ │ +-rw-r--r--   0        0        0     1856 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/drug.yaml
│ │ +-rw-r--r--   0        0        0     6125 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/environmental_sample.py
│ │ +-rw-r--r--   0        0        0     2880 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/environmental_sample.yaml
│ │ +-rw-r--r--   0        0        0     8171 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/gocam.py
│ │ +-rw-r--r--   0        0        0     4871 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/gocam.yaml
│ │ +-rw-r--r--   0        0        0     6857 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/halo.py
│ │ +-rw-r--r--   0        0        0     2367 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/halo.yaml
│ │ +-rw-r--r--   0        0        0     6131 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/mendelian_disease.py
│ │ +-rw-r--r--   0        0        0     3130 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/mendelian_disease.yaml
│ │ +-rw-r--r--   0        0        0     5389 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/metabolic_process.py
│ │ +-rw-r--r--   0        0        0     1633 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/metabolic_process.yaml
│ │ +-rw-r--r--   0        0        0     7149 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/metagenome_study.py
│ │ +-rw-r--r--   0        0        0     3910 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/metagenome_study.yaml
│ │ +-rw-r--r--   0        0        0     5029 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/ontology_class.py
│ │ +-rw-r--r--   0        0        0     2686 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/ontology_class.yaml
│ │ +-rw-r--r--   0        0        0     5004 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/phenotype.py
│ │ +-rw-r--r--   0        0        0     1532 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/phenotype.yaml
│ │ +-rw-r--r--   0        0        0     7491 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/reaction.py
│ │ +-rw-r--r--   0        0        0     3187 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/reaction.yaml
│ │ +-rw-r--r--   0        0        0     7286 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/recipe.py
│ │ +-rw-r--r--   0        0        0     5792 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/recipe.yaml
│ │ +-rw-r--r--   0        0        0     7864 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/treatment.py
│ │ +-rw-r--r--   0        0        0     4485 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/templates/treatment.yaml
│ │ +-rw-r--r--   0        0        0        0 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/webapp/__init__.py
│ │ +-rw-r--r--   0        0        0      861 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/webapp/html/form.html
│ │ +-rw-r--r--   0        0        0      201 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/webapp/html/results.html
│ │ +-rw-r--r--   0        0        0     1769 2023-04-06 15:21:19.321792 ontogpt-0.2.1/src/ontogpt/webapp/main.py
│ │ +-rw-r--r--   0        0        0    11570 1970-01-01 00:00:00.000000 ontogpt-0.2.1/PKG-INFO
│ │   --- ontogpt-0.2.0/LICENSE
│ ├── +++ ontogpt-0.2.1/LICENSE
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/README.md
│ ├── +++ ontogpt-0.2.1/README.md
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/cli.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/cli.py
│ │┄ Files 9% similar despite different names
│ │ @@ -2,59 +2,64 @@
│ │  import codecs
│ │  import logging
│ │  import pickle
│ │  import sys
│ │  from dataclasses import dataclass
│ │  from io import BytesIO, TextIOWrapper
│ │  from pathlib import Path
│ │ -from typing import Optional, List
│ │ +from typing import List, Optional
│ │  
│ │  import click
│ │  import jsonlines
│ │  import yaml
│ │  
│ │  from ontogpt import __version__
│ │  from ontogpt.clients import OpenAIClient
│ │  from ontogpt.clients.pubmed_client import PubmedClient
│ │  from ontogpt.clients.soup_client import SoupClient
│ │  from ontogpt.engines.halo_engine import HALOEngine
│ │  from ontogpt.engines.knowledge_engine import KnowledgeEngine
│ │ -from ontogpt.engines.synonym_engine import SynonymEngine
│ │  from ontogpt.engines.spires_engine import SPIRESEngine
│ │ +from ontogpt.engines.synonym_engine import SynonymEngine
│ │  from ontogpt.evaluation.resolver import create_evaluator
│ │  from ontogpt.io.html_exporter import HTMLExporter
│ │  from ontogpt.io.markdown_exporter import MarkdownExporter
│ │  
│ │  __all__ = [
│ │      "main",
│ │  ]
│ │  
│ │  from ontogpt.io.owl_exporter import OWLExporter
│ │ -
│ │  from ontogpt.io.yaml_wrapper import dump_minimal_yaml
│ │  from ontogpt.templates.core import ExtractionResult
│ │  
│ │  
│ │  @dataclass
│ │  class Settings:
│ │ -    """
│ │ -    Global command line settings.
│ │ -    """
│ │ +    """Global command line settings."""
│ │ +
│ │      cache_db: Optional[str] = None
│ │      skip_annotators: Optional[List[str]] = None
│ │  
│ │  
│ │  settings = Settings()
│ │  
│ │ -def write_extraction(results: ExtractionResult, output: BytesIO, output_format: str = None, knowledge_engine: KnowledgeEngine = None):
│ │ +
│ │ +def write_extraction(
│ │ +    results: ExtractionResult,
│ │ +    output: BytesIO,
│ │ +    output_format: str = None,
│ │ +    knowledge_engine: KnowledgeEngine = None,
│ │ +):
│ │      def _as_text_writer(f):
│ │          if isinstance(f, TextIOWrapper):
│ │              return f
│ │          else:
│ │              return codecs.getwriter("utf-8")(f)
│ │ +
│ │      if output_format == "pickle":
│ │          output.write(pickle.dumps(results))
│ │      elif output_format == "md":
│ │          output = _as_text_writer(output)
│ │          exporter = MarkdownExporter()
│ │          exporter.export(results, output)
│ │      elif output_format == "html":
│ │ @@ -70,15 +75,17 @@
│ │          exporter.export(results, output, knowledge_engine.schemaview)
│ │      else:
│ │          output = _as_text_writer(output)
│ │          output.write(dump_minimal_yaml(results))
│ │  
│ │  
│ │  template_option = click.option("-t", "--template", required=True, help="Template to use.")
│ │ -target_class_option = click.option("-T", "--target-class", help="Target class (if not already root).")
│ │ +target_class_option = click.option(
│ │ +    "-T", "--target-class", help="Target class (if not already root)."
│ │ +)
│ │  engine_option = click.option("-e", "--engine", help="Engine to use, e.g. text-davinci-003.")
│ │  recurse_option = click.option(
│ │      "--recurse/--no-recurse", default=True, show_default=True, help="Recursively parse structures."
│ │  )
│ │  output_option_wb = click.option(
│ │      "-o", "--output", type=click.File(mode="wb"), default=sys.stdout, help="Output file."
│ │  )
│ │ @@ -93,19 +100,18 @@
│ │      help="Output format.",
│ │  )
│ │  
│ │  
│ │  @click.group()
│ │  @click.option("-v", "--verbose", count=True)
│ │  @click.option("-q", "--quiet")
│ │ -@click.option("--cache-db",
│ │ -              help="Path to sqlite database to cache prompt-completion results")
│ │ -@click.option("--skip-annotator",
│ │ -              multiple=True,
│ │ -              help="Skip annotator (e.g. --skip-annotator gilda)")
│ │ +@click.option("--cache-db", help="Path to sqlite database to cache prompt-completion results")
│ │ +@click.option(
│ │ +    "--skip-annotator", multiple=True, help="Skip annotator (e.g. --skip-annotator gilda)"
│ │ +)
│ │  @click.version_option(__version__)
│ │  def main(verbose: int, quiet: bool, cache_db: str, skip_annotator):
│ │      """CLI for oak-ai.
│ │  
│ │      :param verbose: Verbosity while running.
│ │      :param quiet: Boolean to be quiet or verbose.
│ │      """
│ │ @@ -120,27 +126,30 @@
│ │          logger.setLevel(level=logging.ERROR)
│ │      logger.info(f"Logger {logger.name} set to level {logger.level}")
│ │      if cache_db:
│ │          settings.cache_db = cache_db
│ │      if skip_annotator:
│ │          settings.skip_annotators = list(skip_annotator)
│ │  
│ │ +
│ │  @main.command()
│ │  @template_option
│ │  @target_class_option
│ │  @engine_option
│ │  @recurse_option
│ │  @output_option_wb
│ │  @click.option("--dictionary")
│ │  @output_format_options
│ │ -@click.option("--auto-prefix",
│ │ -              default="AUTO",
│ │ -              help="Prefix to use for auto-generated classes.")
│ │ +@click.option("--auto-prefix", default="AUTO", help="Prefix to use for auto-generated classes.")
│ │ +@click.option("--set-slot-value",
│ │ +              "-S",
│ │ +            multiple=True,
│ │ +            help="Set slot value, e.g. --set-slot-value has_participant=protein")
│ │  @click.argument("input")
│ │ -def extract(template, target_class, dictionary, input, output, output_format, **kwargs):
│ │ +def extract(template, target_class, dictionary, input, output, output_format, set_slot_value, **kwargs):
│ │      """Extract knowledge from text guided by schema, using SPIRES engine.
│ │  
│ │      Example:
│ │  
│ │          ontogpt extract -t gocam.GoCamAnnotations gocam-27929086.txt
│ │  
│ │      The input argument must be either a file path or a string. If the file path exists,
│ │ @@ -172,14 +181,18 @@
│ │              text = input
│ │      logging.info(f"Input text: {text}")
│ │      if target_class:
│ │          target_class_def = ke.schemaview.get_class(target_class)
│ │      else:
│ │          target_class_def = None
│ │      results = ke.extract_from_text(text, target_class_def)
│ │ +    if set_slot_value:
│ │ +        for slot_value in set_slot_value:
│ │ +            slot, value = slot_value.split("=")
│ │ +            setattr(results.extracted_object, slot, value)
│ │      write_extraction(results, output, output_format, ke)
│ │  
│ │  
│ │  @main.command()
│ │  @template_option
│ │  @engine_option
│ │  @recurse_option
│ │ @@ -199,22 +212,23 @@
│ │  
│ │  @main.command()
│ │  @template_option
│ │  @engine_option
│ │  @recurse_option
│ │  @output_option_wb
│ │  @output_format_options
│ │ -@click.option("--keyword",
│ │ -              "-k",
│ │ -              multiple=True,
│ │ -              help="Keyword to search for (e.g. --keyword therapy). Also obtained from schema")
│ │ +@click.option(
│ │ +    "--keyword",
│ │ +    "-k",
│ │ +    multiple=True,
│ │ +    help="Keyword to search for (e.g. --keyword therapy). Also obtained from schema",
│ │ +)
│ │  @click.argument("term_tokens", nargs=-1)
│ │  def search_and_extract(term_tokens, keyword, template, output, output_format, **kwargs):
│ │ -    """Searches for relevant literature and extracts knowledge from it.
│ │ -    """
│ │ +    """Search for relevant literature and extracts knowledge from it."""
│ │      term = " ".join(term_tokens)
│ │      logging.info(f"Creating for {template}; search={term} kw={keyword}")
│ │      ke = SPIRESEngine(template, **kwargs)
│ │      logging.info(f"Creating PubMed client for {template}; search={term}")
│ │      pmc = PubmedClient()
│ │      logging.info("Got client")
│ │      keywords = list(keyword) if keyword else []
│ │ @@ -249,14 +263,78 @@
│ │      ke = SPIRESEngine(template, **kwargs)
│ │      logging.debug(f"Input text: {text}")
│ │      results = ke.extract_from_text(text)
│ │      write_extraction(results, output, output_format)
│ │  
│ │  
│ │  @main.command()
│ │ +@output_option_wb
│ │ +@click.option("--dictionary")
│ │ +@output_format_options
│ │ +@click.option(
│ │ +    "--recipes-urls-file",
│ │ +    "-R",
│ │ +    help="File with URLs to recipes to use for extraction",
│ │ +)
│ │ +@click.option("--auto-prefix", default="AUTO", help="Prefix to use for auto-generated classes.")
│ │ +@click.argument("url")
│ │ +def recipe_extract(url, recipes_urls_file, dictionary, output, output_format, **kwargs):
│ │ +    """Extract from recipe on the web.
│ │ +
│ │ +    """
│ │ +    from recipe_scrapers import scrape_me
│ │ +    if recipes_urls_file:
│ │ +        with open(recipes_urls_file, "r") as f:
│ │ +            urls = [line.strip() for line in f.readlines() if url in line]
│ │ +            if len(urls) != 1:
│ │ +                raise ValueError(f"Found {len(urls)} URLs in {recipes_urls_file}")
│ │ +            url = urls[0]
│ │ +    scraper = scrape_me(url)
│ │ +    template = "recipe"
│ │ +    logging.info(f"Creating for {template}")
│ │ +    ke = SPIRESEngine(template, **kwargs)
│ │ +    if settings.cache_db:
│ │ +        ke.client.cache_db_path = settings.cache_db
│ │ +    if settings.skip_annotators:
│ │ +        ke.client.skip_annotators = settings.skip_annotators
│ │ +    if dictionary:
│ │ +        ke.load_dictionary(dictionary)
│ │ +    ingredients = "\n".join(scraper.ingredients())
│ │ +    instructions = "\n".join(scraper.instructions_list())
│ │ +    text = f"""
│ │ +    Recipe: {scraper.title()}
│ │ +    Ingredients:\n{ingredients}
│ │ +    Instructions:\n{instructions}
│ │ +    """
│ │ +    logging.info(f"Input text: {text}")
│ │ +    results = ke.extract_from_text(text)
│ │ +    results.extracted_object.url = url
│ │ +    write_extraction(results, output, output_format, ke)
│ │ +
│ │ +
│ │ +@main.command()
│ │ +@output_option_wb
│ │ +@output_format_options
│ │ +@click.argument("input")
│ │ +def convert(input, output, output_format, **kwargs):
│ │ +    """Convert output format.
│ │ +
│ │ +    """
│ │ +    template = "recipe"
│ │ +    logging.info(f"Creating for {template}")
│ │ +    ke = SPIRESEngine(template, **kwargs)
│ │ +    cls = ke.template_pyclass
│ │ +    with open(input, "r") as f:
│ │ +        data = yaml.safe_load(f)
│ │ +    obj = cls(**data["extracted_object"])
│ │ +    results = ExtractionResult(extracted_object=obj)
│ │ +    write_extraction(results, output, output_format, ke)
│ │ +
│ │ +
│ │ +@main.command()
│ │  @output_option_txt
│ │  @output_format_options
│ │  @click.option(
│ │      "-C", "--context", required=True, help="domain e.g. anatomy, industry, health-related"
│ │  )
│ │  @click.argument("term")
│ │  def synonyms(term, context, output, output_format, **kwargs):
│ │ @@ -294,27 +372,40 @@
│ │  @engine_option
│ │  @click.option("-E", "--examples", type=click.File("r"), help="File of example objects.")
│ │  @recurse_option
│ │  @output_option_wb
│ │  @output_format_options
│ │  @click.argument("object")
│ │  def fill(template, object: str, examples, output, output_format, **kwargs):
│ │ -    """Fills in missing values."""
│ │ +    """Fill in missing values."""
│ │      logging.info(f"Creating for {template}")
│ │      ke = SPIRESEngine(template, **kwargs)
│ │      object = yaml.safe_load(object)
│ │      logging.info(f"Object to fill =  {object}")
│ │      logging.info(f"Loading {examples}")
│ │      examples = yaml.safe_load(examples)
│ │      logging.debug(f"Input object: {object}")
│ │      results = ke.generalize(object, examples)
│ │      output.write(yaml.dump(results.dict()))
│ │  
│ │  
│ │  @main.command()
│ │ +@engine_option
│ │ +@output_option_txt
│ │ +@output_format_options
│ │ +@click.argument("input")
│ │ +def complete(input, output, output_format, **kwargs):
│ │ +    """Prompt completion."""
│ │ +    ai = OpenAIClient()
│ │ +    text = open(input).read()
│ │ +    payload = ai.complete(text)
│ │ +    print(payload)
│ │ +
│ │ +
│ │ +@main.command()
│ │  @template_option
│ │  @click.option("--input", "-i", type=click.File("r"), default=sys.stdin, help="Input file")
│ │  def parse(template, input):
│ │      """Parse openai results."""
│ │      logging.info(f"Creating for {template}")
│ │      ke = SPIRESEngine(template)
│ │      text = input.read()
│ │ @@ -327,15 +418,15 @@
│ │  @main.command()
│ │  @click.option("-o", "--output", type=click.File(mode="w"), default=sys.stdout, help="Output file.")
│ │  @output_format_options
│ │  @engine_option
│ │  @click.option("-m", "match", help="Match string to use for filtering.")
│ │  @click.option("-D", "database", help="Path to sqlite database.")
│ │  def dump_completions(engine, match, database, output, output_format):
│ │ -    """Dumps cached completions."""
│ │ +    """Dump cached completions."""
│ │      logging.info(f"Creating for {engine}")
│ │      client = OpenAIClient()
│ │      if database:
│ │          client.cache_db_path = database
│ │      if output_format == "jsonl":
│ │          writer = jsonlines.Writer(output)
│ │          for engine, prompt, completion in client.cached_completions(match):
│ │ @@ -354,15 +445,15 @@
│ │              output.write(f"### Completion:\n\n {completion}\n\n")
│ │  
│ │  
│ │  @main.command()
│ │  @click.option("-o", "--output", type=click.File(mode="w"), default=sys.stdout, help="Output file.")
│ │  @click.argument("input", type=click.File("r"))
│ │  def convert_examples(input, output):
│ │ -    """Converts training examples from YAML."""
│ │ +    """Convert training examples from YAML."""
│ │      logging.info(f"Creating examples for {input}")
│ │      example_doc = yaml.safe_load(input)
│ │      writer = jsonlines.Writer(output)
│ │      for example in example_doc["examples"]:
│ │          prompt = example["prompt"]
│ │          completion = yaml.dump(example["completion"], sort_keys=False)
│ │          writer.write(dict(prompt=prompt, completion=completion))
│ │ @@ -377,25 +468,25 @@
│ │      type=click.INT,
│ │      default=5,
│ │      show_default=True,
│ │      help="number of iterations to cycle through.",
│ │  )
│ │  @click.argument("terms", nargs=-1)
│ │  def halo(input, context, terms, output, **kwargs):
│ │ -    """Runs HALO over inputs."""
│ │ +    """Run HALO over inputs."""
│ │      engine = HALOEngine()
│ │      engine.seed_from_file(input)
│ │      if context is None:
│ │          context = engine.ontology.elements[0].context
│ │      engine.fixed_slot_values = {"context": context}
│ │      engine.hallucinate(terms, **kwargs)
│ │      output.write(dump_minimal_yaml(engine.ontology))
│ │  
│ │  
│ │  @main.command()
│ │  def list_templates():
│ │ -    """Lists the templates."""
│ │ +    """List the templates."""
│ │      print("TODO")
│ │  
│ │  
│ │  if __name__ == "__main__":
│ │      main()
│ │   --- ontogpt-0.2.0/src/ontogpt/clients/openai_client.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/clients/openai_client.py
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/clients/pubmed_client.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/clients/pubmed_client.py
│ │┄ Files 8% similar despite different names
│ │ @@ -6,14 +6,15 @@
│ │  from eutils import Client
│ │  from eutils._internal.xmlfacades.pubmedarticle import PubmedArticle
│ │  
│ │  PMID = str
│ │  TITLE_WEIGHT = 5
│ │  MAX_PMIDS = 50
│ │  
│ │ +
│ │  def _normalize(s: str) -> str:
│ │      return inflection.singularize(s).lower()
│ │  
│ │  
│ │  def _score_paper(paper: PubmedArticle, keywords: List[str]) -> int:
│ │      title_score = _score_text(paper.title, keywords)
│ │      abstract_score = _score_text(paper.abstract, keywords)
│ │ @@ -30,62 +31,58 @@
│ │          if kw in text:
│ │              score += 1
│ │      return score
│ │  
│ │  
│ │  @dataclass
│ │  class PubmedClient:
│ │ -    """
│ │ -    A client for the Pubmed API.
│ │ +    """A client for the Pubmed API.
│ │  
│ │      This class is a wrapper around the Entrez API.
│ │      """
│ │  
│ │      entrez_client: Client = field(default_factory=lambda: Client())
│ │      max_text_length = 3000
│ │  
│ │      def text(self, id: PMID, autoformat=True) -> str:
│ │ -        """
│ │ -        Get the text of a paper from its PMID
│ │ +        """Get the text of a paper from its PMID.
│ │  
│ │          :param id:
│ │          :param autoformat: if True include title and abstract concatenated
│ │          :return:
│ │          """
│ │          ec = self.entrez_client
│ │          id = id.replace("PMID:", "")
│ │          paset = ec.efetch(db="pubmed", id=id)
│ │          for pa in paset:
│ │              if autoformat:
│ │ -                txt = f"Title: {pa.title}\nAbstract: {pa.abstract}\nKeywords: {'; '.join(pa.mesh_headings)}"
│ │ +                txt = f"Title: {pa.title}\nAbstract: {pa.abstract}\nKeywords: {'; '.join(pa.mesh_headings)}"  # noqa
│ │              else:
│ │                  txt = pa.full_text
│ │          if len(txt) > self.max_text_length:
│ │              logging.warning(f"Truncating text: {txt[:self.max_text_length]}...")
│ │              txt = txt[0 : self.max_text_length]
│ │          return txt
│ │  
│ │      def search(self, term: str, keywords: List[str] = None) -> Iterator[PMID]:
│ │ -        """
│ │ -        Get the text of a paper from its PMID
│ │ +        """Get the text of a paper from its PMID.
│ │  
│ │          :param term:
│ │          :param keywords:
│ │          :return:
│ │          """
│ │          print("Getting client")
│ │          ec = self.entrez_client
│ │          if keywords:
│ │              keywords = [_normalize(kw) for kw in keywords]
│ │              term = f"({term}) AND ({' OR '.join(keywords)})"
│ │          logging.info(f"Searching for {term}...")
│ │          esr = ec.esearch(db="pubmed", term=term)
│ │          logging.info(f"Found {esr.count} papers for {term}.")
│ │ -        paset = ec.efetch(db='pubmed', id=esr.ids[0:MAX_PMIDS])
│ │ +        paset = ec.efetch(db="pubmed", id=esr.ids[0:MAX_PMIDS])
│ │          keywords = keywords or []
│ │          keywords = [_normalize(kw) for kw in keywords]
│ │          scored_papers = [(_score_paper(paper, keywords), paper) for paper in paset]
│ │          scored_papers.sort(key=lambda x: x[0], reverse=True)
│ │          for score, paper in scored_papers:
│ │              logging.debug(f"Yielding {paper.pmid} {paper.title} with score {score} ")
│ │              yield f"PMID:{paper.pmid}"
│ │ -
│ │   --- ontogpt-0.2.0/src/ontogpt/clients/soup_client.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/clients/soup_client.py
│ │┄ Files 22% similar despite different names
│ │ @@ -1,26 +1,21 @@
│ │ -import logging
│ │ -from dataclasses import dataclass, field
│ │ +from dataclasses import dataclass
│ │  
│ │  import requests
│ │  from bs4 import BeautifulSoup
│ │  
│ │  PMID = str
│ │  
│ │  
│ │  @dataclass
│ │  class SoupClient:
│ │ -    """
│ │ -    A client for the Beautiful Soup API.
│ │ -
│ │ -    """
│ │ +    """A client for the Beautiful Soup API."""
│ │  
│ │      def text(self, url: str) -> str:
│ │ -        """
│ │ -        Get the text of a paper from its PMID
│ │ +        """Get the text of a paper from its PMID.
│ │  
│ │          :param id:
│ │          :param autoformat: if True include title and abstract concatenated
│ │          :return:
│ │          """
│ │          result = requests.get(url)
│ │          if result.status_code != 200:
│ │   --- ontogpt-0.2.0/src/ontogpt/converters/ontology_converter.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/converters/ontology_converter.py
│ │┄ Files 3% similar despite different names
│ │ @@ -14,52 +14,48 @@
│ │  
│ │  this_path = Path(__file__).parent
│ │  logger = logging.getLogger(__name__)
│ │  
│ │  
│ │  @dataclass
│ │  class OntologyConverter:
│ │ -    """
│ │ -    Converts an OAK ontology to an OntoGPT schema
│ │ -    """
│ │ +    """Converts an OAK ontology to an OntoGPT schema."""
│ │  
│ │      adapter: OboGraphInterface = None
│ │      schemaview: SchemaView = None
│ │      fixed_slot_values: Dict[str, str] = field(default_factory=lambda: {})
│ │  
│ │      def __post_init__(self):
│ │          templates_path = this_path.parent / "templates"
│ │          path_to_template = str(templates_path / "halo.yaml")
│ │          self.schemaview = SchemaView(path_to_template)
│ │  
│ │      def extract_seed_ontology(self, seeds: List[str], predicates: List[str]) -> Ontology:
│ │ -        """
│ │ -        Extract an ontology from a given text
│ │ +        """Extract an ontology from a given text.
│ │ +
│ │          :param text:
│ │          :return:
│ │          """
│ │          ancestors = list(set(list(self.adapter.ancestors(seeds, predicates, reflexive=True))))
│ │          seed_graph = self.adapter.extract_graph(ancestors, predicates, dangling=False)
│ │          logger.info(len(seed_graph.nodes))
│ │          seed_ontology = self.from_obograph(seed_graph)
│ │          return seed_ontology
│ │  
│ │      def from_adapter(self) -> Ontology:
│ │ -        """
│ │ -        Convert an OAK adapter to an Ontology
│ │ +        """Convert an OAK adapter to an Ontology.
│ │  
│ │          :param adapter:
│ │          :return:
│ │          """
│ │          graph = self.adapter.as_obograph()
│ │          return self.from_obograph(graph)
│ │  
│ │      def from_obograph(self, graph: Graph) -> Ontology:
│ │ -        """
│ │ -        Convert an OBO Graph to an Ontology
│ │ +        """Convert an OBO Graph to an Ontology.
│ │  
│ │          :param graph:
│ │          :return:
│ │          """
│ │          adapter = self.adapter
│ │          ontology = Ontology()
│ │          element_index = {}
│ │ @@ -128,16 +124,16 @@
│ │                  )
│ │                  logging.info(f"Equiv[{element.name}] = {element.equivalent_to}")
│ │          for element in element_index.values():
│ │              ontology.elements.append(element)
│ │          return ontology
│ │  
│ │      def node_to_name(self, curie: str, label: Optional[str] = None) -> str:
│ │ -        """
│ │ -        Convert a node to a name
│ │ +        """Convert a node to a name.
│ │ +
│ │          :param curie:
│ │          :param label:
│ │          :return:
│ │          """
│ │          if label is None:
│ │              label = self.adapter.label(curie)
│ │          if label is None:
│ │   --- ontogpt-0.2.0/src/ontogpt/engines/halo_engine.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/engines/halo_engine.py
│ │┄ Files 2% similar despite different names
│ │ @@ -1,31 +1,31 @@
│ │  """
│ │ -Uses code-davinci-002
│ │ +Uses code-davinci-002.
│ │  
│ │  Note also that fine-tuning can't be done with code-davinci-002, see:
│ │  https://community.openai.com/t/finetuning-code-davinci/23132/2
│ │  """
│ │  import logging
│ │  from dataclasses import dataclass, field
│ │  from pathlib import Path
│ │ -from typing import Any, Dict, List, Optional, Set, Tuple, Union
│ │ +from typing import Any, Dict, List, Optional, Set
│ │  
│ │  import openai
│ │  import pydantic
│ │  import tiktoken
│ │  import yaml
│ │  from linkml.utils.schema_fixer import uncamel
│ │  from linkml_runtime.utils.formatutils import camelcase
│ │  from oaklib.datamodels.obograph import Graph
│ │  from oaklib.datamodels.vocabulary import IS_A
│ │  from oaklib.interfaces.obograph_interface import OboGraphInterface
│ │  from tiktoken import Encoding
│ │  
│ │  from ontogpt.clients import OpenAIClient
│ │ -from ontogpt.engines.knowledge_engine import EXAMPLE, FIELD, OBJECT, KnowledgeEngine
│ │ +from ontogpt.engines.knowledge_engine import FIELD, KnowledgeEngine
│ │  from ontogpt.io.yaml_wrapper import dump_minimal_yaml
│ │  from ontogpt.templates.halo import Ontology, OntologyElement
│ │  
│ │  this_path = Path(__file__).parent
│ │  logger = logging.getLogger(__name__)
│ │  
│ │  
│ │ @@ -63,50 +63,49 @@
│ │      adapter: OboGraphInterface = None
│ │      visited: Set[ELEMENT_NAME] = field(default_factory=lambda: set())
│ │      candidates: List[ELEMENT_NAME] = None
│ │      always_extend: bool = False
│ │      expand_horizon: bool = False
│ │  
│ │      element_scores: Dict[ELEMENT_NAME, float] = field(default_factory=lambda: {})
│ │ -    """Ranks each element by estimated informativeness for training"""
│ │ +    """Ranks each element by estimated informativeness for training."""
│ │  
│ │      tokenizer_encoding: Encoding = field(default_factory=lambda: tiktoken.get_encoding("gpt2"))
│ │  
│ │      def __post_init__(self):
│ │          self.template_class = self._get_template_class("halo.OntologyElement")
│ │          self.client = OpenAIClient(engine=self.engine)
│ │          self.api_key = self._get_openai_api_key()
│ │          openai.api_key = self.api_key
│ │  
│ │      def seed(self, seed_ontology: Ontology):
│ │ -        """
│ │ -        Seed the engine with an initial ontology
│ │ +        """Seed the engine with an initial ontology.
│ │ +
│ │          :param seed_ontology:
│ │          :return:
│ │          """
│ │          self.ontology = seed_ontology
│ │          if not self.expand_horizon:
│ │              self.visited = {x.name for x in self.ontology.elements}
│ │  
│ │      def seed_from_file(self, file_path: str) -> Ontology:
│ │ -        """
│ │ -        Seed the engine with an initial ontology from a file
│ │ +        """Seed the engine with an initial ontology from a file.
│ │ +
│ │          :param file_path:
│ │          :return:
│ │          """
│ │          ontology = Ontology(**yaml.safe_load(open(file_path)))
│ │          self.seed(ontology)
│ │          logger.info(f"Seeded with {len(ontology.elements)} elements")
│ │          return ontology
│ │  
│ │      def hallucinate(
│ │          self, seed_elements: List[ELEMENT_NAME] = None, num_iterations=10
│ │      ) -> List[OntologyElement]:
│ │ -        """
│ │ -        Run the HALO engine for a given number of iterations.
│ │ +        """Run the HALO engine for a given number of iterations.
│ │  
│ │          Each iteration will expand the initial seed ontology.
│ │  
│ │          :param num_iterations:
│ │          :return:
│ │          """
│ │          added = []
│ │ @@ -119,16 +118,15 @@
│ │              if elt:
│ │                  added.append(elt)
│ │              else:
│ │                  break
│ │          return added
│ │  
│ │      def hallucinate_once(self) -> Optional[OntologyElement]:
│ │ -        """
│ │ -        Run the HALO engine once.
│ │ +        """Run the HALO engine once.
│ │  
│ │          Finds a candidate element to expand,
│ │          then runs HALO on that element by generating
│ │          a prompt for it.
│ │  
│ │          :return:
│ │          """
│ │ @@ -138,29 +136,27 @@
│ │          if not candidate_elements:
│ │              return None
│ │          element = candidate_elements[0]
│ │          logger.info(f"Selected element {element}")
│ │          return self.hallucinate_element(element)
│ │  
│ │      def get_candidate_elements(self) -> List[ELEMENT_NAME]:
│ │ -        """
│ │ -        Get candidate elements to expand
│ │ +        """Get candidate elements to expand.
│ │  
│ │          Has side effect of removing candidate cache if visited
│ │          :return:
│ │          """
│ │          if self.candidates is None:
│ │              # TODO: exclude seed set that is not on the horizon
│ │              self.candidates = [x.name for x in self.ontology.elements]
│ │          self.candidates = [c for c in self.candidates if c not in self.visited]
│ │          return self.candidates
│ │  
│ │      def extend_candidates(self, elements: List[ELEMENT_NAME]) -> List[ELEMENT_NAME]:
│ │ -        """
│ │ -        Extend candidates by all entities in the signature of the specified elements.
│ │ +        """Extend candidates by all entities in the signature of the specified elements.
│ │  
│ │          :return:
│ │          """
│ │          visited = self.visited
│ │          if not self.traverse_slots:
│ │              raise ValueError("No slots to traverse")
│ │          for element_name in elements:
│ │ @@ -174,26 +170,26 @@
│ │                          if not self.candidates:
│ │                              self.candidates = []
│ │                          self.candidates.append(ref)
│ │                          logger.info(f" -- Added {ref} to candidates")
│ │          return self.candidates
│ │  
│ │      def get_element(self, element_name: ELEMENT_NAME) -> Optional[OntologyElement]:
│ │ -        """
│ │ -        Get an element by name
│ │ +        """Get an element by name.
│ │ +
│ │          :param element_name:
│ │          :return:
│ │          """
│ │          for e in self.ontology.elements:
│ │              if e.name == element_name:
│ │                  return e
│ │  
│ │      def old_get_candidate_elements(self) -> List[ELEMENT_NAME]:
│ │ -        """
│ │ -        Get candidate elements for HALO
│ │ +        """Get candidate elements for HALO.
│ │ +
│ │          :return:
│ │          """
│ │          candidate_elements = set()
│ │          visited = self.visited
│ │          if not self.traverse_slots:
│ │              raise ValueError("No slots to traverse")
│ │          for element in self.ontology.elements:
│ │ @@ -266,16 +262,16 @@
│ │          element_tokens = set(self.tokenizer_encoding.encode(element_name))
│ │          jaccard = len(tokens.intersection(element_tokens)) / len(tokens.union(element_tokens))
│ │          return score / 100 + jaccard
│ │  
│ │      def generate_prompt(
│ │          self, seed_element: ELEMENT_NAME, example_elements: List[OntologyElement]
│ │      ) -> StructuredPrompt:
│ │ -        """
│ │ -        Generate a prompt for HALO
│ │ +        """Generate a prompt for HALO.
│ │ +
│ │          :param seed_element:
│ │          :param example_elements:
│ │          :return:
│ │          """
│ │          prompt = StructuredPrompt()
│ │          prompt.header = INSTRUCTIONS
│ │          for slot in self.schemaview.class_induced_slots("OntologyElement"):
│ │ @@ -297,16 +293,16 @@
│ │              f"Generated prompt: {len(prompt.text)} = {len(prompt.header)} + {len(prompt.body)} + {len(prompt.main_prompt)}"
│ │          )
│ │          return prompt
│ │  
│ │      def integrate_payload(
│ │          self, prompt: StructuredPrompt, payload: Dict[str, Any]
│ │      ) -> List[OntologyElement]:
│ │ -        """
│ │ -        Integrate the payload from HALO into the ontology
│ │ +        """Integrate the payload from HALO into the ontology.
│ │ +
│ │          :param payload:
│ │          :param element:
│ │          :return:
│ │          """
│ │          effective_payload = prompt.main_prompt + payload
│ │          # logger.info(f"## EFFECTIVE: {effective_payload}")
│ │          try:
│ │ @@ -345,16 +341,16 @@
│ │              elif not slot.multivalued and isinstance(v, list):
│ │                  logger.warning(f"Coercing {v} len {len(v)} to single value")
│ │                  v = v[0]
│ │              nu_obj[k] = v
│ │          return nu_obj
│ │  
│ │      def old_integrate_payload(self, prompt: StructuredPrompt, payload: Dict[str, Any]):
│ │ -        """
│ │ -        Integrate the payload from HALO into the ontology
│ │ +        """Integrate the payload from HALO into the ontology.
│ │ +
│ │          :param payload:
│ │          :param element:
│ │          :return:
│ │          """
│ │          allowed_slots = self.schemaview.class_slots("OntologyElement")
│ │          effective_payload = prompt.main_prompt + payload
│ │          # logger.info(f"## EFFECTIVE: {effective_payload}")
│ │ @@ -386,16 +382,16 @@
│ │                  logger.info(f" - already got {elt.name}")
│ │                  if n == 1:
│ │                      logger.error(f"Failed to add first element {elt.name}")
│ │          logger.info(f"Added {len(added)} elements")
│ │          return added
│ │  
│ │      def parse_what_you_can(self, yaml_str: str) -> List[Dict[str, Any]]:
│ │ -        """
│ │ -        Parse as much of the YAML as possible
│ │ +        """Parse as much of the YAML as possible.
│ │ +
│ │          :param yaml_str:
│ │          :return:
│ │          """
│ │          objs = None
│ │          chunk = ""
│ │          for line in yaml_str.split("\n"):
│ │              chunk += line + "\n"
│ │ @@ -404,40 +400,40 @@
│ │              except:
│ │                  pass
│ │          if objs is None:
│ │              raise ValueError(f"Could not parse YAML {yaml_str}")
│ │          return objs
│ │  
│ │      def add_element(self, element: OntologyElement) -> bool:
│ │ -        """
│ │ -        Add an element to the ontology
│ │ +        """Add an element to the ontology.
│ │ +
│ │          :param obj:
│ │          :return:
│ │          """
│ │          existing = self.get_element(element.name)
│ │          if existing:
│ │              return False
│ │          self.ontology.elements.append(element)
│ │          return True
│ │  
│ │      def xxextract_seed_ontology(self, seeds: List[str], predicates: List[str]) -> Ontology:
│ │ -        """
│ │ -        Extract an ontology from a given text
│ │ +        """Extract an ontology from a given text.
│ │ +
│ │          :param text:
│ │          :return:
│ │          """
│ │          ancestors = list(set(list(self.adapter.ancestors(seeds, predicates, reflexive=True))))
│ │          seed_graph = self.adapter.extract_graph(ancestors, predicates, dangling=False)
│ │          logger.info(len(seed_graph.nodes))
│ │          seed_ontology = self.ontology_from_obograph(seed_graph)
│ │          return seed_ontology
│ │  
│ │      def xxontology_from_obograph(self, graph: Graph) -> Ontology:
│ │ -        """
│ │ -        Convert an OBO Graph to an Ontology
│ │ +        """Convert an OBO Graph to an Ontology.
│ │ +
│ │          :param graph:
│ │          :return:
│ │          """
│ │          adapter = self.adapter
│ │          ontology = Ontology()
│ │          element_index = {}
│ │          node_to_element_name = {}
│ │ @@ -505,16 +501,16 @@
│ │                  )
│ │                  logger.info(f"Equiv[{element.name}] = {element.equivalent_to}")
│ │          for element in element_index.values():
│ │              ontology.elements.append(element)
│ │          return ontology
│ │  
│ │      def xxnode_to_name(self, curie: str, label: Optional[str] = None) -> str:
│ │ -        """
│ │ -        Convert a node to a name
│ │ +        """Convert a node to a name.
│ │ +
│ │          :param curie:
│ │          :param label:
│ │          :return:
│ │          """
│ │          if label is None:
│ │              label = self.adapter.label(curie)
│ │          if label is None:
│ │   --- ontogpt-0.2.0/src/ontogpt/engines/knowledge_engine.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/engines/knowledge_engine.py
│ │┄ Files 1% similar despite different names
│ │ @@ -1,27 +1,27 @@
│ │  """
│ │  Main Knowledge Extractor class.
│ │  """
│ │  import importlib
│ │  import logging
│ │  import re
│ │ -from urllib.parse import quote
│ │  from abc import ABC
│ │  from dataclasses import dataclass, field
│ │  from pathlib import Path
│ │  from types import ModuleType
│ │  from typing import Any, Dict, Iterator, List, Optional, TextIO, Tuple, Union
│ │ +from urllib.parse import quote
│ │  
│ │  import inflection
│ │  import openai
│ │  import pydantic
│ │  import yaml
│ │  from linkml_runtime import SchemaView
│ │  from linkml_runtime.linkml_model import ClassDefinition, ElementName, SlotDefinition
│ │ -from oaklib import BasicOntologyInterface, get_implementation_from_shorthand
│ │ +from oaklib import BasicOntologyInterface, get_implementation_from_shorthand, get_adapter
│ │  from oaklib.datamodels.text_annotator import TextAnnotationConfiguration
│ │  from oaklib.implementations import OntoPortalImplementationBase
│ │  from oaklib.interfaces import MappingProviderInterface, TextAnnotatorInterface
│ │  from oaklib.utilities.apikey_manager import get_apikey_value
│ │  from oaklib.utilities.subsets.value_set_expander import ValueSetExpander
│ │  
│ │  from ontogpt.clients import OpenAIClient
│ │ @@ -447,15 +447,17 @@
│ │          """
│ │          logger.info(f"GROUNDING {text} using {cls.name}")
│ │          text_lower = text.lower()
│ │          text_singularized = inflection.singularize(text_lower)
│ │          if text_singularized != text_lower:
│ │              logger.info(f"Singularized {text} to {text_singularized}")
│ │              yield from self.groundings(text_singularized, cls)
│ │ -        parenthetical_components = re.findall(r'\((.*?)\)', text_lower)
│ │ +        parenthetical_components = re.findall(r"\[(.*?)\]", text_lower)
│ │ +        if not parenthetical_components:
│ │ +            parenthetical_components = re.findall(r"\((.*?)\)", text_lower)
│ │          if parenthetical_components:
│ │              trimmed_text = text_lower
│ │              for component in parenthetical_components:
│ │                  if component:
│ │                      yield from self.groundings(component, cls)
│ │                  trimmed_text = trimmed_text.replace(f"({component})", "")
│ │              trimmed_text = trimmed_text.strip().replace("  ", " ")
│ │ @@ -483,15 +485,15 @@
│ │          for matches_whole_text in [True, False]:
│ │              config = TextAnnotationConfiguration(matches_whole_text=matches_whole_text)
│ │              for annotator in annotators:
│ │                  if isinstance(annotator, str):
│ │                      if self.skip_annotators and annotator in self.skip_annotators:
│ │                          continue
│ │                      logger.info(f"Loading annotator {annotator}")
│ │ -                    annotator = get_implementation_from_shorthand(annotator)
│ │ +                    annotator = get_adapter(annotator)
│ │                  if not matches_whole_text and not isinstance(
│ │                      annotator, OntoPortalImplementationBase
│ │                  ):
│ │                      # TODO: allow more fine-grained control
│ │                      logger.info(
│ │                          f"Skipping {type(annotator)} as it does not support partial matches"
│ │                      )
│ │   --- ontogpt-0.2.0/src/ontogpt/engines/resolver.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/engines/resolver.py
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/engines/spires_engine.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/engines/spires_engine.py
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/engines/synonym_engine.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/engines/synonym_engine.py
│ │┄ Files 1% similar despite different names
│ │ @@ -8,11 +8,12 @@
│ │  class SynonymEngine(KnowledgeEngine):
│ │      """Engine for generating synonyms."""
│ │  
│ │      engine: str = "text-davinci-003"
│ │  
│ │      def synonyms(self, named_entity: str, domain: str) -> List[str]:
│ │          """Get synonyms for a given text."""
│ │ -        prompt = f"List the example formal scientific synonyms for the {domain} concept {named_entity} as a semi-colon separated list."
│ │ +        prompt = f"List the example formal scientific\
│ │ +            synonyms for the {domain} concept {named_entity} as a semi-colon separated list."
│ │          prompt += " Only include terms with identical meaning, not more specific or general terms."
│ │          payload = self.client.complete(prompt)
│ │          return payload.split("; ")
│ │   --- ontogpt-0.2.0/src/ontogpt/evaluation/ctd/database/CDR_TestSet.BioC.xml.gz
│ ├── +++ ontogpt-0.2.1/src/ontogpt/evaluation/ctd/database/CDR_TestSet.BioC.xml.gz
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/evaluation/ctd/database/CDR_TrainSet.BioC.xml.gz
│ ├── +++ ontogpt-0.2.1/src/ontogpt/evaluation/ctd/database/CDR_TrainSet.BioC.xml.gz
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/evaluation/ctd/database/synonyms.yaml
│ ├── +++ ontogpt-0.2.1/src/ontogpt/evaluation/ctd/database/synonyms.yaml
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/evaluation/ctd/eval_ctd.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/evaluation/ctd/eval_ctd.py
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/evaluation/drugmechdb/datamodel/drugmechdb.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/evaluation/drugmechdb/datamodel/drugmechdb.py
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/evaluation/drugmechdb/datamodel/drugmechdb.yaml
│ ├── +++ ontogpt-0.2.1/src/ontogpt/evaluation/drugmechdb/datamodel/drugmechdb.yaml
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/evaluation/drugmechdb/eval_drugmechdb.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/evaluation/drugmechdb/eval_drugmechdb.py
│ │┄ Files 1% similar despite different names
│ │ @@ -107,16 +107,16 @@
│ │          self.extractor = SPIRESEngine("drug.DrugMechanism")
│ │          self.extractor.labelers = [
│ │              get_implementation_from_shorthand(l) for l in self.default_labelers
│ │          ]
│ │  
│ │      @property
│ │      def drug_to_mechanism_text(self) -> Dict[str, str]:
│ │ -        """
│ │ -        Mapping between drugbank id and MOA text from drugbank record.
│ │ +        """Mapping between drugbank id and MOA text from drugbank record.
│ │ +
│ │          :return:
│ │          """
│ │          if self._drug_to_mechanism_text is None:
│ │              with open(MOA_TEXTS, "r") as f:
│ │                  self._drug_to_mechanism_text = {}
│ │                  for line in f:
│ │                      toks = line.strip().split("\t")
│ │ @@ -257,16 +257,16 @@
│ │              print(yaml.dump(pred.dict()))
│ │              pred.calculate_scores()
│ │              print(yaml.dump(pred.dict()))
│ │              eos.predictions.append(pred)
│ │          return eos
│ │  
│ │      def eval_path_prediction(self) -> EvaluationObjectSetDrugMechDB:
│ │ -        """
│ │ -        Evaluates the ability to predict a path purely from background knowledge in the LLM.
│ │ +        """Evaluates the ability to predict a path purely from background knowledge in the LLM.
│ │ +
│ │          :return:
│ │          """
│ │          ke = self.extractor
│ │          eos = self.create_test_and_training(num_test=self.num_tests, num_training=self.num_training)
│ │          eos.predictions = []
│ │          print(yaml.dump(eos.dict()))
│ │          for test_obj in eos.test:
│ │   --- ontogpt-0.2.0/src/ontogpt/evaluation/evaluation_engine.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/evaluation/evaluation_engine.py
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/evaluation/go/eval_go.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/evaluation/go/eval_go.py
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/evaluation/hpoa/eval_hpoa.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/evaluation/hpoa/eval_hpoa.py
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/evaluation/resolver.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/evaluation/resolver.py
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/io/html_exporter.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/io/html_exporter.py
│ │┄ Files 0% similar despite different names
│ │ @@ -13,14 +13,15 @@
│ │  @dataclass
│ │  class HTMLExporter(Exporter):
│ │      """
│ │      An exporter that will generate HTML for extraction results.
│ │  
│ │      TODO: rewrite to use bootstrap
│ │      """
│ │ +
│ │      output: TextIO = None
│ │  
│ │      def export(self, extraction_output: ExtractionResult, output: Union[str, Path, TextIO]):
│ │          if isinstance(output, Path):
│ │              output = str(output)
│ │          if isinstance(output, str):
│ │              output = open(str(output), "w", encoding="utf-8")
│ │   --- ontogpt-0.2.0/src/ontogpt/io/markdown_exporter.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/io/markdown_exporter.py
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/io/owl_exporter.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/io/owl_exporter.py
│ │┄ Files 3% similar despite different names
│ │ @@ -1,23 +1,30 @@
│ │  from dataclasses import dataclass
│ │  from pathlib import Path
│ │  from typing import TextIO, Union
│ │  
│ │  import pydantic
│ │  import yaml
│ │  from linkml.generators.pythongen import PythonGenerator
│ │ +from linkml_owl.dumpers.owl_dumper import OWLDumper
│ │  from linkml_runtime import SchemaView
│ │  
│ │  from ontogpt.io.exporter import Exporter, is_curie
│ │  from ontogpt.templates.core import ExtractionResult
│ │ -from linkml_owl.dumpers.owl_dumper import OWLDumper
│ │ +
│ │  
│ │  @dataclass
│ │  class OWLExporter(Exporter):
│ │ -    def export(self, extraction_output: ExtractionResult, output: Union[str, Path, TextIO], schemaview: SchemaView, id_value = None):
│ │ +    def export(
│ │ +        self,
│ │ +        extraction_output: ExtractionResult,
│ │ +        output: Union[str, Path, TextIO],
│ │ +        schemaview: SchemaView,
│ │ +        id_value=None,
│ │ +    ):
│ │          if isinstance(output, Path):
│ │              output = str(output)
│ │          if isinstance(output, str):
│ │              output = open(str(output), "w", encoding="utf-8")
│ │          dumper = OWLDumper()
│ │          element = extraction_output.extracted_object
│ │          cls_name = type(element).__name__
│ │   --- ontogpt-0.2.0/src/ontogpt/io/yaml_wrapper.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/io/yaml_wrapper.py
│ │┄ Files 15% similar despite different names
│ │ @@ -1,17 +1,15 @@
│ │  from typing import Any
│ │  
│ │  import pydantic
│ │  import yaml
│ │  
│ │  
│ │  def eliminate_empty(obj: Any, preserve=False) -> Any:
│ │ -    """
│ │ -    Eliminate empty lists and dicts from an object
│ │ -    """
│ │ +    """Eliminate empty lists and dicts from an object."""
│ │      if isinstance(obj, list):
│ │          return [eliminate_empty(x, preserve) for x in obj if x or preserve]
│ │      elif isinstance(obj, dict):
│ │          return {k: eliminate_empty(v, preserve) for k, v in obj.items() if v or preserve}
│ │      elif isinstance(obj, pydantic.BaseModel):
│ │          return eliminate_empty(obj.dict(), preserve)
│ │      else:
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/biological_process.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/environmental_sample.py
│ │┄ Files 10% similar despite different names
│ │ @@ -1,153 +1,182 @@
│ │  from __future__ import annotations
│ │ -from datetime import datetime, date
│ │ +
│ │ +from datetime import date, datetime
│ │  from enum import Enum
│ │ -from typing import List, Dict, Optional, Any
│ │ -from pydantic import BaseModel as BaseModel, Field
│ │ +from typing import Any, Dict, List, Optional
│ │ +
│ │ +from pydantic import BaseModel as BaseModel
│ │ +from pydantic import Field
│ │  
│ │  metamodel_version = "None"
│ │  version = "None"
│ │  
│ │ +
│ │  class WeakRefShimBaseModel(BaseModel):
│ │ -   __slots__ = '__weakref__'
│ │ -    
│ │ -class ConfiguredBaseModel(WeakRefShimBaseModel,
│ │ -                validate_assignment = True, 
│ │ -                validate_all = True, 
│ │ -                underscore_attrs_are_private = True, 
│ │ -                extra = 'forbid', 
│ │ -                arbitrary_types_allowed = True):
│ │ -    pass                    
│ │ -
│ │ -
│ │ -class GeneMolecularActivityRelationship(ConfiguredBaseModel):
│ │ -    
│ │ -    gene: Optional[str] = Field(None)
│ │ -    molecular_activity: Optional[str] = Field(None)
│ │ -    
│ │ +    __slots__ = "__weakref__"
│ │ +
│ │ +
│ │ +class ConfiguredBaseModel(
│ │ +    WeakRefShimBaseModel,
│ │ +    validate_assignment=True,
│ │ +    validate_all=True,
│ │ +    underscore_attrs_are_private=True,
│ │ +    extra="forbid",
│ │ +    arbitrary_types_allowed=True,
│ │ +):
│ │ +    pass
│ │ +
│ │ +
│ │ +class Study(ConfiguredBaseModel):
│ │ +
│ │ +    location: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""the sites at which the study was conducted"""
│ │ +    )
│ │ +    environmental_material: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""the environmental material that was sampled"""
│ │ +    )
│ │ +    environments: Optional[List[str]] = Field(default_factory=list)
│ │ +    causal_relationships: Optional[List[CausalRelationship]] = Field(default_factory=list)
│ │ +    variables: Optional[List[str]] = Field(default_factory=list)
│ │ +    measurements: Optional[List[Measurement]] = Field(default_factory=list)
│ │  
│ │  
│ │  class ExtractionResult(ConfiguredBaseModel):
│ │      """
│ │      A result of extracting knowledge on text
│ │      """
│ │ +
│ │      input_id: Optional[str] = Field(None)
│ │      input_title: Optional[str] = Field(None)
│ │      input_text: Optional[str] = Field(None)
│ │      raw_completion_output: Optional[str] = Field(None)
│ │      prompt: Optional[str] = Field(None)
│ │ -    extracted_object: Optional[Any] = Field(None, description="""The complex objects extracted from the text""")
│ │ -    named_entities: Optional[List[Any]] = Field(default_factory=list, description="""Named entities extracted from the text""")
│ │ -    
│ │ +    extracted_object: Optional[Any] = Field(
│ │ +        None, description="""The complex objects extracted from the text"""
│ │ +    )
│ │ +    named_entities: Optional[List[Any]] = Field(
│ │ +        default_factory=list, description="""Named entities extracted from the text"""
│ │ +    )
│ │  
│ │  
│ │  class NamedEntity(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class BiologicalProcess(NamedEntity):
│ │ -    
│ │ -    label: Optional[str] = Field(None, description="""the name of the biological process""")
│ │ -    description: Optional[str] = Field(None, description="""a textual description of the biological process""")
│ │ -    synonyms: Optional[List[str]] = Field(default_factory=list, description="""alternative names of the biological process""")
│ │ -    subclass_of: Optional[str] = Field(None, description="""the category to which this biological process belongs""")
│ │ -    inputs: Optional[List[str]] = Field(default_factory=list, description="""the inputs of the biological process""")
│ │ -    outputs: Optional[List[str]] = Field(default_factory=list, description="""the outputs of the biological process""")
│ │ -    steps: Optional[List[str]] = Field(default_factory=list, description="""the steps involved in this biological process""")
│ │ -    genes: Optional[List[str]] = Field(default_factory=list)
│ │ -    gene_activities: Optional[List[GeneMolecularActivityRelationship]] = Field(default_factory=list, description="""semicolon-separated list of gene to molecular activity relationships""")
│ │ +class Location(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ -    
│ │ +    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ +
│ │  
│ │ +class EnvironmentalMaterial(NamedEntity):
│ │  
│ │ -class Gene(NamedEntity):
│ │ -    
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class MolecularActivity(NamedEntity):
│ │ -    
│ │ +class Environment(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class ChemicalEntity(NamedEntity):
│ │ -    
│ │ +class Variable(NamedEntity):
│ │ +
│ │ +    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ +    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ +
│ │ +
│ │ +class Unit(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class CompoundExpression(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      None
│ │ -    
│ │ +
│ │ +
│ │ +class Measurement(CompoundExpression):
│ │ +
│ │ +    value: Optional[str] = Field(None, description="""the value of the measurement""")
│ │ +    unit: Optional[str] = Field(None, description="""the unit of the measurement""")
│ │ +
│ │ +
│ │ +class CausalRelationship(CompoundExpression):
│ │ +
│ │ +    cause: Optional[str] = Field(
│ │ +        None, description="""the variable that is the cause of the effect"""
│ │ +    )
│ │ +    effect: Optional[str] = Field(None, description="""the things that is affected""")
│ │  
│ │  
│ │  class Triple(CompoundExpression):
│ │      """
│ │      Abstract parent for Relation Extraction tasks
│ │      """
│ │ +
│ │      subject: Optional[str] = Field(None)
│ │      predicate: Optional[str] = Field(None)
│ │      object: Optional[str] = Field(None)
│ │ -    qualifier: Optional[str] = Field(None, description="""A qualifier for the statements, e.g. \"NOT\" for negation""")
│ │ -    subject_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the subject of the statement, e.g. \"high dose\" or \"intravenously administered\"""")
│ │ -    object_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the object of the statement, e.g. \"severe\" or \"with additional complications\"""")
│ │ -    
│ │ +    qualifier: Optional[str] = Field(
│ │ +        None, description="""A qualifier for the statements, e.g. \"NOT\" for negation"""
│ │ +    )
│ │ +    subject_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the subject of the statement, e.g. \"high dose\" or \"intravenously administered\"""",
│ │ +    )
│ │ +    object_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the object of the statement, e.g. \"severe\" or \"with additional complications\"""",
│ │ +    )
│ │  
│ │  
│ │  class TextWithTriples(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      publication: Optional[Publication] = Field(None)
│ │      triples: Optional[List[Triple]] = Field(default_factory=list)
│ │ -    
│ │  
│ │  
│ │  class RelationshipType(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Publication(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""The publication identifier""")
│ │      title: Optional[str] = Field(None, description="""The title of the publication""")
│ │      abstract: Optional[str] = Field(None, description="""The abstract of the publication""")
│ │      combined_text: Optional[str] = Field(None)
│ │      full_text: Optional[str] = Field(None, description="""The full text of the publication""")
│ │ -    
│ │  
│ │  
│ │  class AnnotatorResult(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      subject_text: Optional[str] = Field(None)
│ │      object_id: Optional[str] = Field(None)
│ │      object_text: Optional[str] = Field(None)
│ │ -    
│ │ -
│ │  
│ │  
│ │  # Update forward refs
│ │  # see https://pydantic-docs.helpmanual.io/usage/postponed_annotations/
│ │ -GeneMolecularActivityRelationship.update_forward_refs()
│ │ +Study.update_forward_refs()
│ │  ExtractionResult.update_forward_refs()
│ │  NamedEntity.update_forward_refs()
│ │ -BiologicalProcess.update_forward_refs()
│ │ -Gene.update_forward_refs()
│ │ -MolecularActivity.update_forward_refs()
│ │ -ChemicalEntity.update_forward_refs()
│ │ +Location.update_forward_refs()
│ │ +EnvironmentalMaterial.update_forward_refs()
│ │ +Environment.update_forward_refs()
│ │ +Variable.update_forward_refs()
│ │ +Unit.update_forward_refs()
│ │  CompoundExpression.update_forward_refs()
│ │ +Measurement.update_forward_refs()
│ │ +CausalRelationship.update_forward_refs()
│ │  Triple.update_forward_refs()
│ │  TextWithTriples.update_forward_refs()
│ │  RelationshipType.update_forward_refs()
│ │  Publication.update_forward_refs()
│ │  AnnotatorResult.update_forward_refs()
│ │ -
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/biological_process.yaml
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/biological_process.yaml
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/core.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/core.py
│ │┄ Files 10% similar despite different names
│ │ @@ -1,105 +1,116 @@
│ │  from __future__ import annotations
│ │ -from datetime import datetime, date
│ │ +
│ │ +from datetime import date, datetime
│ │  from enum import Enum
│ │ -from typing import List, Dict, Optional, Any
│ │ -from pydantic import BaseModel as BaseModel, Field
│ │ +from typing import Any, Dict, List, Optional
│ │ +
│ │ +from pydantic import BaseModel as BaseModel
│ │ +from pydantic import Field
│ │  
│ │  metamodel_version = "None"
│ │  version = "None"
│ │  
│ │ +
│ │  class WeakRefShimBaseModel(BaseModel):
│ │ -   __slots__ = '__weakref__'
│ │ -    
│ │ -class ConfiguredBaseModel(WeakRefShimBaseModel,
│ │ -                validate_assignment = True, 
│ │ -                validate_all = True, 
│ │ -                underscore_attrs_are_private = True, 
│ │ -                extra = 'forbid', 
│ │ -                arbitrary_types_allowed = True):
│ │ -    pass                    
│ │ +    __slots__ = "__weakref__"
│ │ +
│ │ +
│ │ +class ConfiguredBaseModel(
│ │ +    WeakRefShimBaseModel,
│ │ +    validate_assignment=True,
│ │ +    validate_all=True,
│ │ +    underscore_attrs_are_private=True,
│ │ +    extra="forbid",
│ │ +    arbitrary_types_allowed=True,
│ │ +):
│ │ +    pass
│ │  
│ │  
│ │  class ExtractionResult(ConfiguredBaseModel):
│ │      """
│ │      A result of extracting knowledge on text
│ │      """
│ │ +
│ │      input_id: Optional[str] = Field(None)
│ │      input_title: Optional[str] = Field(None)
│ │      input_text: Optional[str] = Field(None)
│ │      raw_completion_output: Optional[str] = Field(None)
│ │      prompt: Optional[str] = Field(None)
│ │ -    extracted_object: Optional[Any] = Field(None, description="""The complex objects extracted from the text""")
│ │ -    named_entities: Optional[List[Any]] = Field(default_factory=list, description="""Named entities extracted from the text""")
│ │ -    
│ │ +    extracted_object: Optional[Any] = Field(
│ │ +        None, description="""The complex objects extracted from the text"""
│ │ +    )
│ │ +    named_entities: Optional[List[Any]] = Field(
│ │ +        default_factory=list, description="""Named entities extracted from the text"""
│ │ +    )
│ │  
│ │  
│ │  class NamedEntity(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class CompoundExpression(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      None
│ │ -    
│ │  
│ │  
│ │  class Triple(CompoundExpression):
│ │      """
│ │      Abstract parent for Relation Extraction tasks
│ │      """
│ │ +
│ │      subject: Optional[str] = Field(None)
│ │      predicate: Optional[str] = Field(None)
│ │      object: Optional[str] = Field(None)
│ │ -    qualifier: Optional[str] = Field(None, description="""A qualifier for the statements, e.g. \"NOT\" for negation""")
│ │ -    subject_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the subject of the statement, e.g. \"high dose\" or \"intravenously administered\"""")
│ │ -    object_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the object of the statement, e.g. \"severe\" or \"with additional complications\"""")
│ │ -    
│ │ +    qualifier: Optional[str] = Field(
│ │ +        None, description="""A qualifier for the statements, e.g. \"NOT\" for negation"""
│ │ +    )
│ │ +    subject_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the subject of the statement, e.g. \"high dose\" or \"intravenously administered\"""",
│ │ +    )
│ │ +    object_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the object of the statement, e.g. \"severe\" or \"with additional complications\"""",
│ │ +    )
│ │  
│ │  
│ │  class TextWithTriples(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      publication: Optional[Publication] = Field(None)
│ │      triples: Optional[List[Triple]] = Field(default_factory=list)
│ │ -    
│ │  
│ │  
│ │  class RelationshipType(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Publication(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""The publication identifier""")
│ │      title: Optional[str] = Field(None, description="""The title of the publication""")
│ │      abstract: Optional[str] = Field(None, description="""The abstract of the publication""")
│ │      combined_text: Optional[str] = Field(None)
│ │      full_text: Optional[str] = Field(None, description="""The full text of the publication""")
│ │ -    
│ │  
│ │  
│ │  class AnnotatorResult(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      subject_text: Optional[str] = Field(None)
│ │      object_id: Optional[str] = Field(None)
│ │      object_text: Optional[str] = Field(None)
│ │ -    
│ │ -
│ │  
│ │  
│ │  # Update forward refs
│ │  # see https://pydantic-docs.helpmanual.io/usage/postponed_annotations/
│ │  ExtractionResult.update_forward_refs()
│ │  NamedEntity.update_forward_refs()
│ │  CompoundExpression.update_forward_refs()
│ │  Triple.update_forward_refs()
│ │  TextWithTriples.update_forward_refs()
│ │  RelationshipType.update_forward_refs()
│ │  Publication.update_forward_refs()
│ │  AnnotatorResult.update_forward_refs()
│ │ -
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/core.yaml
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/core.yaml
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/ctd.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/biological_process.py
│ │┄ Files 16% similar despite different names
│ │ @@ -1,167 +1,170 @@
│ │  from __future__ import annotations
│ │ -from datetime import datetime, date
│ │ -from enum import Enum
│ │ -from typing import List, Dict, Optional, Any
│ │ -from pydantic import BaseModel as BaseModel, Field
│ │ +
│ │ +from typing import Any, List, Optional
│ │ +
│ │ +from pydantic import BaseModel as BaseModel
│ │ +from pydantic import Field
│ │  
│ │  metamodel_version = "None"
│ │  version = "None"
│ │  
│ │ +
│ │  class WeakRefShimBaseModel(BaseModel):
│ │ -   __slots__ = '__weakref__'
│ │ -    
│ │ -class ConfiguredBaseModel(WeakRefShimBaseModel,
│ │ -                validate_assignment = True, 
│ │ -                validate_all = True, 
│ │ -                underscore_attrs_are_private = True, 
│ │ -                extra = 'forbid', 
│ │ -                arbitrary_types_allowed = True):
│ │ -    pass                    
│ │ -
│ │ -
│ │ -class MeshChemicalIdentifier(str, Enum):
│ │ -    
│ │ -    
│ │ -    dummy = "dummy"
│ │ -    
│ │ -
│ │ -class MeshDiseaseIdentifier(str, Enum):
│ │ -    
│ │ -    
│ │ -    dummy = "dummy"
│ │ -    
│ │ +    __slots__ = "__weakref__"
│ │ +
│ │ +
│ │ +class ConfiguredBaseModel(
│ │ +    WeakRefShimBaseModel,
│ │ +    validate_assignment=True,
│ │ +    validate_all=True,
│ │ +    underscore_attrs_are_private=True,
│ │ +    extra="forbid",
│ │ +    arbitrary_types_allowed=True,
│ │ +):
│ │ +    pass
│ │ +
│ │ +
│ │ +class GeneMolecularActivityRelationship(ConfiguredBaseModel):
│ │ +
│ │ +    gene: Optional[str] = Field(None)
│ │ +    molecular_activity: Optional[str] = Field(None)
│ │ +
│ │  
│ │  class ExtractionResult(ConfiguredBaseModel):
│ │ -    """
│ │ -    A result of extracting knowledge on text
│ │ -    """
│ │ +    """A result of extracting knowledge on text."""
│ │ +
│ │      input_id: Optional[str] = Field(None)
│ │      input_title: Optional[str] = Field(None)
│ │      input_text: Optional[str] = Field(None)
│ │      raw_completion_output: Optional[str] = Field(None)
│ │      prompt: Optional[str] = Field(None)
│ │ -    extracted_object: Optional[Any] = Field(None, description="""The complex objects extracted from the text""")
│ │ -    named_entities: Optional[List[Any]] = Field(default_factory=list, description="""Named entities extracted from the text""")
│ │ -    
│ │ +    extracted_object: Optional[Any] = Field(
│ │ +        None, description="""The complex objects extracted from the text"""
│ │ +    )
│ │ +    named_entities: Optional[List[Any]] = Field(
│ │ +        default_factory=list, description="""Named entities extracted from the text"""
│ │ +    )
│ │  
│ │  
│ │  class NamedEntity(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class Disease(NamedEntity):
│ │ -    
│ │ +class BiologicalProcess(NamedEntity):
│ │ +
│ │ +    label: Optional[str] = Field(None, description="""the name of the biological process""")
│ │ +    description: Optional[str] = Field(
│ │ +        None, description="""a textual description of the biological process"""
│ │ +    )
│ │ +    synonyms: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""alternative names of the biological process"""
│ │ +    )
│ │ +    subclass_of: Optional[str] = Field(
│ │ +        None, description="""the category to which this biological process belongs"""
│ │ +    )
│ │ +    inputs: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""the inputs of the biological process"""
│ │ +    )
│ │ +    outputs: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""the outputs of the biological process"""
│ │ +    )
│ │ +    steps: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""the steps involved in this biological process"""
│ │ +    )
│ │ +    genes: Optional[List[str]] = Field(default_factory=list)
│ │ +    gene_activities: Optional[List[GeneMolecularActivityRelationship]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""semicolon-separated list of gene to molecular activity relationships""",
│ │ +    )
│ │ +    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ +
│ │ +
│ │ +class Gene(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class Chemical(NamedEntity):
│ │ -    
│ │ +class MolecularActivity(NamedEntity):
│ │ +
│ │ +    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ +    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ +
│ │ +
│ │ +class ChemicalEntity(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class CompoundExpression(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      None
│ │ -    
│ │  
│ │  
│ │  class Triple(CompoundExpression):
│ │ -    """
│ │ -    Abstract parent for Relation Extraction tasks
│ │ -    """
│ │ +    """Abstract parent for Relation Extraction tasks."""
│ │ +
│ │      subject: Optional[str] = Field(None)
│ │      predicate: Optional[str] = Field(None)
│ │      object: Optional[str] = Field(None)
│ │ -    qualifier: Optional[str] = Field(None, description="""A qualifier for the statements, e.g. \"NOT\" for negation""")
│ │ -    subject_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the subject of the statement, e.g. \"high dose\" or \"intravenously administered\"""")
│ │ -    object_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the object of the statement, e.g. \"severe\" or \"with additional complications\"""")
│ │ -    
│ │ -
│ │ -
│ │ -class ChemicalToDiseaseRelationship(Triple):
│ │ -    """
│ │ -    A triple where the subject is a chemical and the object is a disease.
│ │ -    """
│ │ -    subject: Optional[str] = Field(None, description="""The chemical substance, drug, or small molecule.  or example: Lidocaine, Monosodium Glutamate, Imatinib.""")
│ │ -    predicate: Optional[str] = Field(None, description="""The relationship type, e.g. INDUCES, TREATS.""")
│ │ -    object: Optional[str] = Field(None, description="""The disease or condition that is being treated or induced by the chemical. For example, asthma, cancer, covid-19, cardiac asystole, Hypotension, Headache.""")
│ │ -    qualifier: Optional[str] = Field(None, description="""A qualifier for the statements, e.g. \"NOT\" for negation""")
│ │ -    subject_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the chemical, e.g. \"high dose\" or \"intravenously administered\"""")
│ │ -    object_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the disease, e.g. \"severe\" or \"with additional complications\"""")
│ │ -    
│ │ +    qualifier: Optional[str] = Field(
│ │ +        None, description="""A qualifier for the statements, e.g. \"NOT\" for negation"""
│ │ +    )
│ │ +    subject_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the subject of the statement,\
│ │ +            e.g. \"high dose\" or \"intravenously administered\"""",
│ │ +    )
│ │ +    object_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the object of the statement,\
│ │ +            e.g. \"severe\" or \"with additional complications\"""",
│ │ +    )
│ │  
│ │  
│ │  class TextWithTriples(ConfiguredBaseModel):
│ │ -    
│ │ -    publication: Optional[Publication] = Field(None)
│ │ -    triples: Optional[List[Triple]] = Field(default_factory=list)
│ │ -    
│ │ -
│ │  
│ │ -class ChemicalToDiseaseDocument(TextWithTriples):
│ │ -    """
│ │ -    A document that contains chemical to disease relations.
│ │ -    """
│ │      publication: Optional[Publication] = Field(None)
│ │ -    triples: Optional[List[ChemicalToDiseaseRelationship]] = Field(default_factory=list)
│ │ -    
│ │ +    triples: Optional[List[Triple]] = Field(default_factory=list)
│ │  
│ │  
│ │  class RelationshipType(NamedEntity):
│ │ -    
│ │ -    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ -    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │ -
│ │  
│ │ -class ChemicalToDiseasePredicate(RelationshipType):
│ │ -    """
│ │ -    A predicate for chemical to disease relationships
│ │ -    """
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Publication(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""The publication identifier""")
│ │      title: Optional[str] = Field(None, description="""The title of the publication""")
│ │      abstract: Optional[str] = Field(None, description="""The abstract of the publication""")
│ │      combined_text: Optional[str] = Field(None)
│ │      full_text: Optional[str] = Field(None, description="""The full text of the publication""")
│ │ -    
│ │  
│ │  
│ │  class AnnotatorResult(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      subject_text: Optional[str] = Field(None)
│ │      object_id: Optional[str] = Field(None)
│ │      object_text: Optional[str] = Field(None)
│ │ -    
│ │ -
│ │  
│ │  
│ │  # Update forward refs
│ │  # see https://pydantic-docs.helpmanual.io/usage/postponed_annotations/
│ │ +GeneMolecularActivityRelationship.update_forward_refs()
│ │  ExtractionResult.update_forward_refs()
│ │  NamedEntity.update_forward_refs()
│ │ -Disease.update_forward_refs()
│ │ -Chemical.update_forward_refs()
│ │ +BiologicalProcess.update_forward_refs()
│ │ +Gene.update_forward_refs()
│ │ +MolecularActivity.update_forward_refs()
│ │ +ChemicalEntity.update_forward_refs()
│ │  CompoundExpression.update_forward_refs()
│ │  Triple.update_forward_refs()
│ │ -ChemicalToDiseaseRelationship.update_forward_refs()
│ │  TextWithTriples.update_forward_refs()
│ │ -ChemicalToDiseaseDocument.update_forward_refs()
│ │  RelationshipType.update_forward_refs()
│ │ -ChemicalToDiseasePredicate.update_forward_refs()
│ │  Publication.update_forward_refs()
│ │  AnnotatorResult.update_forward_refs()
│ │ -
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/ctd.yaml
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/ctd.yaml
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/drug.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/mendelian_disease.py
│ │┄ Files 6% similar despite different names
│ │ @@ -1,157 +1,174 @@
│ │  from __future__ import annotations
│ │ -from datetime import datetime, date
│ │ +
│ │ +from datetime import date, datetime
│ │  from enum import Enum
│ │ -from typing import List, Dict, Optional, Any
│ │ -from pydantic import BaseModel as BaseModel, Field
│ │ +from typing import Any, Dict, List, Optional
│ │ +
│ │ +from pydantic import BaseModel as BaseModel
│ │ +from pydantic import Field
│ │  
│ │  metamodel_version = "None"
│ │  version = "None"
│ │  
│ │ +
│ │  class WeakRefShimBaseModel(BaseModel):
│ │ -   __slots__ = '__weakref__'
│ │ -    
│ │ -class ConfiguredBaseModel(WeakRefShimBaseModel,
│ │ -                validate_assignment = True, 
│ │ -                validate_all = True, 
│ │ -                underscore_attrs_are_private = True, 
│ │ -                extra = 'forbid', 
│ │ -                arbitrary_types_allowed = True):
│ │ -    pass                    
│ │ -
│ │ -
│ │ -class DrugMechanism(ConfiguredBaseModel):
│ │ -    
│ │ -    disease: Optional[str] = Field(None, description="""the name of the disease that is treated""")
│ │ -    drug: Optional[str] = Field(None, description="""the name of the drug that treats the disease""")
│ │ -    mechanism_links: Optional[List[MechanismLink]] = Field(default_factory=list, description="""semicolon-separated list of links, where each link is a triple connecting two entities via a relationship type""")
│ │ -    references: Optional[List[str]] = Field(default_factory=list)
│ │ -    source_text: Optional[str] = Field(None)
│ │ -    
│ │ +    __slots__ = "__weakref__"
│ │ +
│ │ +
│ │ +class ConfiguredBaseModel(
│ │ +    WeakRefShimBaseModel,
│ │ +    validate_assignment=True,
│ │ +    validate_all=True,
│ │ +    underscore_attrs_are_private=True,
│ │ +    extra="forbid",
│ │ +    arbitrary_types_allowed=True,
│ │ +):
│ │ +    pass
│ │  
│ │  
│ │  class ExtractionResult(ConfiguredBaseModel):
│ │      """
│ │      A result of extracting knowledge on text
│ │      """
│ │ +
│ │      input_id: Optional[str] = Field(None)
│ │      input_title: Optional[str] = Field(None)
│ │      input_text: Optional[str] = Field(None)
│ │      raw_completion_output: Optional[str] = Field(None)
│ │      prompt: Optional[str] = Field(None)
│ │ -    extracted_object: Optional[Any] = Field(None, description="""The complex objects extracted from the text""")
│ │ -    named_entities: Optional[List[Any]] = Field(default_factory=list, description="""Named entities extracted from the text""")
│ │ -    
│ │ +    extracted_object: Optional[Any] = Field(
│ │ +        None, description="""The complex objects extracted from the text"""
│ │ +    )
│ │ +    named_entities: Optional[List[Any]] = Field(
│ │ +        default_factory=list, description="""Named entities extracted from the text"""
│ │ +    )
│ │  
│ │  
│ │  class NamedEntity(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class MechanismElement(NamedEntity):
│ │ -    
│ │ +class MendelianDisease(NamedEntity):
│ │ +
│ │ +    name: Optional[str] = Field(None, description="""the name of the disease""")
│ │ +    description: Optional[str] = Field(None, description="""a description of the disease""")
│ │ +    synonyms: Optional[List[str]] = Field(default_factory=list)
│ │ +    subclass_of: Optional[List[str]] = Field(default_factory=list)
│ │ +    symptoms: Optional[List[str]] = Field(default_factory=list)
│ │ +    inheritance: Optional[str] = Field(None)
│ │ +    genes: Optional[List[str]] = Field(default_factory=list)
│ │ +    disease_onsets: Optional[List[str]] = Field(default_factory=list)
│ │ +    publications: Optional[List[Publication]] = Field(default_factory=list)
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class Disease(NamedEntity):
│ │ -    
│ │ +class DiseaseCategory(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class Drug(NamedEntity):
│ │ -    
│ │ +class Gene(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class Predicate(NamedEntity):
│ │ -    
│ │ +class Symptom(NamedEntity):
│ │ +
│ │ +    characteristic: Optional[str] = Field(None)
│ │ +    affects: Optional[str] = Field(None)
│ │ +    severity: Optional[str] = Field(None)
│ │ +    onset_of_symptom: Optional[str] = Field(None)
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class CompoundExpression(ConfiguredBaseModel):
│ │ -    
│ │ -    None
│ │ -    
│ │ +class Onset(NamedEntity):
│ │  
│ │ +    years_old: Optional[str] = Field(None)
│ │ +    decades: Optional[List[str]] = Field(default_factory=list)
│ │ +    juvenile_or_adult: Optional[str] = Field(None)
│ │ +    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ +    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │  
│ │ -class MechanismLink(CompoundExpression):
│ │ -    
│ │ -    subject: Optional[str] = Field(None)
│ │ -    predicate: Optional[str] = Field(None)
│ │ -    object: Optional[str] = Field(None)
│ │ -    
│ │ +
│ │ +class Inheritance(NamedEntity):
│ │ +
│ │ +    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ +    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ +
│ │ +
│ │ +class CompoundExpression(ConfiguredBaseModel):
│ │ +
│ │ +    None
│ │  
│ │  
│ │  class Triple(CompoundExpression):
│ │      """
│ │      Abstract parent for Relation Extraction tasks
│ │      """
│ │ +
│ │      subject: Optional[str] = Field(None)
│ │      predicate: Optional[str] = Field(None)
│ │      object: Optional[str] = Field(None)
│ │ -    qualifier: Optional[str] = Field(None, description="""A qualifier for the statements, e.g. \"NOT\" for negation""")
│ │ -    subject_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the subject of the statement, e.g. \"high dose\" or \"intravenously administered\"""")
│ │ -    object_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the object of the statement, e.g. \"severe\" or \"with additional complications\"""")
│ │ -    
│ │ +    qualifier: Optional[str] = Field(
│ │ +        None, description="""A qualifier for the statements, e.g. \"NOT\" for negation"""
│ │ +    )
│ │ +    subject_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the subject of the statement, e.g. \"high dose\" or \"intravenously administered\"""",
│ │ +    )
│ │ +    object_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the object of the statement, e.g. \"severe\" or \"with additional complications\"""",
│ │ +    )
│ │  
│ │  
│ │  class TextWithTriples(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      publication: Optional[Publication] = Field(None)
│ │      triples: Optional[List[Triple]] = Field(default_factory=list)
│ │ -    
│ │  
│ │  
│ │  class RelationshipType(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Publication(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""The publication identifier""")
│ │      title: Optional[str] = Field(None, description="""The title of the publication""")
│ │      abstract: Optional[str] = Field(None, description="""The abstract of the publication""")
│ │      combined_text: Optional[str] = Field(None)
│ │      full_text: Optional[str] = Field(None, description="""The full text of the publication""")
│ │ -    
│ │  
│ │  
│ │  class AnnotatorResult(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      subject_text: Optional[str] = Field(None)
│ │      object_id: Optional[str] = Field(None)
│ │      object_text: Optional[str] = Field(None)
│ │ -    
│ │ -
│ │  
│ │  
│ │  # Update forward refs
│ │  # see https://pydantic-docs.helpmanual.io/usage/postponed_annotations/
│ │ -DrugMechanism.update_forward_refs()
│ │  ExtractionResult.update_forward_refs()
│ │  NamedEntity.update_forward_refs()
│ │ -MechanismElement.update_forward_refs()
│ │ -Disease.update_forward_refs()
│ │ -Drug.update_forward_refs()
│ │ -Predicate.update_forward_refs()
│ │ +MendelianDisease.update_forward_refs()
│ │ +DiseaseCategory.update_forward_refs()
│ │ +Gene.update_forward_refs()
│ │ +Symptom.update_forward_refs()
│ │ +Onset.update_forward_refs()
│ │ +Inheritance.update_forward_refs()
│ │  CompoundExpression.update_forward_refs()
│ │ -MechanismLink.update_forward_refs()
│ │  Triple.update_forward_refs()
│ │  TextWithTriples.update_forward_refs()
│ │  RelationshipType.update_forward_refs()
│ │  Publication.update_forward_refs()
│ │  AnnotatorResult.update_forward_refs()
│ │ -
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/drug.yaml
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/drug.yaml
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/environmental_sample.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/metagenome_study.py
│ │┄ Files 16% similar despite different names
│ │ @@ -1,173 +1,207 @@
│ │  from __future__ import annotations
│ │ -from datetime import datetime, date
│ │ -from enum import Enum
│ │ -from typing import List, Dict, Optional, Any
│ │ -from pydantic import BaseModel as BaseModel, Field
│ │ +
│ │ +from typing import Any, List, Optional
│ │ +
│ │ +from pydantic import BaseModel as BaseModel
│ │ +from pydantic import Field
│ │  
│ │  metamodel_version = "None"
│ │  version = "None"
│ │  
│ │ +
│ │  class WeakRefShimBaseModel(BaseModel):
│ │ -   __slots__ = '__weakref__'
│ │ -    
│ │ -class ConfiguredBaseModel(WeakRefShimBaseModel,
│ │ -                validate_assignment = True, 
│ │ -                validate_all = True, 
│ │ -                underscore_attrs_are_private = True, 
│ │ -                extra = 'forbid', 
│ │ -                arbitrary_types_allowed = True):
│ │ -    pass                    
│ │ +    __slots__ = "__weakref__"
│ │ +
│ │ +
│ │ +class ConfiguredBaseModel(
│ │ +    WeakRefShimBaseModel,
│ │ +    validate_assignment=True,
│ │ +    validate_all=True,
│ │ +    underscore_attrs_are_private=True,
│ │ +    extra="forbid",
│ │ +    arbitrary_types_allowed=True,
│ │ +):
│ │ +    pass
│ │  
│ │  
│ │  class Study(ConfiguredBaseModel):
│ │ -    
│ │ -    location: Optional[List[str]] = Field(default_factory=list, description="""the sites at which the study was conducted""")
│ │ -    environmental_material: Optional[List[str]] = Field(default_factory=list, description="""the environmental material that was sampled""")
│ │ +
│ │      environments: Optional[List[str]] = Field(default_factory=list)
│ │      causal_relationships: Optional[List[CausalRelationship]] = Field(default_factory=list)
│ │      variables: Optional[List[str]] = Field(default_factory=list)
│ │ +    treatments: Optional[List[str]] = Field(default_factory=list)
│ │      measurements: Optional[List[Measurement]] = Field(default_factory=list)
│ │ -    
│ │ +    location: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""the sites at which the study was conducted"""
│ │ +    )
│ │ +    environmental_material: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""the environmental material that was sampled"""
│ │ +    )
│ │ +    sequencing_technologies: Optional[str] = Field(None)
│ │ +    organisms: Optional[List[str]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""semicolon-separated list of all studied organism taxons""",
│ │ +    )
│ │  
│ │  
│ │  class ExtractionResult(ConfiguredBaseModel):
│ │      """
│ │      A result of extracting knowledge on text
│ │      """
│ │ +
│ │      input_id: Optional[str] = Field(None)
│ │      input_title: Optional[str] = Field(None)
│ │      input_text: Optional[str] = Field(None)
│ │      raw_completion_output: Optional[str] = Field(None)
│ │      prompt: Optional[str] = Field(None)
│ │ -    extracted_object: Optional[Any] = Field(None, description="""The complex objects extracted from the text""")
│ │ -    named_entities: Optional[List[Any]] = Field(default_factory=list, description="""Named entities extracted from the text""")
│ │ -    
│ │ +    extracted_object: Optional[Any] = Field(
│ │ +        None, description="""The complex objects extracted from the text"""
│ │ +    )
│ │ +    named_entities: Optional[List[Any]] = Field(
│ │ +        default_factory=list, description="""Named entities extracted from the text"""
│ │ +    )
│ │  
│ │  
│ │  class NamedEntity(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Location(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class EnvironmentalMaterial(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Environment(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Variable(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Unit(NamedEntity):
│ │ -    
│ │ +
│ │ +    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ +    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ +
│ │ +
│ │ +class SequencingTechnology(NamedEntity):
│ │ +
│ │ +    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ +    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ +
│ │ +
│ │ +class Treatment(NamedEntity):
│ │ +
│ │ +    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ +    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ +
│ │ +
│ │ +class Organism(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class CompoundExpression(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      None
│ │ -    
│ │  
│ │  
│ │  class Measurement(CompoundExpression):
│ │ -    
│ │ +
│ │      value: Optional[str] = Field(None, description="""the value of the measurement""")
│ │      unit: Optional[str] = Field(None, description="""the unit of the measurement""")
│ │ -    
│ │  
│ │  
│ │  class CausalRelationship(CompoundExpression):
│ │ -    
│ │ -    cause: Optional[str] = Field(None, description="""the variable that is the cause of the effect""")
│ │ +
│ │ +    cause: Optional[str] = Field(
│ │ +        None, description="""the variable that is the cause of the effect"""
│ │ +    )
│ │      effect: Optional[str] = Field(None, description="""the things that is affected""")
│ │ -    
│ │  
│ │  
│ │  class Triple(CompoundExpression):
│ │ -    """
│ │ -    Abstract parent for Relation Extraction tasks
│ │ -    """
│ │ +    """Abstract parent for Relation Extraction tasks."""
│ │ +
│ │      subject: Optional[str] = Field(None)
│ │      predicate: Optional[str] = Field(None)
│ │      object: Optional[str] = Field(None)
│ │ -    qualifier: Optional[str] = Field(None, description="""A qualifier for the statements, e.g. \"NOT\" for negation""")
│ │ -    subject_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the subject of the statement, e.g. \"high dose\" or \"intravenously administered\"""")
│ │ -    object_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the object of the statement, e.g. \"severe\" or \"with additional complications\"""")
│ │ -    
│ │ +    qualifier: Optional[str] = Field(
│ │ +        None, description="""A qualifier for the statements, e.g. \"NOT\" for negation"""
│ │ +    )
│ │ +    subject_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the subject of the statement,\
│ │ +            e.g. \"high dose\" or \"intravenously administered\"""",
│ │ +    )
│ │ +    object_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the object of the statement,\
│ │ +            e.g. \"severe\" or \"with additional complications\"""",
│ │ +    )
│ │  
│ │  
│ │  class TextWithTriples(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      publication: Optional[Publication] = Field(None)
│ │      triples: Optional[List[Triple]] = Field(default_factory=list)
│ │ -    
│ │  
│ │  
│ │  class RelationshipType(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Publication(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""The publication identifier""")
│ │      title: Optional[str] = Field(None, description="""The title of the publication""")
│ │      abstract: Optional[str] = Field(None, description="""The abstract of the publication""")
│ │      combined_text: Optional[str] = Field(None)
│ │      full_text: Optional[str] = Field(None, description="""The full text of the publication""")
│ │ -    
│ │  
│ │  
│ │  class AnnotatorResult(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      subject_text: Optional[str] = Field(None)
│ │      object_id: Optional[str] = Field(None)
│ │      object_text: Optional[str] = Field(None)
│ │ -    
│ │ -
│ │  
│ │  
│ │  # Update forward refs
│ │  # see https://pydantic-docs.helpmanual.io/usage/postponed_annotations/
│ │  Study.update_forward_refs()
│ │  ExtractionResult.update_forward_refs()
│ │  NamedEntity.update_forward_refs()
│ │  Location.update_forward_refs()
│ │  EnvironmentalMaterial.update_forward_refs()
│ │  Environment.update_forward_refs()
│ │  Variable.update_forward_refs()
│ │  Unit.update_forward_refs()
│ │ +SequencingTechnology.update_forward_refs()
│ │ +Treatment.update_forward_refs()
│ │ +Organism.update_forward_refs()
│ │  CompoundExpression.update_forward_refs()
│ │  Measurement.update_forward_refs()
│ │  CausalRelationship.update_forward_refs()
│ │  Triple.update_forward_refs()
│ │  TextWithTriples.update_forward_refs()
│ │  RelationshipType.update_forward_refs()
│ │  Publication.update_forward_refs()
│ │  AnnotatorResult.update_forward_refs()
│ │ -
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/environmental_sample.yaml
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/environmental_sample.yaml
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/gocam.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/gocam.py
│ │┄ Files 5% similar despite different names
│ │ @@ -1,216 +1,229 @@
│ │  from __future__ import annotations
│ │ -from datetime import datetime, date
│ │ +
│ │  from enum import Enum
│ │ -from typing import List, Dict, Optional, Any
│ │ -from pydantic import BaseModel as BaseModel, Field
│ │ +from typing import Any, List, Optional
│ │ +
│ │ +from pydantic import BaseModel as BaseModel
│ │ +from pydantic import Field
│ │  
│ │  metamodel_version = "None"
│ │  version = "None"
│ │  
│ │ +
│ │  class WeakRefShimBaseModel(BaseModel):
│ │ -   __slots__ = '__weakref__'
│ │ -    
│ │ -class ConfiguredBaseModel(WeakRefShimBaseModel,
│ │ -                validate_assignment = True, 
│ │ -                validate_all = True, 
│ │ -                underscore_attrs_are_private = True, 
│ │ -                extra = 'forbid', 
│ │ -                arbitrary_types_allowed = True):
│ │ -    pass                    
│ │ +    __slots__ = "__weakref__"
│ │ +
│ │ +
│ │ +class ConfiguredBaseModel(
│ │ +    WeakRefShimBaseModel,
│ │ +    validate_assignment=True,
│ │ +    validate_all=True,
│ │ +    underscore_attrs_are_private=True,
│ │ +    extra="forbid",
│ │ +    arbitrary_types_allowed=True,
│ │ +):
│ │ +    pass
│ │  
│ │  
│ │  class GeneLocationEnum(str, Enum):
│ │ -    
│ │ -    
│ │ +
│ │      dummy = "dummy"
│ │ -    
│ │ +
│ │  
│ │  class GOCellComponentType(str, Enum):
│ │ -    
│ │ -    
│ │ +
│ │      dummy = "dummy"
│ │ -    
│ │ +
│ │  
│ │  class CellType(str, Enum):
│ │ -    
│ │ -    
│ │ +
│ │      dummy = "dummy"
│ │ -    
│ │ +
│ │  
│ │  class GoCamAnnotations(ConfiguredBaseModel):
│ │ -    
│ │ -    genes: Optional[List[str]] = Field(default_factory=list, description="""semicolon-separated list of genes""")
│ │ -    organisms: Optional[List[str]] = Field(default_factory=list, description="""semicolon-separated list of organism taxons""")
│ │ +
│ │ +    genes: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""semicolon-separated list of genes"""
│ │ +    )
│ │ +    organisms: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""semicolon-separated list of organism taxons"""
│ │ +    )
│ │      gene_organisms: Optional[List[GeneOrganismRelationship]] = Field(default_factory=list)
│ │ -    activities: Optional[List[str]] = Field(default_factory=list, description="""semicolon-separated list of molecular activities""")
│ │ -    gene_functions: Optional[List[GeneMolecularActivityRelationship]] = Field(default_factory=list, description="""semicolon-separated list of gene to molecular activity relationships""")
│ │ -    cellular_processes: Optional[List[str]] = Field(default_factory=list, description="""semicolon-separated list of cellular processes""")
│ │ -    pathways: Optional[List[str]] = Field(default_factory=list, description="""semicolon-separated list of pathways""")
│ │ -    gene_gene_interactions: Optional[List[GeneGeneInteraction]] = Field(default_factory=list, description="""semicolon-separated list of gene to gene interactions""")
│ │ -    gene_localizations: Optional[List[GeneSubcellularLocalizationRelationship]] = Field(default_factory=list, description="""semicolon-separated list of genes plus their location in the cell; for example, \"gene1 / cytoplasm; gene2 / mitochondrion\"""")
│ │ -    
│ │ +    activities: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""semicolon-separated list of molecular activities"""
│ │ +    )
│ │ +    gene_functions: Optional[List[GeneMolecularActivityRelationship]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""semicolon-separated list of gene to molecular activity relationships""",
│ │ +    )
│ │ +    cellular_processes: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""semicolon-separated list of cellular processes"""
│ │ +    )
│ │ +    pathways: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""semicolon-separated list of pathways"""
│ │ +    )
│ │ +    gene_gene_interactions: Optional[List[GeneGeneInteraction]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""semicolon-separated list of gene to gene interactions""",
│ │ +    )
│ │ +    gene_localizations: Optional[List[GeneSubcellularLocalizationRelationship]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""semicolon-separated list of genes plus their location in the cell;\
│ │ +            for example, \"gene1 / cytoplasm; gene2 / mitochondrion\"""",
│ │ +    )
│ │  
│ │  
│ │  class ExtractionResult(ConfiguredBaseModel):
│ │ -    """
│ │ -    A result of extracting knowledge on text
│ │ -    """
│ │ +    """A result of extracting knowledge on text."""
│ │ +
│ │      input_id: Optional[str] = Field(None)
│ │      input_title: Optional[str] = Field(None)
│ │      input_text: Optional[str] = Field(None)
│ │      raw_completion_output: Optional[str] = Field(None)
│ │      prompt: Optional[str] = Field(None)
│ │ -    extracted_object: Optional[Any] = Field(None, description="""The complex objects extracted from the text""")
│ │ -    named_entities: Optional[List[Any]] = Field(default_factory=list, description="""Named entities extracted from the text""")
│ │ -    
│ │ +    extracted_object: Optional[Any] = Field(
│ │ +        None, description="""The complex objects extracted from the text"""
│ │ +    )
│ │ +    named_entities: Optional[List[Any]] = Field(
│ │ +        default_factory=list, description="""Named entities extracted from the text"""
│ │ +    )
│ │  
│ │  
│ │  class NamedEntity(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Gene(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Pathway(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class CellularProcess(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class MolecularActivity(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class GeneLocation(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Organism(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Molecule(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class CompoundExpression(ConfiguredBaseModel):
│ │ -    
│ │ -    None
│ │ -    
│ │ +
│ │ +    pass
│ │  
│ │  
│ │  class GeneOrganismRelationship(CompoundExpression):
│ │ -    
│ │ +
│ │      gene: Optional[str] = Field(None)
│ │      organism: Optional[str] = Field(None)
│ │ -    
│ │  
│ │  
│ │  class GeneMolecularActivityRelationship(CompoundExpression):
│ │ -    
│ │ +
│ │      gene: Optional[str] = Field(None)
│ │      molecular_activity: Optional[str] = Field(None)
│ │ -    
│ │  
│ │  
│ │  class GeneMolecularActivityRelationship2(CompoundExpression):
│ │ -    
│ │ +
│ │      gene: Optional[str] = Field(None)
│ │      molecular_activity: Optional[str] = Field(None)
│ │      target: Optional[str] = Field(None)
│ │ -    
│ │  
│ │  
│ │  class GeneSubcellularLocalizationRelationship(CompoundExpression):
│ │ -    
│ │ +
│ │      gene: Optional[str] = Field(None)
│ │      location: Optional[str] = Field(None)
│ │ -    
│ │  
│ │  
│ │  class GeneGeneInteraction(CompoundExpression):
│ │ -    
│ │ +
│ │      gene1: Optional[str] = Field(None)
│ │      gene2: Optional[str] = Field(None)
│ │ -    
│ │  
│ │  
│ │  class Triple(CompoundExpression):
│ │ -    """
│ │ -    Abstract parent for Relation Extraction tasks
│ │ -    """
│ │ +    """Abstract parent for Relation Extraction tasks."""
│ │ +
│ │      subject: Optional[str] = Field(None)
│ │      predicate: Optional[str] = Field(None)
│ │      object: Optional[str] = Field(None)
│ │ -    qualifier: Optional[str] = Field(None, description="""A qualifier for the statements, e.g. \"NOT\" for negation""")
│ │ -    subject_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the subject of the statement, e.g. \"high dose\" or \"intravenously administered\"""")
│ │ -    object_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the object of the statement, e.g. \"severe\" or \"with additional complications\"""")
│ │ -    
│ │ +    qualifier: Optional[str] = Field(
│ │ +        None, description="""A qualifier for the statements, e.g. \"NOT\" for negation"""
│ │ +    )
│ │ +    subject_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the subject of the statement,\
│ │ +            e.g. \"high dose\" or \"intravenously administered\"""",
│ │ +    )
│ │ +    object_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the object of the statement,\
│ │ +            e.g. \"severe\" or \"with additional complications\"""",
│ │ +    )
│ │  
│ │  
│ │  class TextWithTriples(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      publication: Optional[Publication] = Field(None)
│ │      triples: Optional[List[Triple]] = Field(default_factory=list)
│ │ -    
│ │  
│ │  
│ │  class RelationshipType(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Publication(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""The publication identifier""")
│ │      title: Optional[str] = Field(None, description="""The title of the publication""")
│ │      abstract: Optional[str] = Field(None, description="""The abstract of the publication""")
│ │      combined_text: Optional[str] = Field(None)
│ │      full_text: Optional[str] = Field(None, description="""The full text of the publication""")
│ │ -    
│ │  
│ │  
│ │  class AnnotatorResult(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      subject_text: Optional[str] = Field(None)
│ │      object_id: Optional[str] = Field(None)
│ │      object_text: Optional[str] = Field(None)
│ │ -    
│ │ -
│ │  
│ │  
│ │  # Update forward refs
│ │  # see https://pydantic-docs.helpmanual.io/usage/postponed_annotations/
│ │  GoCamAnnotations.update_forward_refs()
│ │  ExtractionResult.update_forward_refs()
│ │  NamedEntity.update_forward_refs()
│ │ @@ -228,8 +241,7 @@
│ │  GeneSubcellularLocalizationRelationship.update_forward_refs()
│ │  GeneGeneInteraction.update_forward_refs()
│ │  Triple.update_forward_refs()
│ │  TextWithTriples.update_forward_refs()
│ │  RelationshipType.update_forward_refs()
│ │  Publication.update_forward_refs()
│ │  AnnotatorResult.update_forward_refs()
│ │ -
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/gocam.yaml
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/gocam.yaml
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/halo.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/halo.py
│ │┄ Files 16% similar despite different names
│ │ @@ -1,135 +1,188 @@
│ │  from __future__ import annotations
│ │ -from datetime import datetime, date
│ │ +
│ │ +from datetime import date, datetime
│ │  from enum import Enum
│ │ -from typing import List, Dict, Optional, Any
│ │ -from pydantic import BaseModel as BaseModel, Field
│ │ +from typing import Any, Dict, List, Optional
│ │ +
│ │ +from pydantic import BaseModel as BaseModel
│ │ +from pydantic import Field
│ │  
│ │  metamodel_version = "None"
│ │  version = "None"
│ │  
│ │ +
│ │  class WeakRefShimBaseModel(BaseModel):
│ │ -   __slots__ = '__weakref__'
│ │ -    
│ │ -class ConfiguredBaseModel(WeakRefShimBaseModel,
│ │ -                validate_assignment = True, 
│ │ -                validate_all = True, 
│ │ -                underscore_attrs_are_private = True, 
│ │ -                extra = 'forbid', 
│ │ -                arbitrary_types_allowed = True):
│ │ -    pass                    
│ │ +    __slots__ = "__weakref__"
│ │ +
│ │ +
│ │ +class ConfiguredBaseModel(
│ │ +    WeakRefShimBaseModel,
│ │ +    validate_assignment=True,
│ │ +    validate_all=True,
│ │ +    underscore_attrs_are_private=True,
│ │ +    extra="forbid",
│ │ +    arbitrary_types_allowed=True,
│ │ +):
│ │ +    pass
│ │  
│ │  
│ │  class Ontology(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      elements: Optional[List[OntologyElement]] = Field(default_factory=list)
│ │ -    
│ │  
│ │  
│ │  class OntologyElement(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      name: Optional[str] = Field(None, description="""the name of the entity""")
│ │ -    context: Optional[str] = Field(None, description="""the ontology to which this belongs (single-valued)""")
│ │ -    description: Optional[str] = Field(None, description="""a textual description of the entity (single-valued)""")
│ │ -    synonyms: Optional[List[str]] = Field(default_factory=list, description="""a list of alternative names of the entity""")
│ │ -    categories: Optional[List[str]] = Field(default_factory=list, description="""a list of the categories to which this entity belongs""")
│ │ -    subclass_of: Optional[List[str]] = Field(default_factory=list, description="""a list of parent class (superclasses) of this entity""")
│ │ -    part_of: Optional[List[str]] = Field(default_factory=list, description="""a list of things this element is part of""")
│ │ -    subtypes: Optional[List[str]] = Field(default_factory=list, description="""a list of child classes (subclasses) of this entity""")
│ │ -    parts: Optional[List[str]] = Field(default_factory=list, description="""a list of names of things this element has as parts (components)""")
│ │ -    equivalent_to: Optional[str] = Field(None, description="""an OWL class expression with the necessary and sufficient conditions for this entity to be an instance of this class""")
│ │ -    
│ │ +    context: Optional[str] = Field(
│ │ +        None, description="""the ontology to which this belongs (single-valued)"""
│ │ +    )
│ │ +    description: Optional[str] = Field(
│ │ +        None, description="""a textual description of the entity (single-valued)"""
│ │ +    )
│ │ +    synonyms: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""a list of alternative names of the entity"""
│ │ +    )
│ │ +    categories: Optional[List[str]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""a list of the categories to which this entity belongs""",
│ │ +    )
│ │ +    subclass_of: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""a list of parent class (superclasses) of this entity"""
│ │ +    )
│ │ +    part_of: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""a list of things this element is part of"""
│ │ +    )
│ │ +    subtypes: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""a list of child classes (subclasses) of this entity"""
│ │ +    )
│ │ +    parts: Optional[List[str]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""a list of names of things this element has as parts (components)""",
│ │ +    )
│ │ +    equivalent_to: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""an OWL class expression with the necessary and sufficient conditions for this entity to be an instance of this class""",
│ │ +    )
│ │  
│ │  
│ │  class Category(OntologyElement):
│ │ -    
│ │ +
│ │      name: Optional[str] = Field(None, description="""the name of the entity""")
│ │ -    context: Optional[str] = Field(None, description="""the ontology to which this belongs (single-valued)""")
│ │ -    description: Optional[str] = Field(None, description="""a textual description of the entity (single-valued)""")
│ │ -    synonyms: Optional[List[str]] = Field(default_factory=list, description="""a list of alternative names of the entity""")
│ │ -    categories: Optional[List[str]] = Field(default_factory=list, description="""a list of the categories to which this entity belongs""")
│ │ -    subclass_of: Optional[List[str]] = Field(default_factory=list, description="""a list of parent class (superclasses) of this entity""")
│ │ -    part_of: Optional[List[str]] = Field(default_factory=list, description="""a list of things this element is part of""")
│ │ -    subtypes: Optional[List[str]] = Field(default_factory=list, description="""a list of child classes (subclasses) of this entity""")
│ │ -    parts: Optional[List[str]] = Field(default_factory=list, description="""a list of names of things this element has as parts (components)""")
│ │ -    equivalent_to: Optional[str] = Field(None, description="""an OWL class expression with the necessary and sufficient conditions for this entity to be an instance of this class""")
│ │ -    
│ │ +    context: Optional[str] = Field(
│ │ +        None, description="""the ontology to which this belongs (single-valued)"""
│ │ +    )
│ │ +    description: Optional[str] = Field(
│ │ +        None, description="""a textual description of the entity (single-valued)"""
│ │ +    )
│ │ +    synonyms: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""a list of alternative names of the entity"""
│ │ +    )
│ │ +    categories: Optional[List[str]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""a list of the categories to which this entity belongs""",
│ │ +    )
│ │ +    subclass_of: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""a list of parent class (superclasses) of this entity"""
│ │ +    )
│ │ +    part_of: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""a list of things this element is part of"""
│ │ +    )
│ │ +    subtypes: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""a list of child classes (subclasses) of this entity"""
│ │ +    )
│ │ +    parts: Optional[List[str]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""a list of names of things this element has as parts (components)""",
│ │ +    )
│ │ +    equivalent_to: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""an OWL class expression with the necessary and sufficient conditions for this entity to be an instance of this class""",
│ │ +    )
│ │  
│ │  
│ │  class ExtractionResult(ConfiguredBaseModel):
│ │      """
│ │      A result of extracting knowledge on text
│ │      """
│ │ +
│ │      input_id: Optional[str] = Field(None)
│ │      input_title: Optional[str] = Field(None)
│ │      input_text: Optional[str] = Field(None)
│ │      raw_completion_output: Optional[str] = Field(None)
│ │      prompt: Optional[str] = Field(None)
│ │ -    extracted_object: Optional[Any] = Field(None, description="""The complex objects extracted from the text""")
│ │ -    named_entities: Optional[List[Any]] = Field(default_factory=list, description="""Named entities extracted from the text""")
│ │ -    
│ │ +    extracted_object: Optional[Any] = Field(
│ │ +        None, description="""The complex objects extracted from the text"""
│ │ +    )
│ │ +    named_entities: Optional[List[Any]] = Field(
│ │ +        default_factory=list, description="""Named entities extracted from the text"""
│ │ +    )
│ │  
│ │  
│ │  class NamedEntity(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class CompoundExpression(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      None
│ │ -    
│ │  
│ │  
│ │  class Triple(CompoundExpression):
│ │      """
│ │      Abstract parent for Relation Extraction tasks
│ │      """
│ │ +
│ │      subject: Optional[str] = Field(None)
│ │      predicate: Optional[str] = Field(None)
│ │      object: Optional[str] = Field(None)
│ │ -    qualifier: Optional[str] = Field(None, description="""A qualifier for the statements, e.g. \"NOT\" for negation""")
│ │ -    subject_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the subject of the statement, e.g. \"high dose\" or \"intravenously administered\"""")
│ │ -    object_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the object of the statement, e.g. \"severe\" or \"with additional complications\"""")
│ │ -    
│ │ +    qualifier: Optional[str] = Field(
│ │ +        None, description="""A qualifier for the statements, e.g. \"NOT\" for negation"""
│ │ +    )
│ │ +    subject_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the subject of the statement,\
│ │ +            e.g. \"high dose\" or \"intravenously administered\"""",
│ │ +    )
│ │ +    object_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the object of the statement,\
│ │ +            e.g. \"severe\" or \"with additional complications\"""",
│ │ +    )
│ │  
│ │  
│ │  class TextWithTriples(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      publication: Optional[Publication] = Field(None)
│ │      triples: Optional[List[Triple]] = Field(default_factory=list)
│ │ -    
│ │  
│ │  
│ │  class RelationshipType(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Publication(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""The publication identifier""")
│ │      title: Optional[str] = Field(None, description="""The title of the publication""")
│ │      abstract: Optional[str] = Field(None, description="""The abstract of the publication""")
│ │      combined_text: Optional[str] = Field(None)
│ │      full_text: Optional[str] = Field(None, description="""The full text of the publication""")
│ │ -    
│ │  
│ │  
│ │  class AnnotatorResult(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      subject_text: Optional[str] = Field(None)
│ │      object_id: Optional[str] = Field(None)
│ │      object_text: Optional[str] = Field(None)
│ │ -    
│ │ -
│ │  
│ │  
│ │  # Update forward refs
│ │  # see https://pydantic-docs.helpmanual.io/usage/postponed_annotations/
│ │  Ontology.update_forward_refs()
│ │  OntologyElement.update_forward_refs()
│ │  Category.update_forward_refs()
│ │ @@ -137,8 +190,7 @@
│ │  NamedEntity.update_forward_refs()
│ │  CompoundExpression.update_forward_refs()
│ │  Triple.update_forward_refs()
│ │  TextWithTriples.update_forward_refs()
│ │  RelationshipType.update_forward_refs()
│ │  Publication.update_forward_refs()
│ │  AnnotatorResult.update_forward_refs()
│ │ -
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/halo.yaml
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/halo.yaml
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/mendelian_disease.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/drug.py
│ │┄ Files 18% similar despite different names
│ │ @@ -1,169 +1,167 @@
│ │  from __future__ import annotations
│ │ -from datetime import datetime, date
│ │ +
│ │ +from datetime import date, datetime
│ │  from enum import Enum
│ │ -from typing import List, Dict, Optional, Any
│ │ -from pydantic import BaseModel as BaseModel, Field
│ │ +from typing import Any, Dict, List, Optional
│ │ +
│ │ +from pydantic import BaseModel as BaseModel
│ │ +from pydantic import Field
│ │  
│ │  metamodel_version = "None"
│ │  version = "None"
│ │  
│ │ +
│ │  class WeakRefShimBaseModel(BaseModel):
│ │ -   __slots__ = '__weakref__'
│ │ -    
│ │ -class ConfiguredBaseModel(WeakRefShimBaseModel,
│ │ -                validate_assignment = True, 
│ │ -                validate_all = True, 
│ │ -                underscore_attrs_are_private = True, 
│ │ -                extra = 'forbid', 
│ │ -                arbitrary_types_allowed = True):
│ │ -    pass                    
│ │ +    __slots__ = "__weakref__"
│ │ +
│ │ +
│ │ +class ConfiguredBaseModel(
│ │ +    WeakRefShimBaseModel,
│ │ +    validate_assignment=True,
│ │ +    validate_all=True,
│ │ +    underscore_attrs_are_private=True,
│ │ +    extra="forbid",
│ │ +    arbitrary_types_allowed=True,
│ │ +):
│ │ +    pass
│ │ +
│ │ +
│ │ +class DrugMechanism(ConfiguredBaseModel):
│ │ +
│ │ +    disease: Optional[str] = Field(None, description="""the name of the disease that is treated""")
│ │ +    drug: Optional[str] = Field(
│ │ +        None, description="""the name of the drug that treats the disease"""
│ │ +    )
│ │ +    mechanism_links: Optional[List[MechanismLink]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""semicolon-separated list of links, where each link is a triple connecting two entities via a relationship type""",
│ │ +    )
│ │ +    references: Optional[List[str]] = Field(default_factory=list)
│ │ +    source_text: Optional[str] = Field(None)
│ │  
│ │  
│ │  class ExtractionResult(ConfiguredBaseModel):
│ │      """
│ │      A result of extracting knowledge on text
│ │      """
│ │ +
│ │      input_id: Optional[str] = Field(None)
│ │      input_title: Optional[str] = Field(None)
│ │      input_text: Optional[str] = Field(None)
│ │      raw_completion_output: Optional[str] = Field(None)
│ │      prompt: Optional[str] = Field(None)
│ │ -    extracted_object: Optional[Any] = Field(None, description="""The complex objects extracted from the text""")
│ │ -    named_entities: Optional[List[Any]] = Field(default_factory=list, description="""Named entities extracted from the text""")
│ │ -    
│ │ +    extracted_object: Optional[Any] = Field(
│ │ +        None, description="""The complex objects extracted from the text"""
│ │ +    )
│ │ +    named_entities: Optional[List[Any]] = Field(
│ │ +        default_factory=list, description="""Named entities extracted from the text"""
│ │ +    )
│ │  
│ │  
│ │  class NamedEntity(ConfiguredBaseModel):
│ │ -    
│ │ -    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ -    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │ -
│ │ -class MendelianDisease(NamedEntity):
│ │ -    
│ │ -    name: Optional[str] = Field(None, description="""the name of the disease""")
│ │ -    description: Optional[str] = Field(None, description="""a description of the disease""")
│ │ -    synonyms: Optional[List[str]] = Field(default_factory=list)
│ │ -    subclass_of: Optional[List[str]] = Field(default_factory=list)
│ │ -    symptoms: Optional[List[str]] = Field(default_factory=list)
│ │ -    inheritance: Optional[str] = Field(None)
│ │ -    genes: Optional[List[str]] = Field(default_factory=list)
│ │ -    disease_onsets: Optional[List[str]] = Field(default_factory=list)
│ │ -    publications: Optional[List[Publication]] = Field(default_factory=list)
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │ -
│ │  
│ │ -class DiseaseCategory(NamedEntity):
│ │ -    
│ │ -    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ -    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │ +class MechanismElement(NamedEntity):
│ │  
│ │ -class Gene(NamedEntity):
│ │ -    
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class Symptom(NamedEntity):
│ │ -    
│ │ -    characteristic: Optional[str] = Field(None)
│ │ -    affects: Optional[str] = Field(None)
│ │ -    severity: Optional[str] = Field(None)
│ │ -    onset_of_symptom: Optional[str] = Field(None)
│ │ +class Disease(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class Onset(NamedEntity):
│ │ -    
│ │ -    years_old: Optional[str] = Field(None)
│ │ -    decades: Optional[List[str]] = Field(default_factory=list)
│ │ -    juvenile_or_adult: Optional[str] = Field(None)
│ │ +class Drug(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class Inheritance(NamedEntity):
│ │ -    
│ │ +class Predicate(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class CompoundExpression(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      None
│ │ -    
│ │ +
│ │ +
│ │ +class MechanismLink(CompoundExpression):
│ │ +
│ │ +    subject: Optional[str] = Field(None)
│ │ +    predicate: Optional[str] = Field(None)
│ │ +    object: Optional[str] = Field(None)
│ │  
│ │  
│ │  class Triple(CompoundExpression):
│ │      """
│ │      Abstract parent for Relation Extraction tasks
│ │      """
│ │ +
│ │      subject: Optional[str] = Field(None)
│ │      predicate: Optional[str] = Field(None)
│ │      object: Optional[str] = Field(None)
│ │ -    qualifier: Optional[str] = Field(None, description="""A qualifier for the statements, e.g. \"NOT\" for negation""")
│ │ -    subject_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the subject of the statement, e.g. \"high dose\" or \"intravenously administered\"""")
│ │ -    object_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the object of the statement, e.g. \"severe\" or \"with additional complications\"""")
│ │ -    
│ │ +    qualifier: Optional[str] = Field(
│ │ +        None, description="""A qualifier for the statements, e.g. \"NOT\" for negation"""
│ │ +    )
│ │ +    subject_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the subject of the statement, e.g. \"high dose\" or \"intravenously administered\"""",
│ │ +    )
│ │ +    object_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the object of the statement, e.g. \"severe\" or \"with additional complications\"""",
│ │ +    )
│ │  
│ │  
│ │  class TextWithTriples(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      publication: Optional[Publication] = Field(None)
│ │      triples: Optional[List[Triple]] = Field(default_factory=list)
│ │ -    
│ │  
│ │  
│ │  class RelationshipType(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Publication(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""The publication identifier""")
│ │      title: Optional[str] = Field(None, description="""The title of the publication""")
│ │      abstract: Optional[str] = Field(None, description="""The abstract of the publication""")
│ │      combined_text: Optional[str] = Field(None)
│ │      full_text: Optional[str] = Field(None, description="""The full text of the publication""")
│ │ -    
│ │  
│ │  
│ │  class AnnotatorResult(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      subject_text: Optional[str] = Field(None)
│ │      object_id: Optional[str] = Field(None)
│ │      object_text: Optional[str] = Field(None)
│ │ -    
│ │ -
│ │  
│ │  
│ │  # Update forward refs
│ │  # see https://pydantic-docs.helpmanual.io/usage/postponed_annotations/
│ │ +DrugMechanism.update_forward_refs()
│ │  ExtractionResult.update_forward_refs()
│ │  NamedEntity.update_forward_refs()
│ │ -MendelianDisease.update_forward_refs()
│ │ -DiseaseCategory.update_forward_refs()
│ │ -Gene.update_forward_refs()
│ │ -Symptom.update_forward_refs()
│ │ -Onset.update_forward_refs()
│ │ -Inheritance.update_forward_refs()
│ │ +MechanismElement.update_forward_refs()
│ │ +Disease.update_forward_refs()
│ │ +Drug.update_forward_refs()
│ │ +Predicate.update_forward_refs()
│ │  CompoundExpression.update_forward_refs()
│ │ +MechanismLink.update_forward_refs()
│ │  Triple.update_forward_refs()
│ │  TextWithTriples.update_forward_refs()
│ │  RelationshipType.update_forward_refs()
│ │  Publication.update_forward_refs()
│ │  AnnotatorResult.update_forward_refs()
│ │ -
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/mendelian_disease.yaml
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/mendelian_disease.yaml
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/metabolic_process.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/ontology_class.py
│ │┄ Files 10% similar despite different names
│ │ @@ -1,135 +1,148 @@
│ │  from __future__ import annotations
│ │ -from datetime import datetime, date
│ │ -from enum import Enum
│ │ -from typing import List, Dict, Optional, Any
│ │ -from pydantic import BaseModel as BaseModel, Field
│ │ +
│ │ +from typing import Any, List, Optional
│ │ +
│ │ +from pydantic import BaseModel as BaseModel
│ │ +from pydantic import Field
│ │  
│ │  metamodel_version = "None"
│ │  version = "None"
│ │  
│ │ +
│ │  class WeakRefShimBaseModel(BaseModel):
│ │ -   __slots__ = '__weakref__'
│ │ -    
│ │ -class ConfiguredBaseModel(WeakRefShimBaseModel,
│ │ -                validate_assignment = True, 
│ │ -                validate_all = True, 
│ │ -                underscore_attrs_are_private = True, 
│ │ -                extra = 'forbid', 
│ │ -                arbitrary_types_allowed = True):
│ │ -    pass                    
│ │ +    __slots__ = "__weakref__"
│ │ +
│ │ +
│ │ +class ConfiguredBaseModel(
│ │ +    WeakRefShimBaseModel,
│ │ +    validate_assignment=True,
│ │ +    validate_all=True,
│ │ +    underscore_attrs_are_private=True,
│ │ +    extra="forbid",
│ │ +    arbitrary_types_allowed=True,
│ │ +):
│ │ +    pass
│ │ +
│ │ +
│ │ +class LogicalDefinition(ConfiguredBaseModel):
│ │ +
│ │ +    genus: Optional[List[str]] = Field(default_factory=list)
│ │ +    differentiating_characteristic_relationship: Optional[str] = Field(None)
│ │ +    differentiating_characteristic_parents: Optional[List[str]] = Field(default_factory=list)
│ │  
│ │  
│ │  class ExtractionResult(ConfiguredBaseModel):
│ │      """
│ │      A result of extracting knowledge on text
│ │      """
│ │ +
│ │      input_id: Optional[str] = Field(None)
│ │      input_title: Optional[str] = Field(None)
│ │      input_text: Optional[str] = Field(None)
│ │      raw_completion_output: Optional[str] = Field(None)
│ │      prompt: Optional[str] = Field(None)
│ │ -    extracted_object: Optional[Any] = Field(None, description="""The complex objects extracted from the text""")
│ │ -    named_entities: Optional[List[Any]] = Field(default_factory=list, description="""Named entities extracted from the text""")
│ │ -    
│ │ +    extracted_object: Optional[Any] = Field(
│ │ +        None, description="""The complex objects extracted from the text"""
│ │ +    )
│ │ +    named_entities: Optional[List[Any]] = Field(
│ │ +        default_factory=list, description="""Named entities extracted from the text"""
│ │ +    )
│ │  
│ │  
│ │  class NamedEntity(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │ -
│ │  
│ │ -class MetabolicProcess(NamedEntity):
│ │ -    
│ │ -    label: Optional[str] = Field(None, description="""the name of the metabolic process""")
│ │ -    description: Optional[str] = Field(None, description="""a textual description of the metabolic process""")
│ │ -    synonyms: Optional[List[str]] = Field(default_factory=list, description="""alternative names of the metabolic process""")
│ │ -    subclass_of: Optional[List[str]] = Field(default_factory=list, description="""a semicolon separated list of broader metabolic processes which this is a subclass of""")
│ │ -    category: Optional[str] = Field(None, description="""the category of metabolic process, e.g metabolic process, catabolic process, biosynthetic process, small molecule sensor activity""")
│ │ -    inputs: Optional[List[str]] = Field(default_factory=list, description="""the inputs of the metabolic process""")
│ │ -    outputs: Optional[List[str]] = Field(default_factory=list, description="""the outputs of the metabolic process""")
│ │ -    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ -    
│ │  
│ │ +class OntologyClass(NamedEntity):
│ │  
│ │ -class MetabolicProcessCategory(NamedEntity):
│ │ -    
│ │ +    label: Optional[str] = Field(None, description="""the name of the entity""")
│ │ +    description: Optional[str] = Field(None, description="""a textual description of the entity""")
│ │ +    synonyms: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""alternative names of the entity"""
│ │ +    )
│ │ +    categories: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""the categories to which this entity belongs"""
│ │ +    )
│ │ +    subclass_of: Optional[List[str]] = Field(default_factory=list)
│ │ +    logical_definition: Optional[LogicalDefinition] = Field(
│ │ +        None,
│ │ +        description="""the necessary and sufficient conditions for this entity to be an instance of this class""",
│ │ +    )
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ -    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class ChemicalEntity(NamedEntity):
│ │ -    
│ │ +class Relation(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class CompoundExpression(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      None
│ │ -    
│ │  
│ │  
│ │  class Triple(CompoundExpression):
│ │      """
│ │      Abstract parent for Relation Extraction tasks
│ │      """
│ │ +
│ │      subject: Optional[str] = Field(None)
│ │      predicate: Optional[str] = Field(None)
│ │      object: Optional[str] = Field(None)
│ │ -    qualifier: Optional[str] = Field(None, description="""A qualifier for the statements, e.g. \"NOT\" for negation""")
│ │ -    subject_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the subject of the statement, e.g. \"high dose\" or \"intravenously administered\"""")
│ │ -    object_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the object of the statement, e.g. \"severe\" or \"with additional complications\"""")
│ │ -    
│ │ +    qualifier: Optional[str] = Field(
│ │ +        None, description="""A qualifier for the statements, e.g. \"NOT\" for negation"""
│ │ +    )
│ │ +    subject_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the subject of the statement, e.g. \"high dose\" or \"intravenously administered\"""",
│ │ +    )
│ │ +    object_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the object of the statement, e.g. \"severe\" or \"with additional complications\"""",
│ │ +    )
│ │  
│ │  
│ │  class TextWithTriples(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      publication: Optional[Publication] = Field(None)
│ │      triples: Optional[List[Triple]] = Field(default_factory=list)
│ │ -    
│ │  
│ │  
│ │  class RelationshipType(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Publication(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""The publication identifier""")
│ │      title: Optional[str] = Field(None, description="""The title of the publication""")
│ │      abstract: Optional[str] = Field(None, description="""The abstract of the publication""")
│ │      combined_text: Optional[str] = Field(None)
│ │      full_text: Optional[str] = Field(None, description="""The full text of the publication""")
│ │ -    
│ │  
│ │  
│ │  class AnnotatorResult(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      subject_text: Optional[str] = Field(None)
│ │      object_id: Optional[str] = Field(None)
│ │      object_text: Optional[str] = Field(None)
│ │ -    
│ │ -
│ │  
│ │  
│ │  # Update forward refs
│ │  # see https://pydantic-docs.helpmanual.io/usage/postponed_annotations/
│ │ +LogicalDefinition.update_forward_refs()
│ │  ExtractionResult.update_forward_refs()
│ │  NamedEntity.update_forward_refs()
│ │ -MetabolicProcess.update_forward_refs()
│ │ -MetabolicProcessCategory.update_forward_refs()
│ │ -ChemicalEntity.update_forward_refs()
│ │ +OntologyClass.update_forward_refs()
│ │ +Relation.update_forward_refs()
│ │  CompoundExpression.update_forward_refs()
│ │  Triple.update_forward_refs()
│ │  TextWithTriples.update_forward_refs()
│ │  RelationshipType.update_forward_refs()
│ │  Publication.update_forward_refs()
│ │  AnnotatorResult.update_forward_refs()
│ │ -
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/metabolic_process.yaml
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/metabolic_process.yaml
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/metagenome_study.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/recipe.py
│ │┄ Files 17% similar despite different names
│ │ @@ -1,200 +1,220 @@
│ │  from __future__ import annotations
│ │ -from datetime import datetime, date
│ │ +
│ │ +from datetime import date, datetime
│ │  from enum import Enum
│ │ -from typing import List, Dict, Optional, Any
│ │ -from pydantic import BaseModel as BaseModel, Field
│ │ +from typing import Any, Dict, List, Optional
│ │ +
│ │ +from pydantic import BaseModel as BaseModel
│ │ +from pydantic import Field
│ │  
│ │  metamodel_version = "None"
│ │  version = "None"
│ │  
│ │ +
│ │  class WeakRefShimBaseModel(BaseModel):
│ │ -   __slots__ = '__weakref__'
│ │ -    
│ │ -class ConfiguredBaseModel(WeakRefShimBaseModel,
│ │ -                validate_assignment = True, 
│ │ -                validate_all = True, 
│ │ -                underscore_attrs_are_private = True, 
│ │ -                extra = 'forbid', 
│ │ -                arbitrary_types_allowed = True):
│ │ -    pass                    
│ │ -
│ │ -
│ │ -class Study(ConfiguredBaseModel):
│ │ -    
│ │ -    environments: Optional[List[str]] = Field(default_factory=list)
│ │ -    causal_relationships: Optional[List[CausalRelationship]] = Field(default_factory=list)
│ │ -    variables: Optional[List[str]] = Field(default_factory=list)
│ │ -    treatments: Optional[List[str]] = Field(default_factory=list)
│ │ -    measurements: Optional[List[Measurement]] = Field(default_factory=list)
│ │ -    location: Optional[List[str]] = Field(default_factory=list, description="""the sites at which the study was conducted""")
│ │ -    environmental_material: Optional[List[str]] = Field(default_factory=list, description="""the environmental material that was sampled""")
│ │ -    sequencing_technologies: Optional[str] = Field(None)
│ │ -    organisms: Optional[List[str]] = Field(default_factory=list, description="""semicolon-separated list of all studied organism taxons""")
│ │ -    
│ │ +    __slots__ = "__weakref__"
│ │ +
│ │ +
│ │ +class ConfiguredBaseModel(
│ │ +    WeakRefShimBaseModel,
│ │ +    validate_assignment=True,
│ │ +    validate_all=True,
│ │ +    underscore_attrs_are_private=True,
│ │ +    extra="forbid",
│ │ +    arbitrary_types_allowed=True,
│ │ +):
│ │ +    pass
│ │ +
│ │ +
│ │ +class Recipe(ConfiguredBaseModel):
│ │ +
│ │ +    url: Optional[str] = Field(None)
│ │ +    label: Optional[str] = Field(None, description="""the name of the recipe""")
│ │ +    description: Optional[str] = Field(
│ │ +        None, description="""a brief textual description of the recipe"""
│ │ +    )
│ │ +    categories: Optional[List[str]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""a semicolon separated list of the categories to which this recipe belongs""",  # noqa
│ │ +    )
│ │ +    ingredients: Optional[List[Ingredient]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""a semicolon separated list of the ingredients plus quantities of the recipe""",  # noqa
│ │ +    )
│ │ +    steps: Optional[List[Step]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""a semicolon separated list of the individual steps involved in this recipe""",  # noqa
│ │ +    )
│ │  
│ │  
│ │  class ExtractionResult(ConfiguredBaseModel):
│ │      """
│ │      A result of extracting knowledge on text
│ │      """
│ │ +
│ │      input_id: Optional[str] = Field(None)
│ │      input_title: Optional[str] = Field(None)
│ │      input_text: Optional[str] = Field(None)
│ │      raw_completion_output: Optional[str] = Field(None)
│ │      prompt: Optional[str] = Field(None)
│ │ -    extracted_object: Optional[Any] = Field(None, description="""The complex objects extracted from the text""")
│ │ -    named_entities: Optional[List[Any]] = Field(default_factory=list, description="""Named entities extracted from the text""")
│ │ -    
│ │ +    extracted_object: Optional[Any] = Field(
│ │ +        None, description="""The complex objects extracted from the text"""
│ │ +    )
│ │ +    named_entities: Optional[List[Any]] = Field(
│ │ +        default_factory=list, description="""Named entities extracted from the text"""
│ │ +    )
│ │  
│ │  
│ │  class NamedEntity(ConfiguredBaseModel):
│ │ -    
│ │ -    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ -    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │ -
│ │ -class Location(NamedEntity):
│ │ -    
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │ -
│ │  
│ │ -class EnvironmentalMaterial(NamedEntity):
│ │ -    
│ │ -    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ -    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │ +class FoodType(NamedEntity):
│ │  
│ │ -class Environment(NamedEntity):
│ │ -    
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class Variable(NamedEntity):
│ │ -    
│ │ -    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ -    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │ +class RecipeCategory(NamedEntity):
│ │  
│ │ -
│ │ -class Unit(NamedEntity):
│ │ -    
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class SequencingTechnology(NamedEntity):
│ │ -    
│ │ +class Action(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class Treatment(NamedEntity):
│ │ -    
│ │ +class UtensilType(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class Organism(NamedEntity):
│ │ -    
│ │ +class Unit(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class CompoundExpression(ConfiguredBaseModel):
│ │ -    
│ │ -    None
│ │ -    
│ │  
│ │ +    None
│ │  
│ │ -class Measurement(CompoundExpression):
│ │ -    
│ │ -    value: Optional[str] = Field(None, description="""the value of the measurement""")
│ │ -    unit: Optional[str] = Field(None, description="""the unit of the measurement""")
│ │ -    
│ │  
│ │ +class Ingredient(CompoundExpression):
│ │  
│ │ -class CausalRelationship(CompoundExpression):
│ │ -    
│ │ -    cause: Optional[str] = Field(None, description="""the variable that is the cause of the effect""")
│ │ -    effect: Optional[str] = Field(None, description="""the things that is affected""")
│ │ -    
│ │ +    food_item: Optional[FoodItem] = Field(None, description="""the food item""")
│ │ +    amount: Optional[Quantity] = Field(
│ │ +        None, description="""the quantity of the ingredient, e.g. 2 lbs"""
│ │ +    )
│ │ +
│ │ +
│ │ +class Quantity(CompoundExpression):
│ │ +
│ │ +    value: Optional[str] = Field(None, description="""the value of the quantity""")
│ │ +    unit: Optional[str] = Field(
│ │ +        None, description="""the unit of the quantity, e.g. grams, cups, etc."""
│ │ +    )
│ │ +
│ │ +
│ │ +class Step(CompoundExpression):
│ │ +
│ │ +    action: Optional[str] = Field(
│ │ +        None, description="""the action taken in this step (e.g. mix, add)"""
│ │ +    )
│ │ +    inputs: Optional[List[FoodItem]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""a semicolon separated list of the inputs of this step""",
│ │ +    )
│ │ +    outputs: Optional[List[FoodItem]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""a semicolon separated list of the outputs of this step""",
│ │ +    )
│ │ +    utensils: Optional[List[str]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""the kitchen utensil used in this step (e.g. pan, bowl)""",
│ │ +    )
│ │ +
│ │ +
│ │ +class FoodItem(CompoundExpression):
│ │ +
│ │ +    food: Optional[str] = Field(None, description="""the food item""")
│ │ +    state: Optional[str] = Field(
│ │ +        None, description="""the state of the food item (e.g. chopped, diced)"""
│ │ +    )
│ │  
│ │  
│ │  class Triple(CompoundExpression):
│ │ -    """
│ │ -    Abstract parent for Relation Extraction tasks
│ │ -    """
│ │ +    """Abstract parent for Relation Extraction tasks."""
│ │ +
│ │      subject: Optional[str] = Field(None)
│ │      predicate: Optional[str] = Field(None)
│ │      object: Optional[str] = Field(None)
│ │ -    qualifier: Optional[str] = Field(None, description="""A qualifier for the statements, e.g. \"NOT\" for negation""")
│ │ -    subject_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the subject of the statement, e.g. \"high dose\" or \"intravenously administered\"""")
│ │ -    object_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the object of the statement, e.g. \"severe\" or \"with additional complications\"""")
│ │ -    
│ │ +    qualifier: Optional[str] = Field(
│ │ +        None, description="""A qualifier for the statements, e.g. \"NOT\" for negation"""
│ │ +    )
│ │ +    subject_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the subject of the statement,\
│ │ +            e.g. \"high dose\" or \"intravenously administered\"""",
│ │ +    )
│ │ +    object_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the object of the statement,\
│ │ +            e.g. \"severe\" or \"with additional complications\"""",
│ │ +    )
│ │  
│ │  
│ │  class TextWithTriples(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      publication: Optional[Publication] = Field(None)
│ │      triples: Optional[List[Triple]] = Field(default_factory=list)
│ │ -    
│ │  
│ │  
│ │  class RelationshipType(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Publication(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""The publication identifier""")
│ │      title: Optional[str] = Field(None, description="""The title of the publication""")
│ │      abstract: Optional[str] = Field(None, description="""The abstract of the publication""")
│ │      combined_text: Optional[str] = Field(None)
│ │      full_text: Optional[str] = Field(None, description="""The full text of the publication""")
│ │ -    
│ │  
│ │  
│ │  class AnnotatorResult(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      subject_text: Optional[str] = Field(None)
│ │      object_id: Optional[str] = Field(None)
│ │      object_text: Optional[str] = Field(None)
│ │ -    
│ │ -
│ │  
│ │  
│ │  # Update forward refs
│ │  # see https://pydantic-docs.helpmanual.io/usage/postponed_annotations/
│ │ -Study.update_forward_refs()
│ │ +Recipe.update_forward_refs()
│ │  ExtractionResult.update_forward_refs()
│ │  NamedEntity.update_forward_refs()
│ │ -Location.update_forward_refs()
│ │ -EnvironmentalMaterial.update_forward_refs()
│ │ -Environment.update_forward_refs()
│ │ -Variable.update_forward_refs()
│ │ +FoodType.update_forward_refs()
│ │ +RecipeCategory.update_forward_refs()
│ │ +Action.update_forward_refs()
│ │ +UtensilType.update_forward_refs()
│ │  Unit.update_forward_refs()
│ │ -SequencingTechnology.update_forward_refs()
│ │ -Treatment.update_forward_refs()
│ │ -Organism.update_forward_refs()
│ │  CompoundExpression.update_forward_refs()
│ │ -Measurement.update_forward_refs()
│ │ -CausalRelationship.update_forward_refs()
│ │ +Ingredient.update_forward_refs()
│ │ +Quantity.update_forward_refs()
│ │ +Step.update_forward_refs()
│ │ +FoodItem.update_forward_refs()
│ │  Triple.update_forward_refs()
│ │  TextWithTriples.update_forward_refs()
│ │  RelationshipType.update_forward_refs()
│ │  Publication.update_forward_refs()
│ │  AnnotatorResult.update_forward_refs()
│ │ -
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/metagenome_study.yaml
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/metagenome_study.yaml
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/ontology_class.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/phenotype.py
│ │┄ Files 18% similar despite different names
│ │ @@ -1,135 +1,155 @@
│ │  from __future__ import annotations
│ │ -from datetime import datetime, date
│ │ +
│ │ +from datetime import date, datetime
│ │  from enum import Enum
│ │ -from typing import List, Dict, Optional, Any
│ │ -from pydantic import BaseModel as BaseModel, Field
│ │ +from typing import Any, Dict, List, Literal, Optional, Union
│ │ +
│ │ +from linkml_runtime.linkml_model import Decimal
│ │ +from pydantic import BaseModel as BaseModel
│ │ +from pydantic import Field
│ │  
│ │  metamodel_version = "None"
│ │  version = "None"
│ │  
│ │ +
│ │  class WeakRefShimBaseModel(BaseModel):
│ │ -   __slots__ = '__weakref__'
│ │ -    
│ │ -class ConfiguredBaseModel(WeakRefShimBaseModel,
│ │ -                validate_assignment = True, 
│ │ -                validate_all = True, 
│ │ -                underscore_attrs_are_private = True, 
│ │ -                extra = 'forbid', 
│ │ -                arbitrary_types_allowed = True):
│ │ -    pass                    
│ │ -
│ │ -
│ │ -class LogicalDefinition(ConfiguredBaseModel):
│ │ -    
│ │ -    genus: Optional[List[str]] = Field(default_factory=list)
│ │ -    differentiating_characteristic_relationship: Optional[str] = Field(None)
│ │ -    differentiating_characteristic_parents: Optional[List[str]] = Field(default_factory=list)
│ │ -    
│ │ +    __slots__ = "__weakref__"
│ │ +
│ │ +
│ │ +class ConfiguredBaseModel(
│ │ +    WeakRefShimBaseModel,
│ │ +    validate_assignment=True,
│ │ +    validate_all=True,
│ │ +    underscore_attrs_are_private=True,
│ │ +    extra="forbid",
│ │ +    arbitrary_types_allowed=True,
│ │ +):
│ │ +    pass
│ │ +
│ │ +
│ │ +class Trait(ConfiguredBaseModel):
│ │ +
│ │ +    quality: Optional[str] = Field(
│ │ +        None, description="""the phenotypic quality exibited by the phenotype"""
│ │ +    )
│ │ +    anatomical_entity: Optional[str] = Field(
│ │ +        None, description="""the name of the disease that is treated."""
│ │ +    )
│ │ +    chemical_entity: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""semicolon-separated list of treatment to adverse effect associations, e.g. Imatinib*nausea""",
│ │ +    )
│ │  
│ │  
│ │  class ExtractionResult(ConfiguredBaseModel):
│ │      """
│ │      A result of extracting knowledge on text
│ │      """
│ │ +
│ │      input_id: Optional[str] = Field(None)
│ │      input_title: Optional[str] = Field(None)
│ │      input_text: Optional[str] = Field(None)
│ │      raw_completion_output: Optional[str] = Field(None)
│ │      prompt: Optional[str] = Field(None)
│ │ -    extracted_object: Optional[Any] = Field(None, description="""The complex objects extracted from the text""")
│ │ -    named_entities: Optional[List[Any]] = Field(default_factory=list, description="""Named entities extracted from the text""")
│ │ -    
│ │ +    extracted_object: Optional[Any] = Field(
│ │ +        None, description="""The complex objects extracted from the text"""
│ │ +    )
│ │ +    named_entities: Optional[List[Any]] = Field(
│ │ +        default_factory=list, description="""Named entities extracted from the text"""
│ │ +    )
│ │  
│ │  
│ │  class NamedEntity(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class OntologyClass(NamedEntity):
│ │ -    
│ │ -    label: Optional[str] = Field(None, description="""the name of the entity""")
│ │ -    description: Optional[str] = Field(None, description="""a textual description of the entity""")
│ │ -    synonyms: Optional[List[str]] = Field(default_factory=list, description="""alternative names of the entity""")
│ │ -    categories: Optional[List[str]] = Field(default_factory=list, description="""the categories to which this entity belongs""")
│ │ -    subclass_of: Optional[List[str]] = Field(default_factory=list)
│ │ -    logical_definition: Optional[LogicalDefinition] = Field(None, description="""the necessary and sufficient conditions for this entity to be an instance of this class""")
│ │ +class Quality(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ -    
│ │ +    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │  
│ │  
│ │ -class Relation(NamedEntity):
│ │ -    
│ │ +class ChemicalEntity(NamedEntity):
│ │ +
│ │ +    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ +    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ +
│ │ +
│ │ +class AnatomicalEntity(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class CompoundExpression(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      None
│ │ -    
│ │  
│ │  
│ │  class Triple(CompoundExpression):
│ │      """
│ │      Abstract parent for Relation Extraction tasks
│ │      """
│ │ +
│ │      subject: Optional[str] = Field(None)
│ │      predicate: Optional[str] = Field(None)
│ │      object: Optional[str] = Field(None)
│ │ -    qualifier: Optional[str] = Field(None, description="""A qualifier for the statements, e.g. \"NOT\" for negation""")
│ │ -    subject_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the subject of the statement, e.g. \"high dose\" or \"intravenously administered\"""")
│ │ -    object_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the object of the statement, e.g. \"severe\" or \"with additional complications\"""")
│ │ -    
│ │ +    qualifier: Optional[str] = Field(
│ │ +        None, description="""A qualifier for the statements, e.g. \"NOT\" for negation"""
│ │ +    )
│ │ +    subject_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the subject of the statement,\
│ │ +            e.g. \"high dose\" or \"intravenously administered\"""",
│ │ +    )
│ │ +    object_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the object of the statement,\
│ │ +            e.g. \"severe\" or \"with additional complications\"""",
│ │ +    )
│ │  
│ │  
│ │  class TextWithTriples(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      publication: Optional[Publication] = Field(None)
│ │      triples: Optional[List[Triple]] = Field(default_factory=list)
│ │ -    
│ │  
│ │  
│ │  class RelationshipType(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Publication(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""The publication identifier""")
│ │      title: Optional[str] = Field(None, description="""The title of the publication""")
│ │      abstract: Optional[str] = Field(None, description="""The abstract of the publication""")
│ │      combined_text: Optional[str] = Field(None)
│ │      full_text: Optional[str] = Field(None, description="""The full text of the publication""")
│ │ -    
│ │  
│ │  
│ │  class AnnotatorResult(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      subject_text: Optional[str] = Field(None)
│ │      object_id: Optional[str] = Field(None)
│ │      object_text: Optional[str] = Field(None)
│ │ -    
│ │ -
│ │  
│ │  
│ │  # Update forward refs
│ │  # see https://pydantic-docs.helpmanual.io/usage/postponed_annotations/
│ │ -LogicalDefinition.update_forward_refs()
│ │ +Trait.update_forward_refs()
│ │  ExtractionResult.update_forward_refs()
│ │  NamedEntity.update_forward_refs()
│ │ -OntologyClass.update_forward_refs()
│ │ -Relation.update_forward_refs()
│ │ +Quality.update_forward_refs()
│ │ +ChemicalEntity.update_forward_refs()
│ │ +AnatomicalEntity.update_forward_refs()
│ │  CompoundExpression.update_forward_refs()
│ │  Triple.update_forward_refs()
│ │  TextWithTriples.update_forward_refs()
│ │  RelationshipType.update_forward_refs()
│ │  Publication.update_forward_refs()
│ │  AnnotatorResult.update_forward_refs()
│ │ -
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/ontology_class.yaml
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/ontology_class.yaml
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/reaction.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/reaction.py
│ │┄ Files 12% similar despite different names
│ │ @@ -1,172 +1,205 @@
│ │  from __future__ import annotations
│ │ -from datetime import datetime, date
│ │ -from enum import Enum
│ │ -from typing import List, Dict, Optional, Any, Union, Literal
│ │ -from pydantic import BaseModel as BaseModel, Field
│ │ -from linkml_runtime.linkml_model import Decimal
│ │ +
│ │ +from typing import Any, Dict, List, Optional
│ │ +
│ │ +from pydantic import BaseModel as BaseModel
│ │ +from pydantic import Field
│ │  
│ │  metamodel_version = "None"
│ │  version = "None"
│ │  
│ │ +
│ │  class WeakRefShimBaseModel(BaseModel):
│ │ -   __slots__ = '__weakref__'
│ │ -    
│ │ -class ConfiguredBaseModel(WeakRefShimBaseModel,
│ │ -                validate_assignment = True, 
│ │ -                validate_all = True, 
│ │ -                underscore_attrs_are_private = True, 
│ │ -                extra = 'forbid', 
│ │ -                arbitrary_types_allowed = True):
│ │ -    pass                    
│ │ +    __slots__ = "__weakref__"
│ │ +
│ │ +
│ │ +class ConfiguredBaseModel(
│ │ +    WeakRefShimBaseModel,
│ │ +    validate_assignment=True,
│ │ +    validate_all=True,
│ │ +    underscore_attrs_are_private=True,
│ │ +    extra="forbid",
│ │ +    arbitrary_types_allowed=True,
│ │ +):
│ │ +    pass
│ │  
│ │  
│ │  class GeneToReaction(ConfiguredBaseModel):
│ │ -    
│ │ -    gene: Optional[str] = Field(None, description="""name of the gene that catalyzes the reaction""")
│ │ -    reactions: Optional[Dict[str, Reaction]] = Field(default_factory=dict, description="""semicolon separated list of reaction equations (e.g. A+B = C+D) catalyzed by the gene""")
│ │ +
│ │ +    gene: Optional[str] = Field(
│ │ +        None, description="""name of the gene that catalyzes the reaction"""
│ │ +    )
│ │ +    reactions: Optional[Dict[str, Reaction]] = Field(
│ │ +        default_factory=dict,
│ │ +        description="""semicolon separated list of reaction equations\
│ │ +            (e.g. A+B = C+D) catalyzed by the gene""",
│ │ +    )
│ │      organism: Optional[str] = Field(None)
│ │ -    
│ │  
│ │  
│ │  class ReactionDocument(ConfiguredBaseModel):
│ │ -    
│ │ -    genes: Optional[List[str]] = Field(default_factory=list, description="""semicolon separated list of genes that catalyzes the mentioned reactions""")
│ │ -    reactions: Optional[Dict[str, Reaction]] = Field(default_factory=dict, description="""semicolon separated list of reaction equations (e.g. A+B = C+D) catalyzed by the gene""")
│ │ -    gene_reaction_pairings: Optional[List[GeneReactionPairing]] = Field(default_factory=list, description="""semicolon separated list of gene to reaction pairings""")
│ │ +
│ │ +    genes: Optional[List[str]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""semicolon separated list of genes that catalyzes the mentioned reactions""",
│ │ +    )
│ │ +    reactions: Optional[Dict[str, Reaction]] = Field(
│ │ +        default_factory=dict,
│ │ +        description="""semicolon separated list of reaction equations\
│ │ +            (e.g. A+B = C+D) catalyzed by the gene""",
│ │ +    )
│ │ +    gene_reaction_pairings: Optional[List[GeneReactionPairing]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""semicolon separated list of gene to reaction pairings""",
│ │ +    )
│ │      organism: Optional[str] = Field(None)
│ │ -    has_evidence: Optional[List[str]] = Field(default_factory=list, description="""evidence for the reaction""")
│ │ -    
│ │ +    has_evidence: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""evidence for the reaction"""
│ │ +    )
│ │  
│ │  
│ │  class ExtractionResult(ConfiguredBaseModel):
│ │ -    """
│ │ -    A result of extracting knowledge on text
│ │ -    """
│ │ +    """A result of extracting knowledge on text."""
│ │ +
│ │      input_id: Optional[str] = Field(None)
│ │      input_title: Optional[str] = Field(None)
│ │      input_text: Optional[str] = Field(None)
│ │      raw_completion_output: Optional[str] = Field(None)
│ │      prompt: Optional[str] = Field(None)
│ │ -    extracted_object: Optional[Any] = Field(None, description="""The complex objects extracted from the text""")
│ │ -    named_entities: Optional[List[Any]] = Field(default_factory=list, description="""Named entities extracted from the text""")
│ │ -    
│ │ +    extracted_object: Optional[Any] = Field(
│ │ +        None, description="""The complex objects extracted from the text"""
│ │ +    )
│ │ +    named_entities: Optional[List[Any]] = Field(
│ │ +        default_factory=list, description="""Named entities extracted from the text"""
│ │ +    )
│ │  
│ │  
│ │  class NamedEntity(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Reaction(NamedEntity):
│ │ -    
│ │ +
│ │      label: Optional[str] = Field(None, description="""the name of the reaction""")
│ │ -    description: Optional[str] = Field(None, description="""a textual description of the reaction""")
│ │ -    synonyms: Optional[List[str]] = Field(default_factory=list, description="""alternative names of the reaction""")
│ │ -    subclass_of: Optional[str] = Field(None, description="""the category to which this biological process belongs""")
│ │ -    left_side: Optional[List[str]] = Field(default_factory=list, description="""semicolon separated list of chemical entities on the left side""")
│ │ -    right_side: Optional[List[str]] = Field(default_factory=list, description="""semicolon separated list of chemical entities on the right side""")
│ │ +    description: Optional[str] = Field(
│ │ +        None, description="""a textual description of the reaction"""
│ │ +    )
│ │ +    synonyms: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""alternative names of the reaction"""
│ │ +    )
│ │ +    subclass_of: Optional[str] = Field(
│ │ +        None, description="""the category to which this biological process belongs"""
│ │ +    )
│ │ +    left_side: Optional[List[str]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""semicolon separated list of chemical entities on the left side""",
│ │ +    )
│ │ +    right_side: Optional[List[str]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""semicolon separated list of chemical entities on the right side""",
│ │ +    )
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ -    
│ │  
│ │  
│ │  class ReactionGrouping(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class ChemicalEntity(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Evidence(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Gene(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Organism(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class CompoundExpression(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      None
│ │ -    
│ │  
│ │  
│ │  class GeneReactionPairing(CompoundExpression):
│ │ -    
│ │ -    gene: Optional[str] = Field(None, description="""name of the gene that catalyzes the reaction""")
│ │ -    reaction: Optional[str] = Field(None, description="""equation describing the reaction (e.g. A+B = C+D) catalyzed by the gene""")
│ │ -    
│ │ +
│ │ +    gene: Optional[str] = Field(
│ │ +        None, description="""name of the gene that catalyzes the reaction"""
│ │ +    )
│ │ +    reaction: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""equation describing the reaction (e.g. A+B = C+D) catalyzed by the gene""",
│ │ +    )
│ │  
│ │  
│ │  class Triple(CompoundExpression):
│ │ -    """
│ │ -    Abstract parent for Relation Extraction tasks
│ │ -    """
│ │ +    """Abstract parent for Relation Extraction tasks."""
│ │ +
│ │      subject: Optional[str] = Field(None)
│ │      predicate: Optional[str] = Field(None)
│ │      object: Optional[str] = Field(None)
│ │ -    qualifier: Optional[str] = Field(None, description="""A qualifier for the statements, e.g. \"NOT\" for negation""")
│ │ -    subject_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the subject of the statement, e.g. \"high dose\" or \"intravenously administered\"""")
│ │ -    object_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the object of the statement, e.g. \"severe\" or \"with additional complications\"""")
│ │ -    
│ │ +    qualifier: Optional[str] = Field(
│ │ +        None, description="""A qualifier for the statements, e.g. \"NOT\" for negation"""
│ │ +    )
│ │ +    subject_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the subject of the statement,\
│ │ +            e.g. \"high dose\" or \"intravenously administered\"""",
│ │ +    )
│ │ +    object_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the object of the statement,\
│ │ +            e.g. \"severe\" or \"with additional complications\"""",
│ │ +    )
│ │  
│ │  
│ │  class TextWithTriples(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      publication: Optional[Publication] = Field(None)
│ │      triples: Optional[List[Triple]] = Field(default_factory=list)
│ │ -    
│ │  
│ │  
│ │  class RelationshipType(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Publication(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""The publication identifier""")
│ │      title: Optional[str] = Field(None, description="""The title of the publication""")
│ │      abstract: Optional[str] = Field(None, description="""The abstract of the publication""")
│ │      combined_text: Optional[str] = Field(None)
│ │      full_text: Optional[str] = Field(None, description="""The full text of the publication""")
│ │ -    
│ │  
│ │  
│ │  class AnnotatorResult(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      subject_text: Optional[str] = Field(None)
│ │      object_id: Optional[str] = Field(None)
│ │      object_text: Optional[str] = Field(None)
│ │ -    
│ │ -
│ │  
│ │  
│ │  # Update forward refs
│ │  # see https://pydantic-docs.helpmanual.io/usage/postponed_annotations/
│ │  GeneToReaction.update_forward_refs()
│ │  ReactionDocument.update_forward_refs()
│ │  ExtractionResult.update_forward_refs()
│ │ @@ -180,8 +213,7 @@
│ │  CompoundExpression.update_forward_refs()
│ │  GeneReactionPairing.update_forward_refs()
│ │  Triple.update_forward_refs()
│ │  TextWithTriples.update_forward_refs()
│ │  RelationshipType.update_forward_refs()
│ │  Publication.update_forward_refs()
│ │  AnnotatorResult.update_forward_refs()
│ │ -
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/reaction.yaml
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/reaction.yaml
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/recipe.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/treatment.py
│ │┄ Files 14% similar despite different names
│ │ @@ -1,191 +1,247 @@
│ │  from __future__ import annotations
│ │ -from datetime import datetime, date
│ │ +
│ │ +from datetime import date, datetime
│ │  from enum import Enum
│ │ -from typing import List, Dict, Optional, Any
│ │ -from pydantic import BaseModel as BaseModel, Field
│ │ +from typing import Any, Dict, List, Literal, Optional, Union
│ │ +
│ │ +from linkml_runtime.linkml_model import Decimal
│ │ +from pydantic import BaseModel as BaseModel
│ │ +from pydantic import Field
│ │  
│ │  metamodel_version = "None"
│ │  version = "None"
│ │  
│ │ +
│ │  class WeakRefShimBaseModel(BaseModel):
│ │ -   __slots__ = '__weakref__'
│ │ -    
│ │ -class ConfiguredBaseModel(WeakRefShimBaseModel,
│ │ -                validate_assignment = True, 
│ │ -                validate_all = True, 
│ │ -                underscore_attrs_are_private = True, 
│ │ -                extra = 'forbid', 
│ │ -                arbitrary_types_allowed = True):
│ │ -    pass                    
│ │ -
│ │ -
│ │ -class Recipe(ConfiguredBaseModel):
│ │ -    
│ │ -    url: Optional[str] = Field(None)
│ │ -    label: Optional[str] = Field(None, description="""the name of the recipe""")
│ │ -    description: Optional[str] = Field(None, description="""a brief textual description of the recipe""")
│ │ -    categories: Optional[List[str]] = Field(default_factory=list, description="""a semicolon separated list of the categories to which this recipe belongs""")
│ │ -    ingredients: Optional[List[Ingredient]] = Field(default_factory=list, description="""a semicolon separated list of the ingredients plus quantities of the recipe""")
│ │ -    steps: Optional[List[Step]] = Field(default_factory=list, description="""a semicolon separated list of the individual steps involved in this recipe""")
│ │ -    
│ │ +    __slots__ = "__weakref__"
│ │ +
│ │ +
│ │ +class ConfiguredBaseModel(
│ │ +    WeakRefShimBaseModel,
│ │ +    validate_assignment=True,
│ │ +    validate_all=True,
│ │ +    underscore_attrs_are_private=True,
│ │ +    extra="forbid",
│ │ +    arbitrary_types_allowed=True,
│ │ +):
│ │ +    pass
│ │ +
│ │ +
│ │ +class NCITDrugType(str, Enum):
│ │ +
│ │ +    dummy = "dummy"
│ │ +
│ │ +
│ │ +class NCITTreatmentType(str, Enum):
│ │ +
│ │ +    dummy = "dummy"
│ │ +
│ │ +
│ │ +class NCITTActivityType(str, Enum):
│ │ +
│ │ +    dummy = "dummy"
│ │ +
│ │ +
│ │ +class MAXOActionType(str, Enum):
│ │ +
│ │ +    dummy = "dummy"
│ │ +
│ │ +
│ │ +class MESHTherapeuticType(str, Enum):
│ │ +
│ │ +    dummy = "dummy"
│ │ +
│ │ +
│ │ +class CHEBIDrugType(str, Enum):
│ │ +
│ │ +    dummy = "dummy"
│ │ +
│ │ +
│ │ +class DiseaseTreatmentSummary(ConfiguredBaseModel):
│ │ +
│ │ +    disease: Optional[str] = Field(None, description="""the name of the disease that is treated""")
│ │ +    drugs: Optional[List[str]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""semicolon-separated list of named small molecule drugs""",
│ │ +    )
│ │ +    treatments: Optional[List[str]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""semicolon-separated list of therapies and treatments are indicated for treating the disease.""",
│ │ +    )
│ │ +    contraindications: Optional[List[str]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""semicolon-separated list of therapies and treatments that are contra-indicated for the disease, and should not be used, due to risk of adverse effects.""",
│ │ +    )
│ │ +    treatment_mechanisms: Optional[List[TreatmentMechanism]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""semicolon-separated list of treatment to asterisk-separated mechanism associations""",
│ │ +    )
│ │ +    treatment_efficacies: Optional[List[TreatmentEfficacy]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""semicolon-separated list of treatment to efficacy associations, e.g. Imatinib*effective""",
│ │ +    )
│ │ +    treatment_adverse_effects: Optional[List[TreatmentAdverseEffect]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""semicolon-separated list of treatment to adverse effect associations, e.g. Imatinib*nausea""",
│ │ +    )
│ │  
│ │  
│ │  class ExtractionResult(ConfiguredBaseModel):
│ │      """
│ │      A result of extracting knowledge on text
│ │      """
│ │ +
│ │      input_id: Optional[str] = Field(None)
│ │      input_title: Optional[str] = Field(None)
│ │      input_text: Optional[str] = Field(None)
│ │      raw_completion_output: Optional[str] = Field(None)
│ │      prompt: Optional[str] = Field(None)
│ │ -    extracted_object: Optional[Any] = Field(None, description="""The complex objects extracted from the text""")
│ │ -    named_entities: Optional[List[Any]] = Field(default_factory=list, description="""Named entities extracted from the text""")
│ │ -    
│ │ +    extracted_object: Optional[Any] = Field(
│ │ +        None, description="""The complex objects extracted from the text"""
│ │ +    )
│ │ +    named_entities: Optional[List[Any]] = Field(
│ │ +        default_factory=list, description="""Named entities extracted from the text"""
│ │ +    )
│ │  
│ │  
│ │  class NamedEntity(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │ +    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ +    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ +
│ │ +
│ │ +class Gene(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class FoodType(NamedEntity):
│ │ -    
│ │ +class Symptom(NamedEntity):
│ │ +
│ │ +    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ +    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ +
│ │ +
│ │ +class Disease(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class RecipeCategory(NamedEntity):
│ │ -    
│ │ +class AdverseEffect(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class Action(NamedEntity):
│ │ -    
│ │ +class Treatment(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class UtensilType(NamedEntity):
│ │ -    
│ │ +class Mechanism(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class Unit(NamedEntity):
│ │ -    
│ │ +class Drug(NamedEntity):
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class CompoundExpression(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      None
│ │ -    
│ │  
│ │  
│ │ -class Ingredient(CompoundExpression):
│ │ -    
│ │ -    food_item: Optional[FoodItem] = Field(None, description="""the food item""")
│ │ -    amount: Optional[Quantity] = Field(None, description="""the quantity of the ingredient, e.g. 2 lbs""")
│ │ -    
│ │ +class TreatmentMechanism(CompoundExpression):
│ │ +
│ │ +    treatment: Optional[str] = Field(None)
│ │ +    mechanism: Optional[str] = Field(None)
│ │  
│ │  
│ │ -class Quantity(CompoundExpression):
│ │ -    
│ │ -    value: Optional[str] = Field(None, description="""the value of the quantity""")
│ │ -    unit: Optional[str] = Field(None, description="""the unit of the quantity, e.g. grams, cups, etc.""")
│ │ -    
│ │ +class TreatmentAdverseEffect(CompoundExpression):
│ │  
│ │ +    treatment: Optional[str] = Field(None)
│ │ +    adverse_effects: Optional[List[str]] = Field(default_factory=list)
│ │  
│ │ -class Step(CompoundExpression):
│ │ -    
│ │ -    action: Optional[str] = Field(None, description="""the action taken in this step (e.g. mix, add)""")
│ │ -    inputs: Optional[List[FoodItem]] = Field(default_factory=list, description="""a semicolon separated list of the inputs of this step""")
│ │ -    outputs: Optional[List[FoodItem]] = Field(default_factory=list, description="""a semicolon separated list of the outputs of this step""")
│ │ -    utensils: Optional[List[str]] = Field(default_factory=list, description="""the kitchen utensil used in this step (e.g. pan, bowl)""")
│ │ -    
│ │  
│ │ +class TreatmentEfficacy(CompoundExpression):
│ │  
│ │ -class FoodItem(CompoundExpression):
│ │ -    
│ │ -    food: Optional[str] = Field(None, description="""the food item""")
│ │ -    state: Optional[str] = Field(None, description="""the state of the food item (e.g. chopped, diced)""")
│ │ -    
│ │ +    treatment: Optional[str] = Field(None)
│ │ +    efficacy: Optional[str] = Field(None)
│ │  
│ │  
│ │  class Triple(CompoundExpression):
│ │      """
│ │      Abstract parent for Relation Extraction tasks
│ │      """
│ │ +
│ │      subject: Optional[str] = Field(None)
│ │      predicate: Optional[str] = Field(None)
│ │      object: Optional[str] = Field(None)
│ │ -    qualifier: Optional[str] = Field(None, description="""A qualifier for the statements, e.g. \"NOT\" for negation""")
│ │ -    subject_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the subject of the statement, e.g. \"high dose\" or \"intravenously administered\"""")
│ │ -    object_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the object of the statement, e.g. \"severe\" or \"with additional complications\"""")
│ │ -    
│ │ +    qualifier: Optional[str] = Field(
│ │ +        None, description="""A qualifier for the statements, e.g. \"NOT\" for negation"""
│ │ +    )
│ │ +    subject_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the subject of the statement, e.g. \"high dose\" or \"intravenously administered\"""",
│ │ +    )
│ │ +    object_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the object of the statement, e.g. \"severe\" or \"with additional complications\"""",
│ │ +    )
│ │  
│ │  
│ │  class TextWithTriples(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      publication: Optional[Publication] = Field(None)
│ │      triples: Optional[List[Triple]] = Field(default_factory=list)
│ │ -    
│ │  
│ │  
│ │  class RelationshipType(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Publication(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""The publication identifier""")
│ │      title: Optional[str] = Field(None, description="""The title of the publication""")
│ │      abstract: Optional[str] = Field(None, description="""The abstract of the publication""")
│ │      combined_text: Optional[str] = Field(None)
│ │      full_text: Optional[str] = Field(None, description="""The full text of the publication""")
│ │ -    
│ │  
│ │  
│ │  class AnnotatorResult(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      subject_text: Optional[str] = Field(None)
│ │      object_id: Optional[str] = Field(None)
│ │      object_text: Optional[str] = Field(None)
│ │ -    
│ │ -
│ │  
│ │  
│ │  # Update forward refs
│ │  # see https://pydantic-docs.helpmanual.io/usage/postponed_annotations/
│ │ -Recipe.update_forward_refs()
│ │ +DiseaseTreatmentSummary.update_forward_refs()
│ │  ExtractionResult.update_forward_refs()
│ │  NamedEntity.update_forward_refs()
│ │ -FoodType.update_forward_refs()
│ │ -RecipeCategory.update_forward_refs()
│ │ -Action.update_forward_refs()
│ │ -UtensilType.update_forward_refs()
│ │ -Unit.update_forward_refs()
│ │ +Gene.update_forward_refs()
│ │ +Symptom.update_forward_refs()
│ │ +Disease.update_forward_refs()
│ │ +AdverseEffect.update_forward_refs()
│ │ +Treatment.update_forward_refs()
│ │ +Mechanism.update_forward_refs()
│ │ +Drug.update_forward_refs()
│ │  CompoundExpression.update_forward_refs()
│ │ -Ingredient.update_forward_refs()
│ │ -Quantity.update_forward_refs()
│ │ -Step.update_forward_refs()
│ │ -FoodItem.update_forward_refs()
│ │ +TreatmentMechanism.update_forward_refs()
│ │ +TreatmentAdverseEffect.update_forward_refs()
│ │ +TreatmentEfficacy.update_forward_refs()
│ │  Triple.update_forward_refs()
│ │  TextWithTriples.update_forward_refs()
│ │  RelationshipType.update_forward_refs()
│ │  Publication.update_forward_refs()
│ │  AnnotatorResult.update_forward_refs()
│ │ -
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/recipe.yaml
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/recipe.yaml
│ │┄ Files 1% similar despite different names
│ │ @@ -11,14 +11,15 @@
│ │    UO: http://purl.obolibrary.org/obo/UO_
│ │    dcterms: http://purl.org/dc/terms/
│ │    HANCESTRO: http://purl.obolibrary.org/obo/HANCESTRO_
│ │    BFO: http://purl.obolibrary.org/obo/BFO_
│ │    AUTO: http://example.org/auto/
│ │    RO: http://purl.obolibrary.org/obo/RO_
│ │    qudt: http://qudt.org/schema/qudt/
│ │ +  dbpediaont: http://dbpedia.org/ontology/
│ │  
│ │  
│ │  default_prefix: recipe
│ │  default_range: string
│ │  
│ │  imports:
│ │    - linkml:types
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/treatment.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/metabolic_process.py
│ │┄ Files 23% similar despite different names
│ │ @@ -1,235 +1,157 @@
│ │  from __future__ import annotations
│ │ -from datetime import datetime, date
│ │ +
│ │ +from datetime import date, datetime
│ │  from enum import Enum
│ │ -from typing import List, Dict, Optional, Any, Union, Literal
│ │ -from pydantic import BaseModel as BaseModel, Field
│ │ -from linkml_runtime.linkml_model import Decimal
│ │ +from typing import Any, Dict, List, Optional
│ │ +
│ │ +from pydantic import BaseModel as BaseModel
│ │ +from pydantic import Field
│ │  
│ │  metamodel_version = "None"
│ │  version = "None"
│ │  
│ │ +
│ │  class WeakRefShimBaseModel(BaseModel):
│ │ -   __slots__ = '__weakref__'
│ │ -    
│ │ -class ConfiguredBaseModel(WeakRefShimBaseModel,
│ │ -                validate_assignment = True, 
│ │ -                validate_all = True, 
│ │ -                underscore_attrs_are_private = True, 
│ │ -                extra = 'forbid', 
│ │ -                arbitrary_types_allowed = True):
│ │ -    pass                    
│ │ -
│ │ -
│ │ -class NCITDrugType(str, Enum):
│ │ -    
│ │ -    
│ │ -    dummy = "dummy"
│ │ -    
│ │ -
│ │ -class NCITTreatmentType(str, Enum):
│ │ -    
│ │ -    
│ │ -    dummy = "dummy"
│ │ -    
│ │ -
│ │ -class NCITTActivityType(str, Enum):
│ │ -    
│ │ -    
│ │ -    dummy = "dummy"
│ │ -    
│ │ -
│ │ -class MAXOActionType(str, Enum):
│ │ -    
│ │ -    
│ │ -    dummy = "dummy"
│ │ -    
│ │ -
│ │ -class MESHTherapeuticType(str, Enum):
│ │ -    
│ │ -    
│ │ -    dummy = "dummy"
│ │ -    
│ │ -
│ │ -class CHEBIDrugType(str, Enum):
│ │ -    
│ │ -    
│ │ -    dummy = "dummy"
│ │ -    
│ │ -
│ │ -class DiseaseTreatmentSummary(ConfiguredBaseModel):
│ │ -    
│ │ -    disease: Optional[str] = Field(None, description="""the name of the disease that is treated""")
│ │ -    drugs: Optional[List[str]] = Field(default_factory=list, description="""semicolon-separated list of named small molecule drugs""")
│ │ -    treatments: Optional[List[str]] = Field(default_factory=list, description="""semicolon-separated list of therapies and treatments are indicated for treating the disease.""")
│ │ -    contraindications: Optional[List[str]] = Field(default_factory=list, description="""semicolon-separated list of therapies and treatments that are contra-indicated for the disease, and should not be used, due to risk of adverse effects.""")
│ │ -    treatment_mechanisms: Optional[List[TreatmentMechanism]] = Field(default_factory=list, description="""semicolon-separated list of treatment to asterisk-separated mechanism associations""")
│ │ -    treatment_efficacies: Optional[List[TreatmentEfficacy]] = Field(default_factory=list, description="""semicolon-separated list of treatment to efficacy associations, e.g. Imatinib*effective""")
│ │ -    treatment_adverse_effects: Optional[List[TreatmentAdverseEffect]] = Field(default_factory=list, description="""semicolon-separated list of treatment to adverse effect associations, e.g. Imatinib*nausea""")
│ │ -    
│ │ +    __slots__ = "__weakref__"
│ │ +
│ │ +
│ │ +class ConfiguredBaseModel(
│ │ +    WeakRefShimBaseModel,
│ │ +    validate_assignment=True,
│ │ +    validate_all=True,
│ │ +    underscore_attrs_are_private=True,
│ │ +    extra="forbid",
│ │ +    arbitrary_types_allowed=True,
│ │ +):
│ │ +    pass
│ │  
│ │  
│ │  class ExtractionResult(ConfiguredBaseModel):
│ │      """
│ │      A result of extracting knowledge on text
│ │      """
│ │ +
│ │      input_id: Optional[str] = Field(None)
│ │      input_title: Optional[str] = Field(None)
│ │      input_text: Optional[str] = Field(None)
│ │      raw_completion_output: Optional[str] = Field(None)
│ │      prompt: Optional[str] = Field(None)
│ │ -    extracted_object: Optional[Any] = Field(None, description="""The complex objects extracted from the text""")
│ │ -    named_entities: Optional[List[Any]] = Field(default_factory=list, description="""Named entities extracted from the text""")
│ │ -    
│ │ +    extracted_object: Optional[Any] = Field(
│ │ +        None, description="""The complex objects extracted from the text"""
│ │ +    )
│ │ +    named_entities: Optional[List[Any]] = Field(
│ │ +        default_factory=list, description="""Named entities extracted from the text"""
│ │ +    )
│ │  
│ │  
│ │  class NamedEntity(ConfiguredBaseModel):
│ │ -    
│ │ -    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ -    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │ -
│ │  
│ │ -class Gene(NamedEntity):
│ │ -    
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class Symptom(NamedEntity):
│ │ -    
│ │ -    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ -    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │ +class MetabolicProcess(NamedEntity):
│ │  
│ │ -
│ │ -class Disease(NamedEntity):
│ │ -    
│ │ +    label: Optional[str] = Field(None, description="""the name of the metabolic process""")
│ │ +    description: Optional[str] = Field(
│ │ +        None, description="""a textual description of the metabolic process"""
│ │ +    )
│ │ +    synonyms: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""alternative names of the metabolic process"""
│ │ +    )
│ │ +    subclass_of: Optional[List[str]] = Field(
│ │ +        default_factory=list,
│ │ +        description="""a semicolon separated list of broader metabolic processes which this is a subclass of""",
│ │ +    )
│ │ +    category: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""the category of metabolic process, e.g metabolic process, catabolic process, biosynthetic process, small molecule sensor activity""",
│ │ +    )
│ │ +    inputs: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""the inputs of the metabolic process"""
│ │ +    )
│ │ +    outputs: Optional[List[str]] = Field(
│ │ +        default_factory=list, description="""the outputs of the metabolic process"""
│ │ +    )
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ -    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class AdverseEffect(NamedEntity):
│ │ -    
│ │ -    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ -    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │ +class MetabolicProcessCategory(NamedEntity):
│ │  
│ │ -
│ │ -class Treatment(NamedEntity):
│ │ -    
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │ -class Mechanism(NamedEntity):
│ │ -    
│ │ -    id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │ -    label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │ -
│ │ +class ChemicalEntity(NamedEntity):
│ │  
│ │ -class Drug(NamedEntity):
│ │ -    
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class CompoundExpression(ConfiguredBaseModel):
│ │ -    
│ │ -    None
│ │ -    
│ │ -
│ │ -
│ │ -class TreatmentMechanism(CompoundExpression):
│ │ -    
│ │ -    treatment: Optional[str] = Field(None)
│ │ -    mechanism: Optional[str] = Field(None)
│ │ -    
│ │ -
│ │ -
│ │ -class TreatmentAdverseEffect(CompoundExpression):
│ │ -    
│ │ -    treatment: Optional[str] = Field(None)
│ │ -    adverse_effects: Optional[List[str]] = Field(default_factory=list)
│ │ -    
│ │ -
│ │  
│ │ -class TreatmentEfficacy(CompoundExpression):
│ │ -    
│ │ -    treatment: Optional[str] = Field(None)
│ │ -    efficacy: Optional[str] = Field(None)
│ │ -    
│ │ +    None
│ │  
│ │  
│ │  class Triple(CompoundExpression):
│ │      """
│ │      Abstract parent for Relation Extraction tasks
│ │      """
│ │ +
│ │      subject: Optional[str] = Field(None)
│ │      predicate: Optional[str] = Field(None)
│ │      object: Optional[str] = Field(None)
│ │ -    qualifier: Optional[str] = Field(None, description="""A qualifier for the statements, e.g. \"NOT\" for negation""")
│ │ -    subject_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the subject of the statement, e.g. \"high dose\" or \"intravenously administered\"""")
│ │ -    object_qualifier: Optional[str] = Field(None, description="""An optional qualifier or modifier for the object of the statement, e.g. \"severe\" or \"with additional complications\"""")
│ │ -    
│ │ +    qualifier: Optional[str] = Field(
│ │ +        None, description="""A qualifier for the statements, e.g. \"NOT\" for negation"""
│ │ +    )
│ │ +    subject_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the subject of the statement, e.g. \"high dose\" or \"intravenously administered\"""",
│ │ +    )
│ │ +    object_qualifier: Optional[str] = Field(
│ │ +        None,
│ │ +        description="""An optional qualifier or modifier for the object of the statement, e.g. \"severe\" or \"with additional complications\"""",
│ │ +    )
│ │  
│ │  
│ │  class TextWithTriples(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      publication: Optional[Publication] = Field(None)
│ │      triples: Optional[List[Triple]] = Field(default_factory=list)
│ │ -    
│ │  
│ │  
│ │  class RelationshipType(NamedEntity):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""A unique identifier for the named entity""")
│ │      label: Optional[str] = Field(None, description="""The label (name) of the named thing""")
│ │ -    
│ │  
│ │  
│ │  class Publication(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      id: Optional[str] = Field(None, description="""The publication identifier""")
│ │      title: Optional[str] = Field(None, description="""The title of the publication""")
│ │      abstract: Optional[str] = Field(None, description="""The abstract of the publication""")
│ │      combined_text: Optional[str] = Field(None)
│ │      full_text: Optional[str] = Field(None, description="""The full text of the publication""")
│ │ -    
│ │  
│ │  
│ │  class AnnotatorResult(ConfiguredBaseModel):
│ │ -    
│ │ +
│ │      subject_text: Optional[str] = Field(None)
│ │      object_id: Optional[str] = Field(None)
│ │      object_text: Optional[str] = Field(None)
│ │ -    
│ │ -
│ │  
│ │  
│ │  # Update forward refs
│ │  # see https://pydantic-docs.helpmanual.io/usage/postponed_annotations/
│ │ -DiseaseTreatmentSummary.update_forward_refs()
│ │  ExtractionResult.update_forward_refs()
│ │  NamedEntity.update_forward_refs()
│ │ -Gene.update_forward_refs()
│ │ -Symptom.update_forward_refs()
│ │ -Disease.update_forward_refs()
│ │ -AdverseEffect.update_forward_refs()
│ │ -Treatment.update_forward_refs()
│ │ -Mechanism.update_forward_refs()
│ │ -Drug.update_forward_refs()
│ │ +MetabolicProcess.update_forward_refs()
│ │ +MetabolicProcessCategory.update_forward_refs()
│ │ +ChemicalEntity.update_forward_refs()
│ │  CompoundExpression.update_forward_refs()
│ │ -TreatmentMechanism.update_forward_refs()
│ │ -TreatmentAdverseEffect.update_forward_refs()
│ │ -TreatmentEfficacy.update_forward_refs()
│ │  Triple.update_forward_refs()
│ │  TextWithTriples.update_forward_refs()
│ │  RelationshipType.update_forward_refs()
│ │  Publication.update_forward_refs()
│ │  AnnotatorResult.update_forward_refs()
│ │ -
│ │   --- ontogpt-0.2.0/src/ontogpt/templates/treatment.yaml
│ ├── +++ ontogpt-0.2.1/src/ontogpt/templates/treatment.yaml
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/webapp/html/form.html
│ ├── +++ ontogpt-0.2.1/src/ontogpt/webapp/html/form.html
│ │┄ Files identical despite different names
│ │   --- ontogpt-0.2.0/src/ontogpt/webapp/main.py
│ ├── +++ ontogpt-0.2.1/src/ontogpt/webapp/main.py
│ │┄ Files 4% similar despite different names
│ │ @@ -55,9 +55,9 @@
│ │      html_exporter.export(ann, output)
│ │      return templates.TemplateResponse(
│ │          "results.html", context={"request": request, "inner_html": output.getvalue()}
│ │      )
│ │  
│ │  
│ │  def start():
│ │ -    """Launched with `poetry run start` at root level"""
│ │ +    """Launched with `poetry run start` at root level."""
│ │      uvicorn.run("ontogpt.webapp.main:app", host="0.0.0.0", port=8000, reload=True)
│ │   --- ontogpt-0.2.0/PKG-INFO
│ ├── +++ ontogpt-0.2.1/PKG-INFO
│ │┄ Files 9% similar despite different names
│ │ @@ -1,55 +1,55 @@
│ │  Metadata-Version: 2.1
│ │  Name: ontogpt
│ │ -Version: 0.2.0
│ │ +Version: 0.2.1
│ │  Summary: OntoGPT
│ │  License: BSD-3
│ │  Author: Chris Mungall
│ │  Author-email: cjmungall@lbl.gov
│ │  Requires-Python: >=3.9,<4.0
│ │  Classifier: License :: Other/Proprietary License
│ │  Classifier: Programming Language :: Python :: 3
│ │  Classifier: Programming Language :: Python :: 3.9
│ │  Classifier: Programming Language :: Python :: 3.10
│ │  Classifier: Programming Language :: Python :: 3.11
│ │  Provides-Extra: docs
│ │ -Requires-Dist: Jinja2 (>=3.1.2,<4.0.0)
│ │ +Provides-Extra: recipes
│ │ +Provides-Extra: web
│ │ +Requires-Dist: Jinja2 (>=3.1.2,<4.0.0) ; extra == "web"
│ │  Requires-Dist: SQLAlchemy (>=1.4.32,<2.0.0,!=1.4.46)
│ │  Requires-Dist: aiohttp (>=3.8.4,<4.0.0)
│ │  Requires-Dist: airium (>=0.2.5,<0.3.0)
│ │  Requires-Dist: beautifulsoup4 (>=4.11.1,<5.0.0)
│ │  Requires-Dist: bioc (>=2.0.post5,<3.0)
│ │  Requires-Dist: class-resolver (>=0.3.10,<0.4.0)
│ │  Requires-Dist: click (>=8.1.3,<9.0.0)
│ │  Requires-Dist: eutils (>=0.6.0,<0.7.0)
│ │ -Requires-Dist: fastapi (>=0.88.0,<0.89.0)
│ │ +Requires-Dist: fastapi (>=0.88.0,<0.89.0) ; extra == "web"
│ │  Requires-Dist: gilda (>=0.10.3,<0.11.0)
│ │  Requires-Dist: greenlet (!=2.0.2)
│ │  Requires-Dist: httpx (>=0.23.3,<0.24.0)
│ │  Requires-Dist: importlib (>=1.0.4,<2.0.0)
│ │  Requires-Dist: inflect (>=6.0.2,<7.0.0)
│ │  Requires-Dist: inflection (>=0.5.1,<0.6.0)
│ │  Requires-Dist: jsonlines (>=3.1.0,<4.0.0)
│ │  Requires-Dist: linkml (>=1.4.10,<2.0.0)
│ │  Requires-Dist: linkml-owl (>=0.2.7,<0.3.0)
│ │  Requires-Dist: linkml-runtime (>=1.4.9,<2.0.0)
│ │ -Requires-Dist: mkdocs-mermaid2-plugin (>=0.6.0,<0.7.0)
│ │  Requires-Dist: myst-parser[docs] (>=0.18.1,<0.19.0) ; extra == "docs"
│ │  Requires-Dist: nlpcloud (>=1.0.39,<2.0.0)
│ │ -Requires-Dist: oaklib (>=0.1.64,<0.2.0)
│ │ +Requires-Dist: oaklib (>=0.3.1,<0.4.0)
│ │  Requires-Dist: openai (>=0.27.2,<0.28.0)
│ │  Requires-Dist: python-multipart (>=0.0.5,<0.0.6)
│ │ -Requires-Dist: setuptools (>=65.5.0,<66.0.0)
│ │ +Requires-Dist: recipe-scrapers[recipes] (>=14.35.0,<15.0.0) ; extra == "recipes"
│ │  Requires-Dist: sphinx-autodoc-typehints[docs] (>=1.19.4,<2.0.0) ; extra == "docs"
│ │  Requires-Dist: sphinx-click[docs] (>=4.3.0,<5.0.0) ; extra == "docs"
│ │  Requires-Dist: sphinx-rtd-theme[docs] (>=1.0.0,<2.0.0) ; extra == "docs"
│ │  Requires-Dist: sphinx[docs] (>=5.3.0,<6.0.0) ; extra == "docs"
│ │  Requires-Dist: tiktoken (>=0.1.1,<0.2.0)
│ │ -Requires-Dist: tox (>=3.25.1,<4.0.0)
│ │ -Requires-Dist: uvicorn (>=0.20.0,<0.21.0)
│ │ +Requires-Dist: uvicorn (>=0.20.0,<0.21.0) ; extra == "web"
│ │  Requires-Dist: wikipedia (>=1.4.0,<2.0.0)
│ │  Description-Content-Type: text/markdown
│ │  
│ │  # OntoGPT
│ │  
│ │  Generation of Ontologies and Knowledge Bases using GPT
