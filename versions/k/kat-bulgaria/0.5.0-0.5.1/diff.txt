--- tmp/kat_bulgaria-0.5.0.tar.gz
+++ tmp/kat_bulgaria-0.5.1.tar.gz
├── filetype from file(1)
│ @@ -1 +1 @@
│ -gzip compressed data, was "kat_bulgaria-0.5.0.tar", last modified: Thu Apr  6 10:52:38 2023, max compression
│ +gzip compressed data, was "kat_bulgaria-0.5.1.tar", last modified: Thu Apr  6 11:46:54 2023, max compression
│   --- kat_bulgaria-0.5.0.tar
├── +++ kat_bulgaria-0.5.1.tar
│ ├── file list
│ │ @@ -1,16 +1,16 @@
│ │ -drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 10:52:38.127091 kat_bulgaria-0.5.0/
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     4555 2023-04-06 10:52:38.127091 kat_bulgaria-0.5.0/PKG-INFO
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     4256 2023-04-06 10:52:25.000000 kat_bulgaria-0.5.0/README.md
│ │ -drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 10:52:38.123091 kat_bulgaria-0.5.0/kat_bulgaria/
│ │ --rw-r--r--   0 runner    (1001) docker     (123)       19 2023-04-06 10:52:25.000000 kat_bulgaria-0.5.0/kat_bulgaria/__init__.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     7060 2023-04-06 10:52:25.000000 kat_bulgaria-0.5.0/kat_bulgaria/obligations.py
│ │ -drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 10:52:38.127091 kat_bulgaria-0.5.0/kat_bulgaria.egg-info/
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     4555 2023-04-06 10:52:38.000000 kat_bulgaria-0.5.0/kat_bulgaria.egg-info/PKG-INFO
│ │ --rw-r--r--   0 runner    (1001) docker     (123)      276 2023-04-06 10:52:38.000000 kat_bulgaria-0.5.0/kat_bulgaria.egg-info/SOURCES.txt
│ │ --rw-r--r--   0 runner    (1001) docker     (123)        1 2023-04-06 10:52:38.000000 kat_bulgaria-0.5.0/kat_bulgaria.egg-info/dependency_links.txt
│ │ --rw-r--r--   0 runner    (1001) docker     (123)        6 2023-04-06 10:52:38.000000 kat_bulgaria-0.5.0/kat_bulgaria.egg-info/requires.txt
│ │ --rw-r--r--   0 runner    (1001) docker     (123)       13 2023-04-06 10:52:38.000000 kat_bulgaria-0.5.0/kat_bulgaria.egg-info/top_level.txt
│ │ --rw-r--r--   0 runner    (1001) docker     (123)       38 2023-04-06 10:52:38.127091 kat_bulgaria-0.5.0/setup.cfg
│ │ --rw-r--r--   0 runner    (1001) docker     (123)      692 2023-04-06 10:52:25.000000 kat_bulgaria-0.5.0/setup.py
│ │ -drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 10:52:38.127091 kat_bulgaria-0.5.0/tests/
│ │ --rw-r--r--   0 runner    (1001) docker     (123)       61 2023-04-06 10:52:25.000000 kat_bulgaria-0.5.0/tests/test_obligations.py
│ │ +drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 11:46:54.856852 kat_bulgaria-0.5.1/
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     4555 2023-04-06 11:46:54.856852 kat_bulgaria-0.5.1/PKG-INFO
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     4256 2023-04-06 11:46:43.000000 kat_bulgaria-0.5.1/README.md
│ │ +drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 11:46:54.852852 kat_bulgaria-0.5.1/kat_bulgaria/
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)       19 2023-04-06 11:46:43.000000 kat_bulgaria-0.5.1/kat_bulgaria/__init__.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     8110 2023-04-06 11:46:43.000000 kat_bulgaria-0.5.1/kat_bulgaria/obligations.py
│ │ +drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 11:46:54.852852 kat_bulgaria-0.5.1/kat_bulgaria.egg-info/
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     4555 2023-04-06 11:46:54.000000 kat_bulgaria-0.5.1/kat_bulgaria.egg-info/PKG-INFO
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)      276 2023-04-06 11:46:54.000000 kat_bulgaria-0.5.1/kat_bulgaria.egg-info/SOURCES.txt
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)        1 2023-04-06 11:46:54.000000 kat_bulgaria-0.5.1/kat_bulgaria.egg-info/dependency_links.txt
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)        6 2023-04-06 11:46:54.000000 kat_bulgaria-0.5.1/kat_bulgaria.egg-info/requires.txt
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)       13 2023-04-06 11:46:54.000000 kat_bulgaria-0.5.1/kat_bulgaria.egg-info/top_level.txt
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)       38 2023-04-06 11:46:54.856852 kat_bulgaria-0.5.1/setup.cfg
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)      692 2023-04-06 11:46:43.000000 kat_bulgaria-0.5.1/setup.py
│ │ +drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 11:46:54.856852 kat_bulgaria-0.5.1/tests/
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)       61 2023-04-06 11:46:43.000000 kat_bulgaria-0.5.1/tests/test_obligations.py
│ │   --- kat_bulgaria-0.5.0/PKG-INFO
│ ├── +++ kat_bulgaria-0.5.1/PKG-INFO
│ │┄ Files 2% similar despite different names
│ │ @@ -1,10 +1,10 @@
│ │  Metadata-Version: 2.1
│ │  Name: kat_bulgaria
│ │ -Version: 0.5.0
│ │ +Version: 0.5.1
│ │  Summary: A library to check for existing obligations to KAT Bulgaria
│ │  Home-page: https://github.com/Nedevski/py_kat_bulgaria
│ │  Author: Nikola Nedevski
│ │  Author-email: nikola.nedevski@gmail.com
│ │  License: MIT
│ │  Description-Content-Type: text/markdown
│ │   --- kat_bulgaria-0.5.0/README.md
│ ├── +++ kat_bulgaria-0.5.1/README.md
│ │┄ Files identical despite different names
│ │   --- kat_bulgaria-0.5.0/kat_bulgaria/obligations.py
│ ├── +++ kat_bulgaria-0.5.1/kat_bulgaria/obligations.py
│ │┄ Files 9% similar despite different names
│ │ @@ -1,10 +1,11 @@
│ │  """Obligations module"""
│ │  
│ │  from dataclasses import dataclass
│ │ +from enum import Enum
│ │  from typing import Generic, TypeVar
│ │  
│ │  import re
│ │  import httpx
│ │  
│ │  
│ │  _REQUEST_TIMEOUT = 5
│ │ @@ -59,51 +60,73 @@
│ │                          "person_name": obligation["obligedPersonName"],
│ │                          "person_identifier": obligation["obligedPersonIdent"],
│ │                          "discount": obligation["additionalData"]["discount"],
│ │                      }
│ │                  )
│ │  
│ │  
│ │ +class KatErrorType(Enum):
│ │ +    """Different KAT api error types"""
│ │ +
│ │ +    VALIDATION_ERROR = 1
│ │ +    API_UNAVAILABLE = 2
│ │ +    TIMEOUT = 3
│ │ +
│ │ +
│ │  @dataclass
│ │  class _WebResponse:
│ │      """Wrapper for the HTTP response"""
│ │  
│ │ -    success: bool
│ │ -    error_message: str
│ │      raw_data: any
│ │ +    error_message: str
│ │ +    error_type: KatErrorType
│ │ +    success: bool
│ │  
│ │ -    def __init__(self, raw_data: any, error_message: str = None):
│ │ +    def __init__(
│ │ +        self,
│ │ +        raw_data: any,
│ │ +        error_message: str = None,
│ │ +        error_type: KatErrorType = None,
│ │ +    ):
│ │          self.raw_data = raw_data
│ │          self.error_message = error_message
│ │ +        self.error_type = None
│ │  
│ │          if error_message is None:
│ │              self.success = True
│ │          else:
│ │              self.success = False
│ │  
│ │ +        if error_type is not None:
│ │ +            self.error_type: error_type
│ │ +
│ │  
│ │  T = TypeVar("T", KatObligationsResponse, KatObligationsSimpleResponse, bool)
│ │  
│ │  
│ │  @dataclass
│ │  class KatApiResponse(Generic[T]):
│ │      """Wrapper for different responses"""
│ │  
│ │      success: bool
│ │      error_message: str
│ │ +    error_type: KatErrorType
│ │      data: T
│ │  
│ │ -    def __init__(self, data: T = None, error_message: str = None):
│ │ +    def __init__(
│ │ +        self, data: T = None, error_message: str = None, error_type: KatErrorType = None
│ │ +    ):
│ │          self.success = True
│ │  
│ │          if error_message is not None:
│ │              self.success = False
│ │  
│ │          self.data = data
│ │          self.error_message = error_message
│ │ +        self.error_type = error_type
│ │  
│ │  
│ │  class KatError(Exception):
│ │      """Error wrapper"""
│ │  
│ │      def __init__(self, *args: object) -> None:
│ │          super().__init__(*args)
│ │ @@ -117,47 +140,59 @@
│ │  
│ │      async def async_verify_credentials(
│ │          self, egn: str, license_number: str
│ │      ) -> KatApiResponse[bool]:
│ │          """Confirm that the credentials are correct."""
│ │  
│ │          if egn is None:
│ │ -            return KatApiResponse(False, f"{_ERR_PREFIX} EGN Missing")
│ │ +            return KatApiResponse(
│ │ +                False,
│ │ +                f"{_ERR_PREFIX} EGN is missing or emtpy",
│ │ +                KatErrorType.VALIDATION_ERROR,
│ │ +            )
│ │          else:
│ │              egn_match = re.search(REGEX_EGN, egn)
│ │              if egn_match is None:
│ │ -                return KatApiResponse(False, f"{_ERR_PREFIX} EGN is not valid")
│ │ +                return KatApiResponse(
│ │ +                    False,
│ │ +                    f"{_ERR_PREFIX} EGN is not valid",
│ │ +                    KatErrorType.VALIDATION_ERROR,
│ │ +                )
│ │  
│ │          if license_number is None:
│ │              return KatApiResponse(
│ │ -                False, f"{_ERR_PREFIX} Driving License Number missing"
│ │ +                False,
│ │ +                f"{_ERR_PREFIX} Driving License Number missing",
│ │ +                KatErrorType.VALIDATION_ERROR,
│ │              )
│ │          else:
│ │              license_match = re.search(REGEX_DRIVING_LICENSE, license_number)
│ │              if license_match is None:
│ │                  return KatApiResponse(
│ │ -                    False, f"{_ERR_PREFIX} Driving License Number not valid"
│ │ +                    False,
│ │ +                    f"{_ERR_PREFIX} Driving License Number not valid",
│ │ +                    KatErrorType.VALIDATION_ERROR,
│ │                  )
│ │  
│ │          res = await self.__get_obligations_request(egn, license_number)
│ │  
│ │ -        return KatApiResponse(res.success, res.error_message)
│ │ +        return KatApiResponse(res.success, res.error_message, res.error_type)
│ │  
│ │      async def async_check_obligations(
│ │          self, egn: str, license_number: str
│ │      ) -> KatApiResponse[bool]:
│ │          """Check if the person has obligations"""
│ │  
│ │          res = await self.__get_obligations_request(egn, license_number)
│ │  
│ │          if res.success:
│ │              has_obligations = KatObligationsSimpleResponse(res.raw_data).has_obligations
│ │              return KatApiResponse(has_obligations)
│ │          else:
│ │ -            return KatApiResponse(None, res.error_message)
│ │ +            return KatApiResponse(None, res.error_message, res.error_type)
│ │  
│ │      async def async_get_obligations(
│ │          self, egn: str, license_number: str
│ │      ) -> KatApiResponse[KatObligationsResponse]:
│ │          """Get all obligations"""
│ │  
│ │          res = await self.__get_obligations_request(egn, license_number)
│ │ @@ -183,32 +218,37 @@
│ │              async with httpx.AsyncClient() as client:
│ │                  resp = await client.get(url, timeout=_REQUEST_TIMEOUT)
│ │                  data = resp.json()
│ │                  resp.raise_for_status()
│ │  
│ │          except httpx.TimeoutException:
│ │              return _WebResponse(
│ │ -                None, f"{_ERR_PREFIX_API} Request timed out for {license_number}"
│ │ +                None,
│ │ +                f"{_ERR_PREFIX_API} Request timed out for {license_number}",
│ │ +                KatErrorType.TIMEOUT,
│ │              )
│ │  
│ │          except httpx.HTTPError as ex:
│ │              if "code" in data:
│ │                  # code = GL_00038_E
│ │                  # Invalid user data (EGN or License Number)
│ │                  if data["code"] == "GL_00038_E":
│ │                      return _WebResponse(
│ │                          data,
│ │                          f"{_ERR_PREFIX_API} EGN or Driving License Number was not valid",
│ │ +                        KatErrorType.VALIDATION_ERROR,
│ │                      )
│ │  
│ │                  # code = GL_UNDELIVERED_AND_UNPAID_DEBTS_E
│ │                  # This means the KAT website died for a bit
│ │                  if data["code"] == "GL_00038_E":
│ │                      return _WebResponse(
│ │ -                        data, f"{_ERR_PREFIX_API} Website is down temporarily. :("
│ │ +                        data,
│ │ +                        f"{_ERR_PREFIX_API} Website is down temporarily. :(",
│ │ +                        KatErrorType.API_UNAVAILABLE,
│ │                      )
│ │  
│ │              else:
│ │                  # If the response is 400 and there is no "code", probably they changed the schema
│ │                  raise KatError(
│ │                      f"{_ERR_PREFIX_API} Website returned an unknown error: {str(ex)}"
│ │                  ) from ex
│ │   --- kat_bulgaria-0.5.0/kat_bulgaria.egg-info/PKG-INFO
│ ├── +++ kat_bulgaria-0.5.1/kat_bulgaria.egg-info/PKG-INFO
│ │┄ Files 2% similar despite different names
│ │ @@ -1,10 +1,10 @@
│ │  Metadata-Version: 2.1
│ │  Name: kat-bulgaria
│ │ -Version: 0.5.0
│ │ +Version: 0.5.1
│ │  Summary: A library to check for existing obligations to KAT Bulgaria
│ │  Home-page: https://github.com/Nedevski/py_kat_bulgaria
│ │  Author: Nikola Nedevski
│ │  Author-email: nikola.nedevski@gmail.com
│ │  License: MIT
│ │  Description-Content-Type: text/markdown
│ │   --- kat_bulgaria-0.5.0/setup.py
│ ├── +++ kat_bulgaria-0.5.1/setup.py
│ │┄ Files 1% similar despite different names
│ │ @@ -3,15 +3,15 @@
│ │  from pathlib import Path
│ │  from setuptools import find_packages, setup
│ │  
│ │  long_description = Path("README.md").read_text()
│ │  
│ │  setup(
│ │      name="kat_bulgaria",
│ │ -    version="0.5.0",
│ │ +    version="0.5.1",
│ │      description="A library to check for existing obligations to KAT Bulgaria",
│ │      long_description=long_description,
│ │      long_description_content_type="text/markdown",
│ │      url="https://github.com/Nedevski/py_kat_bulgaria",
│ │      author="Nikola Nedevski",
│ │      author_email="nikola.nedevski@gmail.com",
│ │      license="MIT",
