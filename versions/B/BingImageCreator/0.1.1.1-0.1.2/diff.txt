--- tmp/BingImageCreator-0.1.1.1.tar.gz
+++ tmp/BingImageCreator-0.1.2.tar.gz
├── filetype from file(1)
│ @@ -1 +1 @@
│ -gzip compressed data, was "BingImageCreator-0.1.1.1.tar", last modified: Wed Apr  5 01:17:27 2023, max compression
│ +gzip compressed data, was "BingImageCreator-0.1.2.tar", last modified: Thu Apr  6 12:27:04 2023, max compression
│   --- BingImageCreator-0.1.1.1.tar
├── +++ BingImageCreator-0.1.2.tar
│ ├── file list
│ │ @@ -1,14 +1,14 @@
│ │ -drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-05 01:17:27.000585 BingImageCreator-0.1.1.1/
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     1211 2023-04-05 01:16:59.000000 BingImageCreator-0.1.1.1/LICENSE
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     1983 2023-04-05 01:17:27.000585 BingImageCreator-0.1.1.1/PKG-INFO
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     1142 2023-04-05 01:16:59.000000 BingImageCreator-0.1.1.1/README.md
│ │ --rw-r--r--   0 runner    (1001) docker     (123)       38 2023-04-05 01:17:27.000585 BingImageCreator-0.1.1.1/setup.cfg
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     1200 2023-04-05 01:16:59.000000 BingImageCreator-0.1.1.1/setup.py
│ │ -drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-05 01:17:27.000585 BingImageCreator-0.1.1.1/src/
│ │ -drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-05 01:17:27.000585 BingImageCreator-0.1.1.1/src/BingImageCreator.egg-info/
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     1983 2023-04-05 01:17:26.000000 BingImageCreator-0.1.1.1/src/BingImageCreator.egg-info/PKG-INFO
│ │ --rw-r--r--   0 runner    (1001) docker     (123)      269 2023-04-05 01:17:26.000000 BingImageCreator-0.1.1.1/src/BingImageCreator.egg-info/SOURCES.txt
│ │ --rw-r--r--   0 runner    (1001) docker     (123)        1 2023-04-05 01:17:26.000000 BingImageCreator-0.1.1.1/src/BingImageCreator.egg-info/dependency_links.txt
│ │ --rw-r--r--   0 runner    (1001) docker     (123)       15 2023-04-05 01:17:26.000000 BingImageCreator-0.1.1.1/src/BingImageCreator.egg-info/requires.txt
│ │ --rw-r--r--   0 runner    (1001) docker     (123)       17 2023-04-05 01:17:26.000000 BingImageCreator-0.1.1.1/src/BingImageCreator.egg-info/top_level.txt
│ │ --rw-r--r--   0 runner    (1001) docker     (123)    12520 2023-04-05 01:16:59.000000 BingImageCreator-0.1.1.1/src/BingImageCreator.py
│ │ +drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 12:27:04.993106 BingImageCreator-0.1.2/
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     1211 2023-04-06 12:26:38.000000 BingImageCreator-0.1.2/LICENSE
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     1981 2023-04-06 12:27:04.993106 BingImageCreator-0.1.2/PKG-INFO
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     1142 2023-04-06 12:26:38.000000 BingImageCreator-0.1.2/README.md
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)       38 2023-04-06 12:27:04.993106 BingImageCreator-0.1.2/setup.cfg
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     1198 2023-04-06 12:26:38.000000 BingImageCreator-0.1.2/setup.py
│ │ +drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 12:27:04.993106 BingImageCreator-0.1.2/src/
│ │ +drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 12:27:04.993106 BingImageCreator-0.1.2/src/BingImageCreator.egg-info/
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     1981 2023-04-06 12:27:04.000000 BingImageCreator-0.1.2/src/BingImageCreator.egg-info/PKG-INFO
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)      269 2023-04-06 12:27:04.000000 BingImageCreator-0.1.2/src/BingImageCreator.egg-info/SOURCES.txt
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)        1 2023-04-06 12:27:04.000000 BingImageCreator-0.1.2/src/BingImageCreator.egg-info/dependency_links.txt
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)       15 2023-04-06 12:27:04.000000 BingImageCreator-0.1.2/src/BingImageCreator.egg-info/requires.txt
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)       17 2023-04-06 12:27:04.000000 BingImageCreator-0.1.2/src/BingImageCreator.egg-info/top_level.txt
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)    13883 2023-04-06 12:26:38.000000 BingImageCreator-0.1.2/src/BingImageCreator.py
│ │   --- BingImageCreator-0.1.1.1/LICENSE
│ ├── +++ BingImageCreator-0.1.2/LICENSE
│ │┄ Files identical despite different names
│ │   --- BingImageCreator-0.1.1.1/PKG-INFO
│ ├── +++ BingImageCreator-0.1.2/PKG-INFO
│ │┄ Files 0% similar despite different names
│ │ @@ -1,10 +1,10 @@
│ │  Metadata-Version: 2.1
│ │  Name: BingImageCreator
│ │ -Version: 0.1.1.1
│ │ +Version: 0.1.2
│ │  Summary: High quality image generation by Microsoft. Reverse engineered API.
│ │  Home-page: https://github.com/acheong08/BingImageCreator
│ │  Author: Antonio Cheong
│ │  Author-email: acheong@student.dalat.org
│ │  License: GNU General Public License v2.0
│ │  Project-URL: Bug Report, https://github.com/acheong08/BingImageCreator/issues/new
│ │  Classifier: License :: OSI Approved :: GNU General Public License v2 (GPLv2)
│ │   --- BingImageCreator-0.1.1.1/README.md
│ ├── +++ BingImageCreator-0.1.2/README.md
│ │┄ Files identical despite different names
│ │   --- BingImageCreator-0.1.1.1/setup.py
│ ├── +++ BingImageCreator-0.1.2/setup.py
│ │┄ Files 8% similar despite different names
│ │ @@ -1,13 +1,13 @@
│ │  from setuptools import find_packages
│ │  from setuptools import setup
│ │  
│ │  setup(
│ │      name="BingImageCreator",
│ │ -    version="0.1.1.1",
│ │ +    version="0.1.2",
│ │      license="GNU General Public License v2.0",
│ │      author="Antonio Cheong",
│ │      author_email="acheong@student.dalat.org",
│ │      description="High quality image generation by Microsoft. Reverse engineered API.",
│ │      packages=find_packages("src"),
│ │      package_dir={"": "src"},
│ │      url="https://github.com/acheong08/BingImageCreator",
│ │   --- BingImageCreator-0.1.1.1/src/BingImageCreator.egg-info/PKG-INFO
│ ├── +++ BingImageCreator-0.1.2/src/BingImageCreator.egg-info/PKG-INFO
│ │┄ Files 0% similar despite different names
│ │ @@ -1,10 +1,10 @@
│ │  Metadata-Version: 2.1
│ │  Name: BingImageCreator
│ │ -Version: 0.1.1.1
│ │ +Version: 0.1.2
│ │  Summary: High quality image generation by Microsoft. Reverse engineered API.
│ │  Home-page: https://github.com/acheong08/BingImageCreator
│ │  Author: Antonio Cheong
│ │  Author-email: acheong@student.dalat.org
│ │  License: GNU General Public License v2.0
│ │  Project-URL: Bug Report, https://github.com/acheong08/BingImageCreator/issues/new
│ │  Classifier: License :: OSI Approved :: GNU General Public License v2 (GPLv2)
│ │   --- BingImageCreator-0.1.1.1/src/BingImageCreator.py
│ ├── +++ BingImageCreator-0.1.2/src/BingImageCreator.py
│ │┄ Files 9% similar despite different names
│ │ @@ -2,15 +2,14 @@
│ │  import asyncio
│ │  import contextlib
│ │  import json
│ │  import os
│ │  import random
│ │  import sys
│ │  import time
│ │ -
│ │  import aiohttp
│ │  import pkg_resources
│ │  import regex
│ │  import requests
│ │  
│ │  BING_URL = "https://www.bing.com"
│ │  # Generate random IP between range 13.104.0.0/14
│ │ @@ -24,109 +23,141 @@
│ │      "content-type": "application/x-www-form-urlencoded",
│ │      "referrer": "https://www.bing.com/images/create/",
│ │      "origin": "https://www.bing.com",
│ │      "user-agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.63",
│ │      "x-forwarded-for": FORWARDED_IP,
│ │  }
│ │  
│ │ +# Error messages
│ │ +error_timeout = "Your request has timed out."
│ │ +error_redirect = "Redirect failed"
│ │ +error_blocked_prompt = (
│ │ +    "Your prompt has been blocked by Bing. Try to change any bad words and try again."
│ │ +)
│ │ +error_noresults = "Could not get results"
│ │ +error_unsupported_lang = "\nthis language is currently not supported by bing"
│ │ +error_bad_images = "Bad images"
│ │ +error_no_images = "No images"
│ │ +#
│ │ +sending_message = "Sending request..."
│ │ +wait_message = "Waiting for results..."
│ │ +download_message = "\nDownloading images..."
│ │ +
│ │  
│ │  class ImageGen:
│ │      """
│ │      Image generation by Microsoft Bing
│ │      Parameters:3
│ │          auth_cookie: str
│ │      """
│ │  
│ │ -    def __init__(self, auth_cookie: str, quiet: bool = False) -> None:
│ │ +    def __init__(
│ │ +        self, auth_cookie: str, debug, debug_file: bool, quiet: bool = False
│ │ +    ) -> None:
│ │          self.session: requests.Session = requests.Session()
│ │          self.session.headers = HEADERS
│ │          self.session.cookies.set("_U", auth_cookie)
│ │          self.quiet = quiet
│ │ +        self.debug_file = debug_file
│ │ +        self.debug = debug
│ │  
│ │      def get_images(self, prompt: str) -> list:
│ │          """
│ │          Fetches image links from Bing
│ │          Parameters:
│ │              prompt: str
│ │          """
│ │          if not self.quiet:
│ │ -            print("Sending request...")
│ │ +            print(sending_message)
│ │ +        if self.debug_file:
│ │ +            self.debug(sending_message)
│ │          url_encoded_prompt = requests.utils.quote(prompt)
│ │          # https://www.bing.com/images/create?q=<PROMPT>&rt=3&FORM=GENCRE
│ │          url = f"{BING_URL}/images/create?q={url_encoded_prompt}&rt=4&FORM=GENCRE"
│ │          response = self.session.post(url, allow_redirects=False)
│ │          # check for content waring message
│ │          if "this prompt has been blocked" in response.text.lower():
│ │ +            if self.debug_file:
│ │ +                self.debug(f"ERROR: {error_blocked_prompt}")
│ │              raise Exception(
│ │ -                "Your prompt has been blocked by Bing. Try to change any bad words and try again.",
│ │ +                error_blocked_prompt,
│ │              )
│ │          if (
│ │              "we're working hard to offer image creator in more languages"
│ │              in response.text.lower()
│ │          ):
│ │ -            raise Exception("this language is currently not supported by bing")
│ │ +            if self.debug_file:
│ │ +                self.debug(f"ERROR: {error_unsupported_lang}")
│ │ +            raise Exception(error_unsupported_lang)
│ │          if response.status_code != 302:
│ │              # if rt4 fails, try rt3
│ │              url = f"{BING_URL}/images/create?q={url_encoded_prompt}&rt=3&FORM=GENCRE"
│ │              response3 = self.session.post(url, allow_redirects=False, timeout=200)
│ │              if response3.status_code != 302:
│ │ +                if self.debug_file:
│ │ +                    self.debug(f"ERROR: {error_redirect}")
│ │                  print(f"ERROR: {response3.text}")
│ │ -                raise Exception(
│ │ -                    "Redirect failed, also possible that this prompt isn't allowed",
│ │ -                )
│ │ +                raise Exception(error_redirect)
│ │              response = response3
│ │          # Get redirect URL
│ │          redirect_url = response.headers["Location"].replace("&nfy=1", "")
│ │          request_id = redirect_url.split("id=")[-1]
│ │          self.session.get(f"{BING_URL}{redirect_url}")
│ │          # https://www.bing.com/images/create/async/results/{ID}?q={PROMPT}
│ │          polling_url = f"{BING_URL}/images/create/async/results/{request_id}?q={url_encoded_prompt}"
│ │          # Poll for results
│ │ +        if self.debug_file:
│ │ +            self.debug()
│ │          if not self.quiet:
│ │              print("Waiting for results...")
│ │          start_wait = time.time()
│ │          while True:
│ │              if int(time.time() - start_wait) > 200:
│ │ -                raise Exception("Timeout error")
│ │ +                if self.debug_file:
│ │ +                    self.debug(f"ERROR: {error_timeout}")
│ │ +                raise Exception(error_timeout)
│ │              if not self.quiet:
│ │                  print(".", end="", flush=True)
│ │              response = self.session.get(polling_url)
│ │              if response.status_code != 200:
│ │ -                raise Exception("Could not get results")
│ │ +                if self.debug_file:
│ │ +                    self.debug(f"ERROR: {error_noresults}")
│ │ +                raise Exception(error_noresults)
│ │              if not response.text or response.text.find("errorMessage") != -1:
│ │                  time.sleep(1)
│ │                  continue
│ │              else:
│ │                  break
│ │          # Use regex to search for src=""
│ │          image_links = regex.findall(r'src="([^"]+)"', response.text)
│ │          # Remove size limit
│ │          normal_image_links = [link.split("?w=")[0] for link in image_links]
│ │          # Remove duplicates
│ │          normal_image_links = list(set(normal_image_links))
│ │  
│ │ -        # Bad images
│ │ -        bad_images = [
│ │ -            "https://r.bing.com/rp/in-2zU3AJUdkgFe7ZKv19yPBHVs.png",
│ │ -            "https://r.bing.com/rp/TX9QuO3WzcCJz1uaaSwQAz39Kb0.jpg",
│ │ -        ]
│ │ -        for img in normal_image_links:
│ │ -            if img in bad_images:
│ │ -                raise Exception("Bad images")
│ │ +        # bad_images = [
│ │ +        #     "https://r.bing.com/rp/in-2zU3AJUdkgFe7ZKv19yPBHVs.png",
│ │ +        #     "https://r.bing.com/rp/TX9QuO3WzcCJz1uaaSwQAz39Kb0.jpg",
│ │ +        # ]
│ │ +        # for img in normal_image_links:
│ │ +        #     if img in bad_images:
│ │ +        #         raise Exception("Bad images")
│ │          # No images
│ │          if not normal_image_links:
│ │ -            raise Exception("No images")
│ │ +            raise Exception(error_no_images)
│ │          return normal_image_links
│ │  
│ │      def save_images(self, links: list, output_dir: str) -> None:
│ │          """
│ │          Saves images to output directory
│ │          """
│ │ +        if self.debug_file:
│ │ +            self.debug(download_message)
│ │          if not self.quiet:
│ │ -            print("\nDownloading images...")
│ │ +            print(download_message)
│ │          with contextlib.suppress(FileExistsError):
│ │              os.mkdir(output_dir)
│ │          try:
│ │              jpeg_index = 0
│ │              for link in links:
│ │                  while os.path.exists(os.path.join(output_dir, f"{jpeg_index}.jpeg")):
│ │                      jpeg_index += 1
│ │ @@ -247,15 +278,14 @@
│ │          with contextlib.suppress(FileExistsError):
│ │              os.mkdir(output_dir)
│ │          try:
│ │              jpeg_index = 0
│ │              for link in links:
│ │                  while os.path.exists(os.path.join(output_dir, f"{jpeg_index}.jpeg")):
│ │                      jpeg_index += 1
│ │ -            for link in links:
│ │                  async with self.session.get(link, raise_for_status=True) as response:
│ │                      # save response to file
│ │                      with open(
│ │                          os.path.join(output_dir, f"{jpeg_index}.jpeg"), "wb"
│ │                      ) as output_file:
│ │                          async for chunk in response.content.iter_chunked(8192):
│ │                              output_file.write(chunk)
│ │ @@ -284,14 +314,21 @@
│ │  
│ │      parser.add_argument(
│ │          "--output-dir",
│ │          help="Output directory",
│ │          type=str,
│ │          default="./output",
│ │      )
│ │ +
│ │ +    parser.add_argument(
│ │ +        "--debug-file",
│ │ +        help="Path to the file where debug information will be written.",
│ │ +        type=str,
│ │ +    )
│ │ +
│ │      parser.add_argument(
│ │          "--quiet",
│ │          help="Disable pipeline messages",
│ │          action="store_true",
│ │      )
│ │      parser.add_argument(
│ │          "--asyncio",
│ │ @@ -299,16 +336,21 @@
│ │          action="store_true",
│ │      )
│ │      parser.add_argument(
│ │          "--version",
│ │          action="store_true",
│ │          help="Print the version number",
│ │      )
│ │ +
│ │      args = parser.parse_args()
│ │  
│ │ +    def debugfile(text_var):
│ │ +        with open(f"{args.debug_file}", "a") as f:
│ │ +            f.write(str(text_var))
│ │ +
│ │      if args.version:
│ │          print(pkg_resources.get_distribution("BingImageCreator").version)
│ │          sys.exit()
│ │  
│ │      # Load auth cookie
│ │      with contextlib.suppress(Exception):
│ │          with open(args.cookie_file, encoding="utf-8") as file:
│ │ @@ -317,17 +359,19 @@
│ │                  if cookie.get("name") == "_U":
│ │                      args.U = cookie.get("value")
│ │                      break
│ │  
│ │      if args.U is None and args.cookie_file is None:
│ │          raise Exception("Could not find auth cookie")
│ │  
│ │ +    debug = debugfile
│ │ +
│ │      if not args.asyncio:
│ │          # Create image generator
│ │ -        image_generator = ImageGen(args.U, args.quiet)
│ │ +        image_generator = ImageGen(args.U, debug, args.debug_file, args.quiet)
│ │          image_generator.save_images(
│ │              image_generator.get_images(args.prompt),
│ │              output_dir=args.output_dir,
│ │          )
│ │      else:
│ │          asyncio.run(async_image_gen(args))
