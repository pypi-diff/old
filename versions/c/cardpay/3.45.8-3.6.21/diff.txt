--- tmp/cardpay-3.45.8.tar.gz
+++ tmp/cardpay-3.6.21.tar.gz
├── filetype from file(1)
│ @@ -1 +1 @@
│ -gzip compressed data, was "dist/cardpay-3.45.8.tar", last modified: Fri Apr  7 13:39:10 2023, max compression
│ +gzip compressed data, was "dist/cardpay-3.6.21.tar", last modified: Wed Sep  8 06:58:29 2021, max compression
│   --- cardpay-3.45.8.tar
├── +++ cardpay-3.6.21.tar
│ ├── file list
│ │ @@ -1,204 +1,209 @@
│ │ -drwxr-xr-x   0 root         (0) root         (0)        0 2023-04-07 13:39:10.000000 cardpay-3.45.8/
│ │ -drwxr-xr-x   0 root         (0) root         (0)        0 2023-04-07 13:39:10.000000 cardpay-3.45.8/cardpay/
│ │ -drwxr-xr-x   0 root         (0) root         (0)        0 2023-04-07 13:39:10.000000 cardpay-3.45.8/cardpay/api/
│ │ --rw-r--r--   0 root         (0) root         (0)       55 2023-04-07 09:06:26.000000 cardpay-3.45.8/cardpay/api/__init__.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5123 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/api/auth_api.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4229 2023-04-07 09:06:31.000000 cardpay-3.45.8/cardpay/api/card_info_api.py
│ │ --rw-r--r--   0 root         (0) root         (0)     7167 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/api/invoices_api.py
│ │ --rw-r--r--   0 root         (0) root         (0)     3585 2023-04-07 09:06:31.000000 cardpay-3.45.8/cardpay/api/limits_api.py
│ │ --rw-r--r--   0 root         (0) root         (0)    37159 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/api/payments_api.py
│ │ --rw-r--r--   0 root         (0) root         (0)    18944 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/api/payouts_api.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4285 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/api/pix_account_details_api.py
│ │ --rw-r--r--   0 root         (0) root         (0)    66001 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/api/recurrings_api.py
│ │ --rw-r--r--   0 root         (0) root         (0)    18934 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/api/refunds_api.py
│ │ --rw-r--r--   0 root         (0) root         (0)     9284 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/api/reports_api_controller_api.py
│ │ -drwxr-xr-x   0 root         (0) root         (0)        0 2023-04-07 13:39:10.000000 cardpay-3.45.8/cardpay/model/
│ │ --rw-r--r--   0 root         (0) root         (0)       55 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/model/__init__.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5372 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/model/api_error.py
│ │ --rw-r--r--   0 root         (0) root         (0)     7379 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/model/api_tokens.py
│ │ --rw-r--r--   0 root         (0) root         (0)    11735 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/model/authentication_customer.py
│ │ --rw-r--r--   0 root         (0) root         (0)    12661 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/model/authentication_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     8431 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/model/authentication_data_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5002 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/model/authentication_error.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5713 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/model/bad_request_error.py
│ │ --rw-r--r--   0 root         (0) root         (0)    13723 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/model/bank_card_payout_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)    11530 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/model/billing_address.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4303 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/model/card_info_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)     6868 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/model/card_info_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     9342 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/model/change_subscription_status_claim_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)    10169 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/model/changed_plan_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5337 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/model/claim_response_subscription_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4781 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/model/confirm3ds_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4565 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/dispute_list.py
│ │ --rw-r--r--   0 root         (0) root         (0)     8018 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/dispute_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4637 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/dispute_response_card.py
│ │ --rw-r--r--   0 root         (0) root         (0)     3846 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/dispute_response_card_account.py
│ │ --rw-r--r--   0 root         (0) root         (0)     3710 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/dispute_response_customer.py
│ │ --rw-r--r--   0 root         (0) root         (0)    11765 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/dispute_response_dispute_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4529 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/dispute_response_merchant_order.py
│ │ --rw-r--r--   0 root         (0) root         (0)     8064 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/dispute_response_payment_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     7543 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/ewallet_account.py
│ │ --rw-r--r--   0 root         (0) root         (0)    10758 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/filing_recurring_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)    12222 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/filing_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)     7186 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/filing_request_merchant_order.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4259 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/filing_request_subscription_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)    13315 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/filter_parameters.py
│ │ --rw-r--r--   0 root         (0) root         (0)    10996 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/flight.py
│ │ --rw-r--r--   0 root         (0) root         (0)    17117 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/flights.py
│ │ --rw-r--r--   0 root         (0) root         (0)    17691 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/installment_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     3692 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/invoice_creation_data_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4890 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/invoice_creation_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4353 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/invoice_customer.py
│ │ --rw-r--r--   0 root         (0) root         (0)     7646 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/invoice_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     7324 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/invoice_get_data_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     7069 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/invoice_get_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     6504 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/invoice_item.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5102 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/invoice_merchant_order.py
│ │ --rw-r--r--   0 root         (0) root         (0)     8044 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/invoice_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)     7184 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/item.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4089 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/limit_info_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     3862 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/next_subscription_payment.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5681 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/not_found_error.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4765 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/model/o_auth_error.py
│ │ --rw-r--r--   0 root         (0) root         (0)    18637 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/oneclick_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)    11888 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_callback.py
│ │ --rw-r--r--   0 root         (0) root         (0)     7449 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_confirm3ds_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)     6428 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_execute_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5049 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_gateway_creation_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     6196 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_gateway_response_payment_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     6693 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_methods_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     6143 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_patch_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)    14704 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)     9784 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_request_card.py
│ │ --rw-r--r--   0 root         (0) root         (0)    10526 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_request_card_account.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4555 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_request_cryptocurrency_account.py
│ │ --rw-r--r--   0 root         (0) root         (0)    21414 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_request_customer.py
│ │ --rw-r--r--   0 root         (0) root         (0)     9885 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_request_e_wallet_account.py
│ │ --rw-r--r--   0 root         (0) root         (0)     8837 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_request_living_address.py
│ │ --rw-r--r--   0 root         (0) root         (0)     9818 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_request_merchant_order.py
│ │ --rw-r--r--   0 root         (0) root         (0)    21751 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_request_payment_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     7973 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)    12115 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_response_card_account.py
│ │ --rw-r--r--   0 root         (0) root         (0)     7192 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_response_cryptocurrency_account.py
│ │ --rw-r--r--   0 root         (0) root         (0)    13026 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_response_customer.py
│ │ --rw-r--r--   0 root         (0) root         (0)    20925 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_response_payment_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     6432 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_update_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)     6428 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_update_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5410 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payment_update_transaction_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4577 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payments_list.py
│ │ --rw-r--r--   0 root         (0) root         (0)    12413 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payout_callback.py
│ │ --rw-r--r--   0 root         (0) root         (0)     3005 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payout_creation_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4248 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payout_payment_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)    13066 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payout_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5485 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payout_request_card.py
│ │ --rw-r--r--   0 root         (0) root         (0)     7928 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payout_request_card_account.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4549 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payout_request_cryptocurrency_account.py
│ │ --rw-r--r--   0 root         (0) root         (0)    16162 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/payout_request_customer.py
│ │ --rw-r--r--   0 root         (0) root         (0)    10947 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payout_request_e_wallet_account.py
│ │ --rw-r--r--   0 root         (0) root         (0)     9023 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/payout_request_living_address.py
│ │ --rw-r--r--   0 root         (0) root         (0)     6313 2023-04-07 09:06:34.000000 cardpay-3.45.8/cardpay/model/payout_request_merchant_order.py
│ │ --rw-r--r--   0 root         (0) root         (0)     9324 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/payout_request_payout_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)    11526 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/payout_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     9633 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/payout_response_card.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4744 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/payout_response_card_account.py
│ │ --rw-r--r--   0 root         (0) root         (0)     7076 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/payout_response_cryptocurrency_account.py
│ │ --rw-r--r--   0 root         (0) root         (0)     7034 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/payout_response_customer.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4418 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/payout_response_e_wallet_account.py
│ │ --rw-r--r--   0 root         (0) root         (0)    13953 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/payout_response_payout_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4915 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/payout_update_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5117 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/payout_update_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4560 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/payouts_list.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4086 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/pix_account_details_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4094 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/pix_account_details_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     3853 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/plan.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4583 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/plan_data_list.py
│ │ --rw-r--r--   0 root         (0) root         (0)    11448 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/report.py
│ │ --rw-r--r--   0 root         (0) root         (0)     6471 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/plan_update_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5519 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/plan_update_request_plan_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     3990 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/plan_update_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     9077 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/recurring_callback.py
│ │ --rw-r--r--   0 root         (0) root         (0)     7546 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/recurring_confirm3ds_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)    10724 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/recurring_creation_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)    15375 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/recurring_customer.py
│ │ --rw-r--r--   0 root         (0) root         (0)     6517 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/recurring_execute_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)    15170 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/recurring_filter_parameters.py
│ │ --rw-r--r--   0 root         (0) root         (0)     6279 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/recurring_gateway_creation_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5024 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/recurring_gateway_response_recurring_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     6219 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/recurring_patch_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4964 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/recurring_plan_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)    11314 2023-04-07 09:07:07.000000 cardpay-3.45.8/cardpay/model/recurring_plan_request_plan_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     3901 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/recurring_plan_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4517 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/recurring_request_filing.py
│ │ --rw-r--r--   0 root         (0) root         (0)    21022 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/recurring_request_recurring_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     9166 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/recurring_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     3936 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/recurring_response_filing.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5115 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/recurring_response_merchant_order.py
│ │ --rw-r--r--   0 root         (0) root         (0)    28069 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/recurring_response_recurring_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     6517 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/recurring_update_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)     6508 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/recurring_update_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4611 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/recurrings_list.py
│ │ --rw-r--r--   0 root         (0) root         (0)     3858 2023-04-07 09:06:35.000000 cardpay-3.45.8/cardpay/model/redirect_url_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)    11204 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/refund_callback.py
│ │ --rw-r--r--   0 root         (0) root         (0)     8960 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/refund_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)     6959 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/refund_request_customer.py
│ │ --rw-r--r--   0 root         (0) root         (0)     8267 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/refund_request_e_wallet_account.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5521 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/refund_request_merchant_order.py
│ │ --rw-r--r--   0 root         (0) root         (0)     3893 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/refund_request_payment_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5103 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/refund_request_refund_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)    10197 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/refund_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     7793 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/refund_response_card.py
│ │ --rw-r--r--   0 root         (0) root         (0)     3813 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/refund_response_card_account.py
│ │ --rw-r--r--   0 root         (0) root         (0)     6319 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/refund_response_customer.py
│ │ --rw-r--r--   0 root         (0) root         (0)     3994 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/refund_response_e_wallet_account.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4705 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/refund_response_payment_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)    15271 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/refund_response_refund_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4915 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/refund_update_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5117 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/refund_update_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4560 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/refunds_list.py
│ │ --rw-r--r--   0 root         (0) root         (0)    10169 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/renamed_plan_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     6065 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/reports_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     6314 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/reports_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)     6987 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/reports_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5351 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/request.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4597 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/request_updated_transaction_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)    10896 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/response_plan_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     9883 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/response_updated_transaction_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     9586 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/return_urls.py
│ │ --rw-r--r--   0 root         (0) root         (0)    17961 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/scheduled_by_merchant_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)    17842 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/scheduled_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)    11444 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/shipping_address.py
│ │ --rw-r--r--   0 root         (0) root         (0)     3678 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/subscription.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4377 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/subscription_customer.py
│ │ --rw-r--r--   0 root         (0) root         (0)    17289 2023-04-07 09:06:37.000000 cardpay-3.45.8/cardpay/model/subscription_filter_parameters.py
│ │ --rw-r--r--   0 root         (0) root         (0)    19785 2023-04-07 09:06:37.000000 cardpay-3.45.8/cardpay/model/subscription_get_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     3664 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/subscription_get_response_plan.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4675 2023-04-07 09:06:36.000000 cardpay-3.45.8/cardpay/model/subscription_list.py
│ │ --rw-r--r--   0 root         (0) root         (0)     7103 2023-04-07 09:06:37.000000 cardpay-3.45.8/cardpay/model/subscription_update_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)     6337 2023-04-07 09:06:37.000000 cardpay-3.45.8/cardpay/model/subscription_update_request_subscription_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4061 2023-04-07 09:06:37.000000 cardpay-3.45.8/cardpay/model/subscription_update_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     4393 2023-04-07 09:06:37.000000 cardpay-3.45.8/cardpay/model/supported_payment_method.py
│ │ --rw-r--r--   0 root         (0) root         (0)     9996 2023-04-07 09:06:37.000000 cardpay-3.45.8/cardpay/model/three_d_secure_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)    16067 2023-04-07 09:06:37.000000 cardpay-3.45.8/cardpay/model/three_d_secure_response.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5094 2023-04-07 09:06:37.000000 cardpay-3.45.8/cardpay/model/transaction_methods_list.py
│ │ --rw-r--r--   0 root         (0) root         (0)     3882 2023-04-07 09:06:37.000000 cardpay-3.45.8/cardpay/model/transaction_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5617 2023-04-07 09:06:37.000000 cardpay-3.45.8/cardpay/model/transaction_response_e_wallet_account.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5105 2023-04-07 09:06:37.000000 cardpay-3.45.8/cardpay/model/transaction_response_merchant_order.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5075 2023-04-07 09:06:37.000000 cardpay-3.45.8/cardpay/model/transaction_update_request.py
│ │ --rw-r--r--   0 root         (0) root         (0)    10169 2023-04-07 09:06:37.000000 cardpay-3.45.8/cardpay/model/updated_plan_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)    14132 2023-04-07 09:06:37.000000 cardpay-3.45.8/cardpay/model/updated_subscription_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)     5038 2023-04-07 09:06:37.000000 cardpay-3.45.8/cardpay/model/updated_subscription_recurring_data.py
│ │ --rw-r--r--   0 root         (0) root         (0)    14114 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/__init__.py
│ │ --rw-r--r--   0 root         (0) root         (0)    32460 2023-04-07 09:06:33.000000 cardpay-3.45.8/cardpay/api_client.py
│ │ --rw-r--r--   0 root         (0) root         (0)     7335 2023-04-07 09:06:32.000000 cardpay-3.45.8/cardpay/configuration.py
│ │ --rw-r--r--   0 root         (0) root         (0)    13856 2023-04-07 09:06:37.000000 cardpay-3.45.8/cardpay/rest.py
│ │ -drwxr-xr-x   0 root         (0) root         (0)        0 2023-04-07 13:39:10.000000 cardpay-3.45.8/cardpay.egg-info/
│ │ --rw-r--r--   0 root         (0) root         (0)     2242 2023-04-07 13:39:06.000000 cardpay-3.45.8/cardpay.egg-info/PKG-INFO
│ │ --rw-r--r--   0 root         (0) root         (0)     7685 2023-04-07 13:39:06.000000 cardpay-3.45.8/cardpay.egg-info/SOURCES.txt
│ │ --rw-r--r--   0 root         (0) root         (0)        1 2023-04-07 13:39:06.000000 cardpay-3.45.8/cardpay.egg-info/dependency_links.txt
│ │ --rw-r--r--   0 root         (0) root         (0)       71 2023-04-07 13:39:06.000000 cardpay-3.45.8/cardpay.egg-info/requires.txt
│ │ --rw-r--r--   0 root         (0) root         (0)        8 2023-04-07 13:39:06.000000 cardpay-3.45.8/cardpay.egg-info/top_level.txt
│ │ --rw-rw-rw-   0 root         (0) root         (0)     1089 2023-04-06 09:06:41.000000 cardpay-3.45.8/LICENSE
│ │ --rw-r--r--   0 root         (0) root         (0)     1068 2023-04-07 09:06:26.000000 cardpay-3.45.8/README.md
│ │ --rw-rw-rw-   0 root         (0) root         (0)      102 2023-04-07 13:39:10.000000 cardpay-3.45.8/setup.cfg
│ │ --rw-r--r--   0 root         (0) root         (0)     1371 2023-04-07 13:39:02.000000 cardpay-3.45.8/setup.py
│ │ --rw-r--r--   0 root         (0) root         (0)     2242 2023-04-07 13:39:10.000000 cardpay-3.45.8/PKG-INFO
│ │ +drwxr-xr-x   0 root         (0) root         (0)        0 2021-09-08 06:58:29.000000 cardpay-3.6.21/
│ │ +drwxr-xr-x   0 root         (0) root         (0)        0 2021-09-08 06:58:29.000000 cardpay-3.6.21/cardpay/
│ │ +drwxr-xr-x   0 root         (0) root         (0)        0 2021-09-08 06:58:29.000000 cardpay-3.6.21/cardpay/api/
│ │ +-rw-rw-rw-   0 root         (0) root         (0)       55 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/api/__init__.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5123 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/api/auth_api.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     3585 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/api/limits_api.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    20985 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/api/mobile_api.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    37164 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/api/payments_api.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    18944 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/api/payouts_api.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    66001 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/api/recurrings_api.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    28079 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/api/recurrings_installments_api.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    18934 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/api/refunds_api.py
│ │ +drwxr-xr-x   0 root         (0) root         (0)        0 2021-09-08 06:58:29.000000 cardpay-3.6.21/cardpay/model/
│ │ +-rw-rw-rw-   0 root         (0) root         (0)       55 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/__init__.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5372 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/api_error.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     7379 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/api_tokens.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    10089 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/authentication_customer.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    12661 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/authentication_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     8431 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/authentication_data_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5002 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/authentication_error.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5713 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/bad_request_error.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    12272 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/bank_card_payout_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    11530 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/billing_address.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     8098 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/card_binding_card.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4834 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/card_binding_card_account.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     3802 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/card_binding_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5558 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/card_binding_merchant_order.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4668 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/card_binding_recurring_data_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     8967 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/card_binding_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4956 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/card_binding_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     9342 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/change_subscription_status_claim_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    10169 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/changed_plan_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5337 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/claim_response_subscription_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4781 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/confirm3ds_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4565 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/dispute_list.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     8018 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/dispute_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4637 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/dispute_response_card.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     3846 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/dispute_response_card_account.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     3710 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/dispute_response_customer.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    11765 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/dispute_response_dispute_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4529 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/dispute_response_merchant_order.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     8064 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/dispute_response_payment_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     9344 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/filing_recurring_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    12222 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/filing_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     7186 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/filing_request_merchant_order.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4259 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/filing_request_subscription_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    13315 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/filter_parameters.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    10996 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/flight.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    17117 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/flights.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    21733 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/installment_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    11196 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/installment_subscription_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     7180 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/item.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4089 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/limit_info_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     8743 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/mobile_card_account_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    11333 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/mobile_customer_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     3732 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/mobile_merchant_order_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4321 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/mobile_payment_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    15275 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/mobile_payment_data_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     8254 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/mobile_payment_full_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     7557 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/mobile_payment_merchant_order.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4597 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/mobile_payment_method_data_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4205 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/mobile_payment_method_list_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    11095 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/mobile_payment_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4841 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/mobile_payment_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     3882 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/mobile_token_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4767 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/mobile_token_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4774 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/mobile_verification_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     3894 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/mobile_verification_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     3862 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/next_subscription_payment.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5681 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/not_found_error.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4765 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/o_auth_error.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    13940 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/oneclick_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    11888 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_callback.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     7449 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_confirm3ds_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     6428 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_execute_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5049 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_gateway_creation_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4992 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_gateway_response_payment_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5306 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_methods_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     6143 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_patch_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    14704 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     8783 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_request_card.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     7111 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_request_card_account.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4555 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_request_cryptocurrency_account.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    21414 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_request_customer.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     9885 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_request_e_wallet_account.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     8837 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_request_living_address.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     9818 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_request_merchant_order.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    14884 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_request_payment_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     7973 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     9166 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_response_card_account.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     7192 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_response_cryptocurrency_account.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    11372 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_response_customer.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    16747 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_response_payment_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     6432 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_update_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     6428 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_update_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5410 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payment_update_transaction_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4577 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payments_list.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    12413 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payout_callback.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     3005 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payout_creation_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4248 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payout_payment_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    13066 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payout_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5485 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payout_request_card.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     7928 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payout_request_card_account.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4549 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payout_request_cryptocurrency_account.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    14783 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payout_request_customer.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    10947 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payout_request_e_wallet_account.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     9023 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payout_request_living_address.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5027 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payout_request_merchant_order.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     9324 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payout_request_payout_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    11526 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payout_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     6747 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payout_response_card.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4744 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payout_response_card_account.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     7076 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payout_response_cryptocurrency_account.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5328 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payout_response_customer.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4418 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payout_response_e_wallet_account.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    12478 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payout_response_payout_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4915 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payout_update_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5117 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payout_update_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4560 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/payouts_list.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     3853 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/plan.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4583 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/plan_data_list.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     6471 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/plan_update_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5519 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/plan_update_request_plan_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     3990 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/plan_update_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     9077 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurring_callback.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     7546 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurring_confirm3ds_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    10724 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurring_creation_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    13769 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurring_customer.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     6517 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurring_execute_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    15170 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurring_filter_parameters.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     6279 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurring_gateway_creation_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5024 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurring_gateway_response_recurring_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     6219 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurring_patch_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4964 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurring_plan_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    11314 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurring_plan_request_plan_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     3901 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurring_plan_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4517 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurring_request_filing.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     8944 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurring_request_merchant_order.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    21022 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurring_request_recurring_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     8048 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurring_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     3936 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurring_response_filing.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5115 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurring_response_merchant_order.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    25531 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurring_response_recurring_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     6517 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurring_update_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     6508 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurring_update_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4611 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/recurrings_list.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     3858 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/redirect_url_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    11204 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/refund_callback.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     8960 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/refund_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     6959 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/refund_request_customer.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     8267 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/refund_request_e_wallet_account.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5521 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/refund_request_merchant_order.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     3893 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/refund_request_payment_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5103 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/refund_request_refund_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    10197 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/refund_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4886 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/refund_response_card.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     3813 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/refund_response_card_account.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4629 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/refund_response_customer.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     3994 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/refund_response_e_wallet_account.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4705 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/refund_response_payment_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    13796 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/refund_response_refund_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4915 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/refund_update_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5117 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/refund_update_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4560 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/refunds_list.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    10169 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/renamed_plan_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5351 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4597 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/request_updated_transaction_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    10896 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/response_plan_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     9883 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/response_updated_transaction_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     9586 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/return_urls.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4517 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/schedule_option.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5846 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/schedule_options_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    14423 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/scheduled_by_merchant_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    13931 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/scheduled_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    11444 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/shipping_address.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     3678 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/subscription.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4377 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/subscription_customer.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    17289 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/subscription_filter_parameters.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    19785 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/subscription_get_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     3664 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/subscription_get_response_plan.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4675 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/subscription_list.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     7103 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/subscription_update_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     6337 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/subscription_update_request_subscription_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4061 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/subscription_update_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     9996 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/three_d_secure_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    15112 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/three_d_secure_response.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5094 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/transaction_methods_list.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     3882 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/transaction_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5617 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/transaction_response_e_wallet_account.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     4196 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/transaction_response_merchant_order.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5075 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/transaction_update_request.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    10169 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/updated_plan_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    14132 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/updated_subscription_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     5038 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/model/updated_subscription_recurring_data.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    14811 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/__init__.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    32460 2021-09-08 06:53:03.000000 cardpay-3.6.21/cardpay/api_client.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     7335 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/configuration.py
│ │ +-rw-rw-rw-   0 root         (0) root         (0)    13856 2021-09-08 06:38:51.000000 cardpay-3.6.21/cardpay/rest.py
│ │ +drwxr-xr-x   0 root         (0) root         (0)        0 2021-09-08 06:58:29.000000 cardpay-3.6.21/cardpay.egg-info/
│ │ +-rw-r--r--   0 root         (0) root         (0)     2242 2021-09-08 06:58:28.000000 cardpay-3.6.21/cardpay.egg-info/PKG-INFO
│ │ +-rw-r--r--   0 root         (0) root         (0)     8051 2021-09-08 06:58:28.000000 cardpay-3.6.21/cardpay.egg-info/SOURCES.txt
│ │ +-rw-r--r--   0 root         (0) root         (0)        1 2021-09-08 06:58:28.000000 cardpay-3.6.21/cardpay.egg-info/dependency_links.txt
│ │ +-rw-r--r--   0 root         (0) root         (0)       71 2021-09-08 06:58:28.000000 cardpay-3.6.21/cardpay.egg-info/requires.txt
│ │ +-rw-r--r--   0 root         (0) root         (0)        8 2021-09-08 06:58:28.000000 cardpay-3.6.21/cardpay.egg-info/top_level.txt
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     1096 2021-09-08 06:38:51.000000 cardpay-3.6.21/LICENSE
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     1068 2021-09-08 06:38:51.000000 cardpay-3.6.21/README.md
│ │ +-rw-rw-rw-   0 root         (0) root         (0)      102 2021-09-08 06:58:29.000000 cardpay-3.6.21/setup.cfg
│ │ +-rw-rw-rw-   0 root         (0) root         (0)     1371 2021-09-08 06:58:28.000000 cardpay-3.6.21/setup.py
│ │ +-rw-r--r--   0 root         (0) root         (0)     2242 2021-09-08 06:58:29.000000 cardpay-3.6.21/PKG-INFO
│ │   --- cardpay-3.45.8/cardpay/api/auth_api.py
│ ├── +++ cardpay-3.6.21/cardpay/api/auth_api.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/api/limits_api.py
│ ├── +++ cardpay-3.6.21/cardpay/api/limits_api.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/api/payments_api.py
│ ├── +++ cardpay-3.6.21/cardpay/api/payments_api.py
│ │┄ Files 1% similar despite different names
│ │ @@ -116,30 +116,30 @@
│ │              response_type="PaymentGatewayCreationResponse",  # noqa: E501
│ │              _return_http_data_only=params.get("_return_http_data_only"),
│ │              _preload_content=params.get("_preload_content", True),
│ │              _request_timeout=params.get("_request_timeout"),
│ │              collection_formats=collection_formats,
│ │          )
│ │  
│ │ -    def get_authentication_data(self, payment_id, **kwargs):  # noqa: E501
│ │ +    def get_authentication_data1(self, payment_id, **kwargs):  # noqa: E501
│ │          """Get payment 3DS result information  # noqa: E501
│ │  
│ │          :param str payment_id: Payment ID (required)
│ │          :return: AuthenticationDataResponse
│ │                   If the method is called asynchronously,
│ │                   returns the request thread.
│ │          """
│ │          kwargs["_return_http_data_only"] = True
│ │  
│ │ -        (data) = self.get_authentication_data_with_http_info(
│ │ +        (data) = self.get_authentication_data1_with_http_info(
│ │              payment_id, **kwargs
│ │          )  # noqa: E501
│ │          return data
│ │  
│ │ -    def get_authentication_data_with_http_info(
│ │ +    def get_authentication_data1_with_http_info(
│ │          self, payment_id, **kwargs
│ │      ):  # noqa: E501
│ │          """Get payment 3DS result information  # noqa: E501
│ │  
│ │          :param str payment_id: Payment ID (required)
│ │          :return: AuthenticationDataResponse
│ │                   If the method is called asynchronously,
│ │ @@ -152,22 +152,22 @@
│ │          all_params.append("_request_timeout")
│ │  
│ │          params = locals()
│ │          for key, val in six.iteritems(params["kwargs"]):
│ │              if key not in all_params:
│ │                  raise TypeError(
│ │                      "Got an unexpected keyword argument '%s'"
│ │ -                    " to method get_authentication_data" % key
│ │ +                    " to method get_authentication_data1" % key
│ │                  )
│ │              params[key] = val
│ │          del params["kwargs"]
│ │          # verify the required parameter 'payment_id' is set
│ │          if "payment_id" not in params or params["payment_id"] is None:
│ │              raise ValueError(
│ │ -                "Missing the required parameter `payment_id` when calling `get_authentication_data`"
│ │ +                "Missing the required parameter `payment_id` when calling `get_authentication_data1`"
│ │              )  # noqa: E501
│ │  
│ │          collection_formats = {}
│ │  
│ │          path_params = {}
│ │          if "payment_id" in params:
│ │              path_params["paymentId"] = params["payment_id"]  # noqa: E501
│ │   --- cardpay-3.45.8/cardpay/api/payouts_api.py
│ ├── +++ cardpay-3.6.21/cardpay/api/payouts_api.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/api/recurrings_api.py
│ ├── +++ cardpay-3.6.21/cardpay/api/recurrings_api.py
│ │┄ Files 1% similar despite different names
│ │ @@ -361,30 +361,30 @@
│ │              response_type=None,  # noqa: E501
│ │              _return_http_data_only=params.get("_return_http_data_only"),
│ │              _preload_content=params.get("_preload_content", True),
│ │              _request_timeout=params.get("_request_timeout"),
│ │              collection_formats=collection_formats,
│ │          )
│ │  
│ │ -    def get_authentication_data1(self, recurring_id, **kwargs):  # noqa: E501
│ │ +    def get_authentication_data2(self, recurring_id, **kwargs):  # noqa: E501
│ │          """Get recurring payment 3DS result information  # noqa: E501
│ │  
│ │          :param str recurring_id: Recurring ID (required)
│ │          :return: AuthenticationDataResponse
│ │                   If the method is called asynchronously,
│ │                   returns the request thread.
│ │          """
│ │          kwargs["_return_http_data_only"] = True
│ │  
│ │ -        (data) = self.get_authentication_data1_with_http_info(
│ │ +        (data) = self.get_authentication_data2_with_http_info(
│ │              recurring_id, **kwargs
│ │          )  # noqa: E501
│ │          return data
│ │  
│ │ -    def get_authentication_data1_with_http_info(
│ │ +    def get_authentication_data2_with_http_info(
│ │          self, recurring_id, **kwargs
│ │      ):  # noqa: E501
│ │          """Get recurring payment 3DS result information  # noqa: E501
│ │  
│ │          :param str recurring_id: Recurring ID (required)
│ │          :return: AuthenticationDataResponse
│ │                   If the method is called asynchronously,
│ │ @@ -397,22 +397,22 @@
│ │          all_params.append("_request_timeout")
│ │  
│ │          params = locals()
│ │          for key, val in six.iteritems(params["kwargs"]):
│ │              if key not in all_params:
│ │                  raise TypeError(
│ │                      "Got an unexpected keyword argument '%s'"
│ │ -                    " to method get_authentication_data1" % key
│ │ +                    " to method get_authentication_data2" % key
│ │                  )
│ │              params[key] = val
│ │          del params["kwargs"]
│ │          # verify the required parameter 'recurring_id' is set
│ │          if "recurring_id" not in params or params["recurring_id"] is None:
│ │              raise ValueError(
│ │ -                "Missing the required parameter `recurring_id` when calling `get_authentication_data1`"
│ │ +                "Missing the required parameter `recurring_id` when calling `get_authentication_data2`"
│ │              )  # noqa: E501
│ │  
│ │          collection_formats = {}
│ │  
│ │          path_params = {}
│ │          if "recurring_id" in params:
│ │              path_params["recurringId"] = params["recurring_id"]  # noqa: E501
│ │   --- cardpay-3.45.8/cardpay/api/refunds_api.py
│ ├── +++ cardpay-3.6.21/cardpay/api/refunds_api.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/api_error.py
│ ├── +++ cardpay-3.6.21/cardpay/model/api_error.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/api_tokens.py
│ ├── +++ cardpay-3.6.21/cardpay/model/api_tokens.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/authentication_customer.py
│ ├── +++ cardpay-3.6.21/cardpay/model/authentication_customer.py
│ │┄ Files 7% similar despite different names
│ │ @@ -31,74 +31,62 @@
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │          "email": "str",
│ │          "home_phone": "str",
│ │          "id": "str",
│ │          "ip": "str",
│ │ -        "ip_country": "str",
│ │          "locale": "str",
│ │          "phone": "str",
│ │ -        "user_agent": "str",
│ │          "work_phone": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │          "email": "email",
│ │          "home_phone": "home_phone",
│ │          "id": "id",
│ │          "ip": "ip",
│ │ -        "ip_country": "ip_country",
│ │          "locale": "locale",
│ │          "phone": "phone",
│ │ -        "user_agent": "user_agent",
│ │          "work_phone": "work_phone",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │          email=None,
│ │          home_phone=None,
│ │          id=None,
│ │          ip=None,
│ │ -        ip_country=None,
│ │          locale=None,
│ │          phone=None,
│ │ -        user_agent=None,
│ │          work_phone=None,
│ │      ):  # noqa: E501
│ │          """AuthenticationCustomer - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._email = None
│ │          self._home_phone = None
│ │          self._id = None
│ │          self._ip = None
│ │ -        self._ip_country = None
│ │          self._locale = None
│ │          self._phone = None
│ │ -        self._user_agent = None
│ │          self._work_phone = None
│ │          self.discriminator = None
│ │  
│ │          if email is not None:
│ │              self.email = email
│ │          if home_phone is not None:
│ │              self.home_phone = home_phone
│ │          if id is not None:
│ │              self.id = id
│ │          if ip is not None:
│ │              self.ip = ip
│ │ -        if ip_country is not None:
│ │ -            self.ip_country = ip_country
│ │          if locale is not None:
│ │              self.locale = locale
│ │          if phone is not None:
│ │              self.phone = phone
│ │ -        if user_agent is not None:
│ │ -            self.user_agent = user_agent
│ │          if work_phone is not None:
│ │              self.work_phone = work_phone
│ │  
│ │      @property
│ │      def email(self):
│ │          """Gets the email of this AuthenticationCustomer.  # noqa: E501
│ │  
│ │ @@ -187,37 +175,14 @@
│ │          :param ip: The ip of this AuthenticationCustomer.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._ip = ip
│ │  
│ │      @property
│ │ -    def ip_country(self):
│ │ -        """Gets the ip_country of this AuthenticationCustomer.  # noqa: E501
│ │ -
│ │ -        Customer country by IP  # noqa: E501
│ │ -
│ │ -        :return: The ip_country of this AuthenticationCustomer.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._ip_country
│ │ -
│ │ -    @ip_country.setter
│ │ -    def ip_country(self, ip_country):
│ │ -        """Sets the ip_country of this AuthenticationCustomer.
│ │ -
│ │ -        Customer country by IP  # noqa: E501
│ │ -
│ │ -        :param ip_country: The ip_country of this AuthenticationCustomer.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._ip_country = ip_country
│ │ -
│ │ -    @property
│ │      def locale(self):
│ │          """Gets the locale of this AuthenticationCustomer.  # noqa: E501
│ │  
│ │          Preferred locale for the payment page ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) language code). The default locale will be applied if the selected locale is not supported. Supported locales are: `ru`, `en`, `zh`, `ja`  # noqa: E501
│ │  
│ │          :return: The locale of this AuthenticationCustomer.  # noqa: E501
│ │          :rtype: str
│ │ @@ -256,37 +221,14 @@
│ │          :param phone: The phone of this AuthenticationCustomer.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._phone = phone
│ │  
│ │      @property
│ │ -    def user_agent(self):
│ │ -        """Gets the user_agent of this AuthenticationCustomer.  # noqa: E501
│ │ -
│ │ -        User agent  # noqa: E501
│ │ -
│ │ -        :return: The user_agent of this AuthenticationCustomer.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._user_agent
│ │ -
│ │ -    @user_agent.setter
│ │ -    def user_agent(self, user_agent):
│ │ -        """Sets the user_agent of this AuthenticationCustomer.
│ │ -
│ │ -        User agent  # noqa: E501
│ │ -
│ │ -        :param user_agent: The user_agent of this AuthenticationCustomer.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._user_agent = user_agent
│ │ -
│ │ -    @property
│ │      def work_phone(self):
│ │          """Gets the work_phone of this AuthenticationCustomer.  # noqa: E501
│ │  
│ │          The work phone number provided by the Cardholder. Required (if available) unless market or regional mandate restricts sending this information. Characters Format: string (10-18 symbols) country code + Subscriber number. Refer to ITU-E.164 for additional information on format and length.  # noqa: E501
│ │  
│ │          :return: The work_phone of this AuthenticationCustomer.  # noqa: E501
│ │          :rtype: str
│ │   --- cardpay-3.45.8/cardpay/model/authentication_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/authentication_data.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/authentication_data_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/authentication_data_response.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/authentication_error.py
│ ├── +++ cardpay-3.6.21/cardpay/model/authentication_error.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/bad_request_error.py
│ ├── +++ cardpay-3.6.21/cardpay/model/bad_request_error.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/bank_card_payout_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/bank_card_payout_data.py
│ │┄ Files 12% similar despite different names
│ │ @@ -33,58 +33,54 @@
│ │      swagger_types = {
│ │          "amount": "float",
│ │          "arn": "str",
│ │          "created": "str",
│ │          "currency": "str",
│ │          "decline_code": "str",
│ │          "decline_reason": "str",
│ │ -        "extended_decline_reason": "str",
│ │          "id": "str",
│ │          "note": "str",
│ │          "rrn": "str",
│ │          "status": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │          "amount": "amount",
│ │          "arn": "arn",
│ │          "created": "created",
│ │          "currency": "currency",
│ │          "decline_code": "decline_code",
│ │          "decline_reason": "decline_reason",
│ │ -        "extended_decline_reason": "extended_decline_reason",
│ │          "id": "id",
│ │          "note": "note",
│ │          "rrn": "rrn",
│ │          "status": "status",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │          amount=None,
│ │          arn=None,
│ │          created=None,
│ │          currency=None,
│ │          decline_code=None,
│ │          decline_reason=None,
│ │ -        extended_decline_reason=None,
│ │          id=None,
│ │          note=None,
│ │          rrn=None,
│ │          status=None,
│ │      ):  # noqa: E501
│ │          """BankCardPayoutData - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._amount = None
│ │          self._arn = None
│ │          self._created = None
│ │          self._currency = None
│ │          self._decline_code = None
│ │          self._decline_reason = None
│ │ -        self._extended_decline_reason = None
│ │          self._id = None
│ │          self._note = None
│ │          self._rrn = None
│ │          self._status = None
│ │          self.discriminator = None
│ │  
│ │          if amount is not None:
│ │ @@ -95,16 +91,14 @@
│ │              self.created = created
│ │          if currency is not None:
│ │              self.currency = currency
│ │          if decline_code is not None:
│ │              self.decline_code = decline_code
│ │          if decline_reason is not None:
│ │              self.decline_reason = decline_reason
│ │ -        if extended_decline_reason is not None:
│ │ -            self.extended_decline_reason = extended_decline_reason
│ │          if id is not None:
│ │              self.id = id
│ │          if note is not None:
│ │              self.note = note
│ │          if rrn is not None:
│ │              self.rrn = rrn
│ │          if status is not None:
│ │ @@ -245,37 +239,14 @@
│ │          :param decline_reason: The decline_reason of this BankCardPayoutData.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._decline_reason = decline_reason
│ │  
│ │      @property
│ │ -    def extended_decline_reason(self):
│ │ -        """Gets the extended_decline_reason of this BankCardPayoutData.  # noqa: E501
│ │ -
│ │ -        Original decline reason. Can be presented in responses if original network response code is presented and option is enabled for Merchant. Not presented by default, ask Unlimint manager to enable it if needed.  # noqa: E501
│ │ -
│ │ -        :return: The extended_decline_reason of this BankCardPayoutData.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._extended_decline_reason
│ │ -
│ │ -    @extended_decline_reason.setter
│ │ -    def extended_decline_reason(self, extended_decline_reason):
│ │ -        """Sets the extended_decline_reason of this BankCardPayoutData.
│ │ -
│ │ -        Original decline reason. Can be presented in responses if original network response code is presented and option is enabled for Merchant. Not presented by default, ask Unlimint manager to enable it if needed.  # noqa: E501
│ │ -
│ │ -        :param extended_decline_reason: The extended_decline_reason of this BankCardPayoutData.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._extended_decline_reason = extended_decline_reason
│ │ -
│ │ -    @property
│ │      def id(self):
│ │          """Gets the id of this BankCardPayoutData.  # noqa: E501
│ │  
│ │          CardPay's payout id  # noqa: E501
│ │  
│ │          :return: The id of this BankCardPayoutData.  # noqa: E501
│ │          :rtype: str
│ │   --- cardpay-3.45.8/cardpay/model/billing_address.py
│ ├── +++ cardpay-3.6.21/cardpay/model/billing_address.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/card_info_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/recurring_request_filing.py
│ │┄ Files 16% similar despite different names
│ │ @@ -13,77 +13,70 @@
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │  
│ │ -class CardInfoRequest(object):
│ │ +class RecurringRequestFiling(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │ -    swagger_types = {"bin": "str"}
│ │ +    swagger_types = {"id": "str"}
│ │  
│ │ -    attribute_map = {"bin": "bin"}
│ │ +    attribute_map = {"id": "id"}
│ │  
│ │ -    def __init__(self, bin=None):  # noqa: E501
│ │ -        """CardInfoRequest - a model defined in Swagger"""  # noqa: E501
│ │ +    def __init__(self, id=None):  # noqa: E501
│ │ +        """RecurringRequestFiling - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._bin = None
│ │ +        self._id = None
│ │          self.discriminator = None
│ │  
│ │ -        self.bin = bin
│ │ +        if id is not None:
│ │ +            self.id = id
│ │  
│ │      @property
│ │ -    def bin(self):
│ │ -        """Gets the bin of this CardInfoRequest.  # noqa: E501
│ │ +    def id(self):
│ │ +        """Gets the id of this RecurringRequestFiling.  # noqa: E501
│ │  
│ │ -        Card BIN  # noqa: E501
│ │ +        Filing id. For recurring: repeating 'filing.id' was sent before, should be sent in all recurring requests besides first recurring request. First recurring request should be sent without 'filing.id' attribute. Mandatory only for recurring continue (not first) request.  # noqa: E501
│ │  
│ │ -        :return: The bin of this CardInfoRequest.  # noqa: E501
│ │ +        :return: The id of this RecurringRequestFiling.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._bin
│ │ +        return self._id
│ │  
│ │ -    @bin.setter
│ │ -    def bin(self, bin):
│ │ -        """Sets the bin of this CardInfoRequest.
│ │ +    @id.setter
│ │ +    def id(self, id):
│ │ +        """Sets the id of this RecurringRequestFiling.
│ │  
│ │ -        Card BIN  # noqa: E501
│ │ +        Filing id. For recurring: repeating 'filing.id' was sent before, should be sent in all recurring requests besides first recurring request. First recurring request should be sent without 'filing.id' attribute. Mandatory only for recurring continue (not first) request.  # noqa: E501
│ │  
│ │ -        :param bin: The bin of this CardInfoRequest.  # noqa: E501
│ │ +        :param id: The id of this RecurringRequestFiling.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if bin is None:
│ │ +        if id is not None and len(id) > 32:
│ │              raise ValueError(
│ │ -                "Invalid value for `bin`, must not be `None`"
│ │ +                "Invalid value for `id`, length must be less than or equal to `32`"
│ │              )  # noqa: E501
│ │ -        if bin is not None and len(bin) > 34:
│ │ +        if id is not None and len(id) < 0:
│ │              raise ValueError(
│ │ -                "Invalid value for `bin`, length must be less than or equal to `34`"
│ │ -            )  # noqa: E501
│ │ -        if bin is not None and len(bin) < 6:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `bin`, length must be greater than or equal to `6`"
│ │ -            )  # noqa: E501
│ │ -        if bin is not None and not re.search(r"\\d+", bin):  # noqa: E501
│ │ -            raise ValueError(
│ │ -                r"Invalid value for `bin`, must be a follow pattern or equal to `/\\d+/`"
│ │ +                "Invalid value for `id`, length must be greater than or equal to `0`"
│ │              )  # noqa: E501
│ │  
│ │ -        self._bin = bin
│ │ +        self._id = id
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -101,15 +94,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(CardInfoRequest, dict):
│ │ +        if issubclass(RecurringRequestFiling, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -117,15 +110,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, CardInfoRequest):
│ │ +        if not isinstance(other, RecurringRequestFiling):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/card_info_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_update_response.py
│ │┄ Files 24% similar despite different names
│ │ @@ -12,181 +12,144 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ +from cardpay.model.response_updated_transaction_data import (
│ │ +    ResponseUpdatedTransactionData,
│ │ +)  # noqa: F401,E501
│ │ +from cardpay.model.transaction_response_merchant_order import (
│ │ +    TransactionResponseMerchantOrder,
│ │ +)  # noqa: F401,E501
│ │  
│ │ -class CardInfoResponse(object):
│ │ +
│ │ +class PaymentUpdateResponse(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │ -        "bin": "str",
│ │ -        "card_brand": "str",
│ │ -        "card_issuer": "str",
│ │ -        "card_type": "str",
│ │ -        "country": "str",
│ │ +        "merchant_order": "TransactionResponseMerchantOrder",
│ │ +        "operation": "str",
│ │ +        "payment_data": "ResponseUpdatedTransactionData",
│ │      }
│ │  
│ │      attribute_map = {
│ │ -        "bin": "bin",
│ │ -        "card_brand": "card_brand",
│ │ -        "card_issuer": "card_issuer",
│ │ -        "card_type": "card_type",
│ │ -        "country": "country",
│ │ +        "merchant_order": "merchant_order",
│ │ +        "operation": "operation",
│ │ +        "payment_data": "payment_data",
│ │      }
│ │  
│ │      def __init__(
│ │ -        self, bin=None, card_brand=None, card_issuer=None, card_type=None, country=None
│ │ +        self, merchant_order=None, operation=None, payment_data=None
│ │      ):  # noqa: E501
│ │ -        """CardInfoResponse - a model defined in Swagger"""  # noqa: E501
│ │ +        """PaymentUpdateResponse - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._bin = None
│ │ -        self._card_brand = None
│ │ -        self._card_issuer = None
│ │ -        self._card_type = None
│ │ -        self._country = None
│ │ +        self._merchant_order = None
│ │ +        self._operation = None
│ │ +        self._payment_data = None
│ │          self.discriminator = None
│ │  
│ │ -        if bin is not None:
│ │ -            self.bin = bin
│ │ -        if card_brand is not None:
│ │ -            self.card_brand = card_brand
│ │ -        if card_issuer is not None:
│ │ -            self.card_issuer = card_issuer
│ │ -        if card_type is not None:
│ │ -            self.card_type = card_type
│ │ -        if country is not None:
│ │ -            self.country = country
│ │ +        if merchant_order is not None:
│ │ +            self.merchant_order = merchant_order
│ │ +        if operation is not None:
│ │ +            self.operation = operation
│ │ +        if payment_data is not None:
│ │ +            self.payment_data = payment_data
│ │  
│ │      @property
│ │ -    def bin(self):
│ │ -        """Gets the bin of this CardInfoResponse.  # noqa: E501
│ │ +    def merchant_order(self):
│ │ +        """Gets the merchant_order of this PaymentUpdateResponse.  # noqa: E501
│ │  
│ │ -        Card BIN  # noqa: E501
│ │ +        Merchant order data  # noqa: E501
│ │  
│ │ -        :return: The bin of this CardInfoResponse.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The merchant_order of this PaymentUpdateResponse.  # noqa: E501
│ │ +        :rtype: TransactionResponseMerchantOrder
│ │          """
│ │ -        return self._bin
│ │ +        return self._merchant_order
│ │  
│ │ -    @bin.setter
│ │ -    def bin(self, bin):
│ │ -        """Sets the bin of this CardInfoResponse.
│ │ +    @merchant_order.setter
│ │ +    def merchant_order(self, merchant_order):
│ │ +        """Sets the merchant_order of this PaymentUpdateResponse.
│ │  
│ │ -        Card BIN  # noqa: E501
│ │ +        Merchant order data  # noqa: E501
│ │  
│ │ -        :param bin: The bin of this CardInfoResponse.  # noqa: E501
│ │ -        :type: str
│ │ +        :param merchant_order: The merchant_order of this PaymentUpdateResponse.  # noqa: E501
│ │ +        :type: TransactionResponseMerchantOrder
│ │          """
│ │  
│ │ -        self._bin = bin
│ │ -
│ │ -    @property
│ │ -    def card_brand(self):
│ │ -        """Gets the card_brand of this CardInfoResponse.  # noqa: E501
│ │ -
│ │ -        Card brand  # noqa: E501
│ │ +        self._merchant_order = merchant_order
│ │  
│ │ -        :return: The card_brand of this CardInfoResponse.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._card_brand
│ │ -
│ │ -    @card_brand.setter
│ │ -    def card_brand(self, card_brand):
│ │ -        """Sets the card_brand of this CardInfoResponse.
│ │ -
│ │ -        Card brand  # noqa: E501
│ │ -
│ │ -        :param card_brand: The card_brand of this CardInfoResponse.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._card_brand = card_brand
│ │ +    class Operation(object):
│ │ +        CHANGE_STATUS = "CHANGE_STATUS"
│ │ +        CONFIRM_3DS = "CONFIRM_3DS"
│ │ +        EXECUTE = "EXECUTE"
│ │  
│ │      @property
│ │ -    def card_issuer(self):
│ │ -        """Gets the card_issuer of this CardInfoResponse.  # noqa: E501
│ │ +    def operation(self):
│ │ +        """Gets the operation of this PaymentUpdateResponse.  # noqa: E501
│ │  
│ │ -        Card issuer name  # noqa: E501
│ │ +        Operation  # noqa: E501
│ │  
│ │ -        :return: The card_issuer of this CardInfoResponse.  # noqa: E501
│ │ +        :return: The operation of this PaymentUpdateResponse.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._card_issuer
│ │ +        return self._operation
│ │  
│ │ -    @card_issuer.setter
│ │ -    def card_issuer(self, card_issuer):
│ │ -        """Sets the card_issuer of this CardInfoResponse.
│ │ +    @operation.setter
│ │ +    def operation(self, operation):
│ │ +        """Sets the operation of this PaymentUpdateResponse.
│ │  
│ │ -        Card issuer name  # noqa: E501
│ │ +        Operation  # noqa: E501
│ │  
│ │ -        :param card_issuer: The card_issuer of this CardInfoResponse.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._card_issuer = card_issuer
│ │ -
│ │ -    @property
│ │ -    def card_type(self):
│ │ -        """Gets the card_type of this CardInfoResponse.  # noqa: E501
│ │ -
│ │ -        Card type  # noqa: E501
│ │ -
│ │ -        :return: The card_type of this CardInfoResponse.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._card_type
│ │ -
│ │ -    @card_type.setter
│ │ -    def card_type(self, card_type):
│ │ -        """Sets the card_type of this CardInfoResponse.
│ │ -
│ │ -        Card type  # noqa: E501
│ │ -
│ │ -        :param card_type: The card_type of this CardInfoResponse.  # noqa: E501
│ │ +        :param operation: The operation of this PaymentUpdateResponse.  # noqa: E501
│ │          :type: str
│ │          """
│ │ +        allowed_values = ["CHANGE_STATUS", "CONFIRM_3DS", "EXECUTE"]  # noqa: E501
│ │ +        if operation not in allowed_values:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `operation` ({0}), must be one of {1}".format(  # noqa: E501
│ │ +                    operation, allowed_values
│ │ +                )
│ │ +            )
│ │  
│ │ -        self._card_type = card_type
│ │ +        self._operation = operation
│ │  
│ │      @property
│ │ -    def country(self):
│ │ -        """Gets the country of this CardInfoResponse.  # noqa: E501
│ │ +    def payment_data(self):
│ │ +        """Gets the payment_data of this PaymentUpdateResponse.  # noqa: E501
│ │  
│ │ -        Country code in [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) alpha-2 code format  # noqa: E501
│ │ +        Transaction data  # noqa: E501
│ │  
│ │ -        :return: The country of this CardInfoResponse.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The payment_data of this PaymentUpdateResponse.  # noqa: E501
│ │ +        :rtype: ResponseUpdatedTransactionData
│ │          """
│ │ -        return self._country
│ │ +        return self._payment_data
│ │  
│ │ -    @country.setter
│ │ -    def country(self, country):
│ │ -        """Sets the country of this CardInfoResponse.
│ │ +    @payment_data.setter
│ │ +    def payment_data(self, payment_data):
│ │ +        """Sets the payment_data of this PaymentUpdateResponse.
│ │  
│ │ -        Country code in [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) alpha-2 code format  # noqa: E501
│ │ +        Transaction data  # noqa: E501
│ │  
│ │ -        :param country: The country of this CardInfoResponse.  # noqa: E501
│ │ -        :type: str
│ │ +        :param payment_data: The payment_data of this PaymentUpdateResponse.  # noqa: E501
│ │ +        :type: ResponseUpdatedTransactionData
│ │          """
│ │  
│ │ -        self._country = country
│ │ +        self._payment_data = payment_data
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -204,15 +167,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(CardInfoResponse, dict):
│ │ +        if issubclass(PaymentUpdateResponse, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -220,15 +183,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, CardInfoResponse):
│ │ +        if not isinstance(other, PaymentUpdateResponse):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/change_subscription_status_claim_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/change_subscription_status_claim_response.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/changed_plan_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/changed_plan_data.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/claim_response_subscription_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/claim_response_subscription_data.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/confirm3ds_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/confirm3ds_request.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/dispute_list.py
│ ├── +++ cardpay-3.6.21/cardpay/model/dispute_list.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/dispute_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/dispute_response.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/dispute_response_card.py
│ ├── +++ cardpay-3.6.21/cardpay/model/dispute_response_card.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/dispute_response_card_account.py
│ ├── +++ cardpay-3.6.21/cardpay/model/dispute_response_card_account.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/dispute_response_customer.py
│ ├── +++ cardpay-3.6.21/cardpay/model/dispute_response_customer.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/dispute_response_dispute_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/dispute_response_dispute_data.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/dispute_response_merchant_order.py
│ ├── +++ cardpay-3.6.21/cardpay/model/dispute_response_merchant_order.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/dispute_response_payment_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/dispute_response_payment_data.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/ewallet_account.py
│ ├── +++ cardpay-3.6.21/cardpay/model/refund_request_e_wallet_account.py
│ │┄ Files 16% similar despite different names
│ │ @@ -13,15 +13,15 @@
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │  
│ │ -class EwalletAccount(object):
│ │ +class RefundRequestEWalletAccount(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │ @@ -43,15 +43,15 @@
│ │          "id": "id",
│ │          "type": "type",
│ │      }
│ │  
│ │      def __init__(
│ │          self, bank_branch=None, bank_code=None, id=None, type=None
│ │      ):  # noqa: E501
│ │ -        """EwalletAccount - a model defined in Swagger"""  # noqa: E501
│ │ +        """RefundRequestEWalletAccount - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._bank_branch = None
│ │          self._bank_code = None
│ │          self._id = None
│ │          self._type = None
│ │          self.discriminator = None
│ │  
│ │ @@ -62,132 +62,132 @@
│ │          if id is not None:
│ │              self.id = id
│ │          if type is not None:
│ │              self.type = type
│ │  
│ │      @property
│ │      def bank_branch(self):
│ │ -        """Gets the bank_branch of this EwalletAccount.  # noqa: E501
│ │ +        """Gets the bank_branch of this RefundRequestEWalletAccount.  # noqa: E501
│ │  
│ │ -        Customer bank branch number (name)  # noqa: E501
│ │ +        Customer bank branch number (name). Mandatory for BOLETO, LOTERICA, DEPOSITEXPRESSBRL.   # noqa: E501
│ │  
│ │ -        :return: The bank_branch of this EwalletAccount.  # noqa: E501
│ │ +        :return: The bank_branch of this RefundRequestEWalletAccount.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._bank_branch
│ │  
│ │      @bank_branch.setter
│ │      def bank_branch(self, bank_branch):
│ │ -        """Sets the bank_branch of this EwalletAccount.
│ │ +        """Sets the bank_branch of this RefundRequestEWalletAccount.
│ │  
│ │ -        Customer bank branch number (name)  # noqa: E501
│ │ +        Customer bank branch number (name). Mandatory for BOLETO, LOTERICA, DEPOSITEXPRESSBRL.   # noqa: E501
│ │  
│ │ -        :param bank_branch: The bank_branch of this EwalletAccount.  # noqa: E501
│ │ +        :param bank_branch: The bank_branch of this RefundRequestEWalletAccount.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if bank_branch is not None and len(bank_branch) > 50:
│ │ +        if bank_branch is not None and len(bank_branch) > 45:
│ │              raise ValueError(
│ │ -                "Invalid value for `bank_branch`, length must be less than or equal to `50`"
│ │ +                "Invalid value for `bank_branch`, length must be less than or equal to `45`"
│ │              )  # noqa: E501
│ │ -        if bank_branch is not None and len(bank_branch) < 1:
│ │ +        if bank_branch is not None and len(bank_branch) < 0:
│ │              raise ValueError(
│ │ -                "Invalid value for `bank_branch`, length must be greater than or equal to `1`"
│ │ +                "Invalid value for `bank_branch`, length must be greater than or equal to `0`"
│ │              )  # noqa: E501
│ │  
│ │          self._bank_branch = bank_branch
│ │  
│ │      @property
│ │      def bank_code(self):
│ │ -        """Gets the bank_code of this EwalletAccount.  # noqa: E501
│ │ +        """Gets the bank_code of this RefundRequestEWalletAccount.  # noqa: E501
│ │  
│ │ -        Customer bank code  # noqa: E501
│ │ +        Customer bank code. Mandatory for BOLETO, LOTERICA, DEPOSITEXPRESSBRL.  # noqa: E501
│ │  
│ │ -        :return: The bank_code of this EwalletAccount.  # noqa: E501
│ │ +        :return: The bank_code of this RefundRequestEWalletAccount.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._bank_code
│ │  
│ │      @bank_code.setter
│ │      def bank_code(self, bank_code):
│ │ -        """Sets the bank_code of this EwalletAccount.
│ │ +        """Sets the bank_code of this RefundRequestEWalletAccount.
│ │  
│ │ -        Customer bank code  # noqa: E501
│ │ +        Customer bank code. Mandatory for BOLETO, LOTERICA, DEPOSITEXPRESSBRL.  # noqa: E501
│ │  
│ │ -        :param bank_code: The bank_code of this EwalletAccount.  # noqa: E501
│ │ +        :param bank_code: The bank_code of this RefundRequestEWalletAccount.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if bank_code is not None and len(bank_code) > 6:
│ │ +        if bank_code is not None and len(bank_code) > 10:
│ │              raise ValueError(
│ │ -                "Invalid value for `bank_code`, length must be less than or equal to `6`"
│ │ +                "Invalid value for `bank_code`, length must be less than or equal to `10`"
│ │              )  # noqa: E501
│ │ -        if bank_code is not None and len(bank_code) < 1:
│ │ +        if bank_code is not None and len(bank_code) < 0:
│ │              raise ValueError(
│ │ -                "Invalid value for `bank_code`, length must be greater than or equal to `1`"
│ │ +                "Invalid value for `bank_code`, length must be greater than or equal to `0`"
│ │              )  # noqa: E501
│ │  
│ │          self._bank_code = bank_code
│ │  
│ │      @property
│ │      def id(self):
│ │ -        """Gets the id of this EwalletAccount.  # noqa: E501
│ │ +        """Gets the id of this RefundRequestEWalletAccount.  # noqa: E501
│ │  
│ │ -        Customer personal identification number  # noqa: E501
│ │ +        For BOLETO, LOTERICA, DEPOSITEXPRESSBRL: Customer bank account number.  # noqa: E501
│ │  
│ │ -        :return: The id of this EwalletAccount.  # noqa: E501
│ │ +        :return: The id of this RefundRequestEWalletAccount.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._id
│ │  
│ │      @id.setter
│ │      def id(self, id):
│ │ -        """Sets the id of this EwalletAccount.
│ │ +        """Sets the id of this RefundRequestEWalletAccount.
│ │  
│ │ -        Customer personal identification number  # noqa: E501
│ │ +        For BOLETO, LOTERICA, DEPOSITEXPRESSBRL: Customer bank account number.  # noqa: E501
│ │  
│ │ -        :param id: The id of this EwalletAccount.  # noqa: E501
│ │ +        :param id: The id of this RefundRequestEWalletAccount.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if id is not None and len(id) > 50:
│ │ +        if id is not None and len(id) > 256:
│ │              raise ValueError(
│ │ -                "Invalid value for `id`, length must be less than or equal to `50`"
│ │ +                "Invalid value for `id`, length must be less than or equal to `256`"
│ │              )  # noqa: E501
│ │          if id is not None and len(id) < 1:
│ │              raise ValueError(
│ │                  "Invalid value for `id`, length must be greater than or equal to `1`"
│ │              )  # noqa: E501
│ │  
│ │          self._id = id
│ │  
│ │      @property
│ │      def type(self):
│ │ -        """Gets the type of this EwalletAccount.  # noqa: E501
│ │ +        """Gets the type of this RefundRequestEWalletAccount.  # noqa: E501
│ │  
│ │ -        Customer account type  # noqa: E501
│ │ +        Customer account type. Mandatory for BOLETO, LOTERICA, DEPOSITEXPRESSBRL. 1 - Savings account, 2 - Checking account  # noqa: E501
│ │  
│ │ -        :return: The type of this EwalletAccount.  # noqa: E501
│ │ +        :return: The type of this RefundRequestEWalletAccount.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._type
│ │  
│ │      @type.setter
│ │      def type(self, type):
│ │ -        """Sets the type of this EwalletAccount.
│ │ +        """Sets the type of this RefundRequestEWalletAccount.
│ │  
│ │ -        Customer account type  # noqa: E501
│ │ +        Customer account type. Mandatory for BOLETO, LOTERICA, DEPOSITEXPRESSBRL. 1 - Savings account, 2 - Checking account  # noqa: E501
│ │  
│ │ -        :param type: The type of this EwalletAccount.  # noqa: E501
│ │ +        :param type: The type of this RefundRequestEWalletAccount.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if type is not None and len(type) > 4:
│ │ +        if type is not None and len(type) > 1:
│ │              raise ValueError(
│ │ -                "Invalid value for `type`, length must be less than or equal to `4`"
│ │ +                "Invalid value for `type`, length must be less than or equal to `1`"
│ │              )  # noqa: E501
│ │ -        if type is not None and len(type) < 1:
│ │ +        if type is not None and len(type) < 0:
│ │              raise ValueError(
│ │ -                "Invalid value for `type`, length must be greater than or equal to `1`"
│ │ +                "Invalid value for `type`, length must be greater than or equal to `0`"
│ │              )  # noqa: E501
│ │  
│ │          self._type = type
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │ @@ -208,15 +208,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(EwalletAccount, dict):
│ │ +        if issubclass(RefundRequestEWalletAccount, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -224,15 +224,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, EwalletAccount):
│ │ +        if not isinstance(other, RefundRequestEWalletAccount):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/filing_recurring_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/filing_recurring_data.py
│ │┄ Files 13% similar despite different names
│ │ @@ -31,56 +31,50 @@
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │          "currency": "str",
│ │          "dynamic_descriptor": "str",
│ │          "initiator": "str",
│ │          "note": "str",
│ │ -        "three_ds_challenge_indicator": "str",
│ │          "trans_type": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │          "currency": "currency",
│ │          "dynamic_descriptor": "dynamic_descriptor",
│ │          "initiator": "initiator",
│ │          "note": "note",
│ │ -        "three_ds_challenge_indicator": "three_ds_challenge_indicator",
│ │          "trans_type": "trans_type",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │          currency=None,
│ │          dynamic_descriptor=None,
│ │          initiator=None,
│ │          note=None,
│ │ -        three_ds_challenge_indicator=None,
│ │          trans_type=None,
│ │      ):  # noqa: E501
│ │          """FilingRecurringData - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._currency = None
│ │          self._dynamic_descriptor = None
│ │          self._initiator = None
│ │          self._note = None
│ │ -        self._three_ds_challenge_indicator = None
│ │          self._trans_type = None
│ │          self.discriminator = None
│ │  
│ │          if currency is not None:
│ │              self.currency = currency
│ │          if dynamic_descriptor is not None:
│ │              self.dynamic_descriptor = dynamic_descriptor
│ │          if initiator is not None:
│ │              self.initiator = initiator
│ │          if note is not None:
│ │              self.note = note
│ │ -        if three_ds_challenge_indicator is not None:
│ │ -            self.three_ds_challenge_indicator = three_ds_challenge_indicator
│ │          if trans_type is not None:
│ │              self.trans_type = trans_type
│ │  
│ │      @property
│ │      def currency(self):
│ │          """Gets the currency of this FilingRecurringData.  # noqa: E501
│ │  
│ │ @@ -196,41 +190,14 @@
│ │          if note is not None and len(note) < 0:
│ │              raise ValueError(
│ │                  "Invalid value for `note`, length must be greater than or equal to `0`"
│ │              )  # noqa: E501
│ │  
│ │          self._note = note
│ │  
│ │ -    @property
│ │ -    def three_ds_challenge_indicator(self):
│ │ -        """Gets the three_ds_challenge_indicator of this FilingRecurringData.  # noqa: E501
│ │ -
│ │ -
│ │ -        :return: The three_ds_challenge_indicator of this FilingRecurringData.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._three_ds_challenge_indicator
│ │ -
│ │ -    @three_ds_challenge_indicator.setter
│ │ -    def three_ds_challenge_indicator(self, three_ds_challenge_indicator):
│ │ -        """Sets the three_ds_challenge_indicator of this FilingRecurringData.
│ │ -
│ │ -
│ │ -        :param three_ds_challenge_indicator: The three_ds_challenge_indicator of this FilingRecurringData.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -        if three_ds_challenge_indicator is not None and not re.search(
│ │ -            r"01|04", three_ds_challenge_indicator
│ │ -        ):  # noqa: E501
│ │ -            raise ValueError(
│ │ -                r"Invalid value for `three_ds_challenge_indicator`, must be a follow pattern or equal to `/01|04/`"
│ │ -            )  # noqa: E501
│ │ -
│ │ -        self._three_ds_challenge_indicator = three_ds_challenge_indicator
│ │ -
│ │      class TransType(object):
│ │          _01 = "01"
│ │          _03 = "03"
│ │          _10 = "10"
│ │          _11 = "11"
│ │          _28 = "28"
│ │   --- cardpay-3.45.8/cardpay/model/filing_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/filing_request.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/filing_request_merchant_order.py
│ ├── +++ cardpay-3.6.21/cardpay/model/filing_request_merchant_order.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/filing_request_subscription_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/filing_request_subscription_data.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/filter_parameters.py
│ ├── +++ cardpay-3.6.21/cardpay/model/filter_parameters.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/flight.py
│ ├── +++ cardpay-3.6.21/cardpay/model/flight.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/flights.py
│ ├── +++ cardpay-3.6.21/cardpay/model/flights.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/installment_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/installment_data.py
│ │┄ Files 16% similar despite different names
│ │ @@ -34,64 +34,76 @@
│ │          "amount": "float",
│ │          "currency": "str",
│ │          "dynamic_descriptor": "str",
│ │          "generate_token": "bool",
│ │          "initiator": "str",
│ │          "installment_amount": "float",
│ │          "installment_type": "str",
│ │ +        "interval": "int",
│ │          "note": "str",
│ │          "payments": "int",
│ │ +        "period": "str",
│ │          "preauth": "bool",
│ │ -        "three_ds_challenge_indicator": "str",
│ │ +        "retries": "int",
│ │ +        "subscription_start": "datetime",
│ │          "trans_type": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │          "amount": "amount",
│ │          "currency": "currency",
│ │          "dynamic_descriptor": "dynamic_descriptor",
│ │          "generate_token": "generate_token",
│ │          "initiator": "initiator",
│ │          "installment_amount": "installment_amount",
│ │          "installment_type": "installment_type",
│ │ +        "interval": "interval",
│ │          "note": "note",
│ │          "payments": "payments",
│ │ +        "period": "period",
│ │          "preauth": "preauth",
│ │ -        "three_ds_challenge_indicator": "three_ds_challenge_indicator",
│ │ +        "retries": "retries",
│ │ +        "subscription_start": "subscription_start",
│ │          "trans_type": "trans_type",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │          amount=None,
│ │          currency=None,
│ │          dynamic_descriptor=None,
│ │          generate_token=None,
│ │          initiator=None,
│ │          installment_amount=None,
│ │          installment_type=None,
│ │ +        interval=None,
│ │          note=None,
│ │          payments=None,
│ │ +        period=None,
│ │          preauth=None,
│ │ -        three_ds_challenge_indicator=None,
│ │ +        retries=None,
│ │ +        subscription_start=None,
│ │          trans_type=None,
│ │      ):  # noqa: E501
│ │          """InstallmentData - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._amount = None
│ │          self._currency = None
│ │          self._dynamic_descriptor = None
│ │          self._generate_token = None
│ │          self._initiator = None
│ │          self._installment_amount = None
│ │          self._installment_type = None
│ │ +        self._interval = None
│ │          self._note = None
│ │          self._payments = None
│ │ +        self._period = None
│ │          self._preauth = None
│ │ -        self._three_ds_challenge_indicator = None
│ │ +        self._retries = None
│ │ +        self._subscription_start = None
│ │          self._trans_type = None
│ │          self.discriminator = None
│ │  
│ │          if amount is not None:
│ │              self.amount = amount
│ │          self.currency = currency
│ │          if dynamic_descriptor is not None:
│ │ @@ -99,41 +111,47 @@
│ │          if generate_token is not None:
│ │              self.generate_token = generate_token
│ │          self.initiator = initiator
│ │          if installment_amount is not None:
│ │              self.installment_amount = installment_amount
│ │          if installment_type is not None:
│ │              self.installment_type = installment_type
│ │ +        if interval is not None:
│ │ +            self.interval = interval
│ │          if note is not None:
│ │              self.note = note
│ │          if payments is not None:
│ │              self.payments = payments
│ │ +        if period is not None:
│ │ +            self.period = period
│ │          if preauth is not None:
│ │              self.preauth = preauth
│ │ -        if three_ds_challenge_indicator is not None:
│ │ -            self.three_ds_challenge_indicator = three_ds_challenge_indicator
│ │ +        if retries is not None:
│ │ +            self.retries = retries
│ │ +        if subscription_start is not None:
│ │ +            self.subscription_start = subscription_start
│ │          if trans_type is not None:
│ │              self.trans_type = trans_type
│ │  
│ │      @property
│ │      def amount(self):
│ │          """Gets the amount of this InstallmentData.  # noqa: E501
│ │  
│ │ -        The total transaction amount in selected currency with dot as a decimal separator, must be less than 10 billion  # noqa: E501
│ │ +        The total transaction amount in selected currency with dot as a decimal separator, must be less than 100 millions  # noqa: E501
│ │  
│ │          :return: The amount of this InstallmentData.  # noqa: E501
│ │          :rtype: float
│ │          """
│ │          return self._amount
│ │  
│ │      @amount.setter
│ │      def amount(self, amount):
│ │          """Sets the amount of this InstallmentData.
│ │  
│ │ -        The total transaction amount in selected currency with dot as a decimal separator, must be less than 10 billion  # noqa: E501
│ │ +        The total transaction amount in selected currency with dot as a decimal separator, must be less than 100 millions  # noqa: E501
│ │  
│ │          :param amount: The amount of this InstallmentData.  # noqa: E501
│ │          :type: float
│ │          """
│ │  
│ │          self._amount = amount
│ │  
│ │ @@ -272,40 +290,67 @@
│ │  
│ │          self._installment_amount = installment_amount
│ │  
│ │      @property
│ │      def installment_type(self):
│ │          """Gets the installment_type of this InstallmentData.  # noqa: E501
│ │  
│ │ -        Installment type, 2 possible values: `IF` - issuer financed `MF_HOLD' - merchant financed hold  # noqa: E501
│ │ +        Installment type, 4 possible values: `IF` - issuer financed `MF_HOLD' - merchant financed hold `MF_HOLD_SPLIT' - merchant financed split `MF_WITHOUT_HOLD' - merchant financed without hold   # noqa: E501
│ │  
│ │          :return: The installment_type of this InstallmentData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._installment_type
│ │  
│ │      @installment_type.setter
│ │      def installment_type(self, installment_type):
│ │          """Sets the installment_type of this InstallmentData.
│ │  
│ │ -        Installment type, 2 possible values: `IF` - issuer financed `MF_HOLD' - merchant financed hold  # noqa: E501
│ │ +        Installment type, 4 possible values: `IF` - issuer financed `MF_HOLD' - merchant financed hold `MF_HOLD_SPLIT' - merchant financed split `MF_WITHOUT_HOLD' - merchant financed without hold   # noqa: E501
│ │  
│ │          :param installment_type: The installment_type of this InstallmentData.  # noqa: E501
│ │          :type: str
│ │          """
│ │          if installment_type is not None and not re.search(
│ │ -            r"IF|MF_HOLD", installment_type
│ │ +            r"IF|MF_HOLD|MF_HOLD_SPLIT|MF_WITHOUT_HOLD", installment_type
│ │          ):  # noqa: E501
│ │              raise ValueError(
│ │ -                r"Invalid value for `installment_type`, must be a follow pattern or equal to `/IF|MF_HOLD/`"
│ │ +                r"Invalid value for `installment_type`, must be a follow pattern or equal to `/IF|MF_HOLD|MF_HOLD_SPLIT|MF_WITHOUT_HOLD/`"
│ │              )  # noqa: E501
│ │  
│ │          self._installment_type = installment_type
│ │  
│ │      @property
│ │ +    def interval(self):
│ │ +        """Gets the interval of this InstallmentData.  # noqa: E501
│ │ +
│ │ +        Frequency interval of period, can be 1-365 depending on selected period value. Minimum value of period + interval can be 7 days / 1 week. Maximum value of period + interval plan can be 365 days / 52 weeks / 12 months / 1 year. 1-60 minutes - for **sandbox environment** and testing purpose only.  # noqa: E501
│ │ +
│ │ +        :return: The interval of this InstallmentData.  # noqa: E501
│ │ +        :rtype: int
│ │ +        """
│ │ +        return self._interval
│ │ +
│ │ +    @interval.setter
│ │ +    def interval(self, interval):
│ │ +        """Sets the interval of this InstallmentData.
│ │ +
│ │ +        Frequency interval of period, can be 1-365 depending on selected period value. Minimum value of period + interval can be 7 days / 1 week. Maximum value of period + interval plan can be 365 days / 52 weeks / 12 months / 1 year. 1-60 minutes - for **sandbox environment** and testing purpose only.  # noqa: E501
│ │ +
│ │ +        :param interval: The interval of this InstallmentData.  # noqa: E501
│ │ +        :type: int
│ │ +        """
│ │ +        if interval is not None and interval < 1:  # noqa: E501
│ │ +            raise ValueError(
│ │ +                "Invalid value for `interval`, must be a value greater than or equal to `1`"
│ │ +            )  # noqa: E501
│ │ +
│ │ +        self._interval = interval
│ │ +
│ │ +    @property
│ │      def note(self):
│ │          """Gets the note of this InstallmentData.  # noqa: E501
│ │  
│ │          Note about the recurring that will not be displayed to customer.  # noqa: E501
│ │  
│ │          :return: The note of this InstallmentData.  # noqa: E501
│ │          :rtype: str
│ │ @@ -332,82 +377,138 @@
│ │  
│ │          self._note = note
│ │  
│ │      @property
│ │      def payments(self):
│ │          """Gets the payments of this InstallmentData.  # noqa: E501
│ │  
│ │ -        Number of total payments, to be charged per defined interval. For installment subscription with installment_type = `MF_HOLD` can be 2-12. For Mexican installment subscription (installment_type = `IF`) should be 1-99.  # noqa: E501
│ │ +        Number of total payments to be charged per defined interval, can be 2-200. For Mexican installment subscription (installment_type = `IF`) should be 1-99.  # noqa: E501
│ │  
│ │          :return: The payments of this InstallmentData.  # noqa: E501
│ │          :rtype: int
│ │          """
│ │          return self._payments
│ │  
│ │      @payments.setter
│ │      def payments(self, payments):
│ │          """Sets the payments of this InstallmentData.
│ │  
│ │ -        Number of total payments, to be charged per defined interval. For installment subscription with installment_type = `MF_HOLD` can be 2-12. For Mexican installment subscription (installment_type = `IF`) should be 1-99.  # noqa: E501
│ │ +        Number of total payments to be charged per defined interval, can be 2-200. For Mexican installment subscription (installment_type = `IF`) should be 1-99.  # noqa: E501
│ │  
│ │          :param payments: The payments of this InstallmentData.  # noqa: E501
│ │          :type: int
│ │          """
│ │  
│ │          self._payments = payments
│ │  
│ │ +    class Period(object):
│ │ +        MINUTE = "minute"
│ │ +        DAY = "day"
│ │ +        WEEK = "week"
│ │ +        MONTH = "month"
│ │ +        YEAR = "year"
│ │ +
│ │ +    @property
│ │ +    def period(self):
│ │ +        """Gets the period of this InstallmentData.  # noqa: E501
│ │ +
│ │ +        Initial period of recurring, can be `day`, `week`, `month`, `year`  # noqa: E501
│ │ +
│ │ +        :return: The period of this InstallmentData.  # noqa: E501
│ │ +        :rtype: str
│ │ +        """
│ │ +        return self._period
│ │ +
│ │ +    @period.setter
│ │ +    def period(self, period):
│ │ +        """Sets the period of this InstallmentData.
│ │ +
│ │ +        Initial period of recurring, can be `day`, `week`, `month`, `year`  # noqa: E501
│ │ +
│ │ +        :param period: The period of this InstallmentData.  # noqa: E501
│ │ +        :type: str
│ │ +        """
│ │ +        allowed_values = ["minute", "day", "week", "month", "year"]  # noqa: E501
│ │ +        if period not in allowed_values:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `period` ({0}), must be one of {1}".format(  # noqa: E501
│ │ +                    period, allowed_values
│ │ +                )
│ │ +            )
│ │ +
│ │ +        self._period = period
│ │ +
│ │      @property
│ │      def preauth(self):
│ │          """Gets the preauth of this InstallmentData.  # noqa: E501
│ │  
│ │ -        If set to `true`, the amount will not be captured but only blocked. Installment with `preauth` attribute will be voided automatically in 7 days from the time of creating the preauth transaction.  # noqa: E501
│ │ +        If set to `true`, the amount will not be captured but only blocked. Installment with `preauth` attribute will be voided automatically in 5 days from the time of creating the preauth transaction.  # noqa: E501
│ │  
│ │          :return: The preauth of this InstallmentData.  # noqa: E501
│ │          :rtype: bool
│ │          """
│ │          return self._preauth
│ │  
│ │      @preauth.setter
│ │      def preauth(self, preauth):
│ │          """Sets the preauth of this InstallmentData.
│ │  
│ │ -        If set to `true`, the amount will not be captured but only blocked. Installment with `preauth` attribute will be voided automatically in 7 days from the time of creating the preauth transaction.  # noqa: E501
│ │ +        If set to `true`, the amount will not be captured but only blocked. Installment with `preauth` attribute will be voided automatically in 5 days from the time of creating the preauth transaction.  # noqa: E501
│ │  
│ │          :param preauth: The preauth of this InstallmentData.  # noqa: E501
│ │          :type: bool
│ │          """
│ │  
│ │          self._preauth = preauth
│ │  
│ │      @property
│ │ -    def three_ds_challenge_indicator(self):
│ │ -        """Gets the three_ds_challenge_indicator of this InstallmentData.  # noqa: E501
│ │ +    def retries(self):
│ │ +        """Gets the retries of this InstallmentData.  # noqa: E501
│ │  
│ │ +        Number of daily basis retry attempts in case of payment has not been captured successfully, from 1 to 15 attempts can be specified.  # noqa: E501
│ │  
│ │ -        :return: The three_ds_challenge_indicator of this InstallmentData.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The retries of this InstallmentData.  # noqa: E501
│ │ +        :rtype: int
│ │          """
│ │ -        return self._three_ds_challenge_indicator
│ │ +        return self._retries
│ │  
│ │ -    @three_ds_challenge_indicator.setter
│ │ -    def three_ds_challenge_indicator(self, three_ds_challenge_indicator):
│ │ -        """Sets the three_ds_challenge_indicator of this InstallmentData.
│ │ +    @retries.setter
│ │ +    def retries(self, retries):
│ │ +        """Sets the retries of this InstallmentData.
│ │  
│ │ +        Number of daily basis retry attempts in case of payment has not been captured successfully, from 1 to 15 attempts can be specified.  # noqa: E501
│ │  
│ │ -        :param three_ds_challenge_indicator: The three_ds_challenge_indicator of this InstallmentData.  # noqa: E501
│ │ -        :type: str
│ │ +        :param retries: The retries of this InstallmentData.  # noqa: E501
│ │ +        :type: int
│ │ +        """
│ │ +
│ │ +        self._retries = retries
│ │ +
│ │ +    @property
│ │ +    def subscription_start(self):
│ │ +        """Gets the subscription_start of this InstallmentData.  # noqa: E501
│ │ +
│ │ +        The date in yyyy-MM-dd format when subscription will actually become activated (grace period). Auth request will be created but Customer will be charged only when subscription start date comes. Leave it empty or specify the current date to activate subscription at once without any grace period applied.  # noqa: E501
│ │ +
│ │ +        :return: The subscription_start of this InstallmentData.  # noqa: E501
│ │ +        :rtype: datetime
│ │ +        """
│ │ +        return self._subscription_start
│ │ +
│ │ +    @subscription_start.setter
│ │ +    def subscription_start(self, subscription_start):
│ │ +        """Sets the subscription_start of this InstallmentData.
│ │ +
│ │ +        The date in yyyy-MM-dd format when subscription will actually become activated (grace period). Auth request will be created but Customer will be charged only when subscription start date comes. Leave it empty or specify the current date to activate subscription at once without any grace period applied.  # noqa: E501
│ │ +
│ │ +        :param subscription_start: The subscription_start of this InstallmentData.  # noqa: E501
│ │ +        :type: datetime
│ │          """
│ │ -        if three_ds_challenge_indicator is not None and not re.search(
│ │ -            r"01|04", three_ds_challenge_indicator
│ │ -        ):  # noqa: E501
│ │ -            raise ValueError(
│ │ -                r"Invalid value for `three_ds_challenge_indicator`, must be a follow pattern or equal to `/01|04/`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._three_ds_challenge_indicator = three_ds_challenge_indicator
│ │ +        self._subscription_start = subscription_start
│ │  
│ │      class TransType(object):
│ │          _01 = "01"
│ │          _03 = "03"
│ │          _10 = "10"
│ │          _11 = "11"
│ │          _28 = "28"
│ │   --- cardpay-3.45.8/cardpay/model/invoice_creation_data_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/subscription_get_response_plan.py
│ │┄ Files 13% similar despite different names
│ │ @@ -13,15 +13,15 @@
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │  
│ │ -class InvoiceCreationDataResponse(object):
│ │ +class SubscriptionGetResponsePlan(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │ @@ -31,40 +31,40 @@
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {"id": "str"}
│ │  
│ │      attribute_map = {"id": "id"}
│ │  
│ │      def __init__(self, id=None):  # noqa: E501
│ │ -        """InvoiceCreationDataResponse - a model defined in Swagger"""  # noqa: E501
│ │ +        """SubscriptionGetResponsePlan - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._id = None
│ │          self.discriminator = None
│ │  
│ │          if id is not None:
│ │              self.id = id
│ │  
│ │      @property
│ │      def id(self):
│ │ -        """Gets the id of this InvoiceCreationDataResponse.  # noqa: E501
│ │ +        """Gets the id of this SubscriptionGetResponsePlan.  # noqa: E501
│ │  
│ │ -        Identifier of invoice  # noqa: E501
│ │ +        Plan ID  # noqa: E501
│ │  
│ │ -        :return: The id of this InvoiceCreationDataResponse.  # noqa: E501
│ │ +        :return: The id of this SubscriptionGetResponsePlan.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._id
│ │  
│ │      @id.setter
│ │      def id(self, id):
│ │ -        """Sets the id of this InvoiceCreationDataResponse.
│ │ +        """Sets the id of this SubscriptionGetResponsePlan.
│ │  
│ │ -        Identifier of invoice  # noqa: E501
│ │ +        Plan ID  # noqa: E501
│ │  
│ │ -        :param id: The id of this InvoiceCreationDataResponse.  # noqa: E501
│ │ +        :param id: The id of this SubscriptionGetResponsePlan.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._id = id
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │ @@ -86,15 +86,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(InvoiceCreationDataResponse, dict):
│ │ +        if issubclass(SubscriptionGetResponsePlan, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -102,15 +102,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, InvoiceCreationDataResponse):
│ │ +        if not isinstance(other, SubscriptionGetResponsePlan):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/invoice_creation_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/card_binding_response.py
│ │┄ Files 22% similar despite different names
│ │ @@ -12,96 +12,96 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ -from cardpay.model.invoice_creation_data_response import (
│ │ -    InvoiceCreationDataResponse,
│ │ +from cardpay.model.card_binding_recurring_data_response import (
│ │ +    CardBindingRecurringDataResponse,
│ │  )  # noqa: F401,E501
│ │  
│ │  
│ │ -class InvoiceCreationResponse(object):
│ │ +class CardBindingResponse(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │ -        "invoice_data": "InvoiceCreationDataResponse",
│ │ -        "invoice_url": "str",
│ │ +        "recurring_data": "CardBindingRecurringDataResponse",
│ │ +        "redirect_url": "str",
│ │      }
│ │  
│ │ -    attribute_map = {"invoice_data": "invoice_data", "invoice_url": "invoice_url"}
│ │ +    attribute_map = {"recurring_data": "recurring_data", "redirect_url": "redirect_url"}
│ │  
│ │ -    def __init__(self, invoice_data=None, invoice_url=None):  # noqa: E501
│ │ -        """InvoiceCreationResponse - a model defined in Swagger"""  # noqa: E501
│ │ +    def __init__(self, recurring_data=None, redirect_url=None):  # noqa: E501
│ │ +        """CardBindingResponse - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._invoice_data = None
│ │ -        self._invoice_url = None
│ │ +        self._recurring_data = None
│ │ +        self._redirect_url = None
│ │          self.discriminator = None
│ │  
│ │ -        if invoice_data is not None:
│ │ -            self.invoice_data = invoice_data
│ │ -        if invoice_url is not None:
│ │ -            self.invoice_url = invoice_url
│ │ +        if recurring_data is not None:
│ │ +            self.recurring_data = recurring_data
│ │ +        if redirect_url is not None:
│ │ +            self.redirect_url = redirect_url
│ │  
│ │      @property
│ │ -    def invoice_data(self):
│ │ -        """Gets the invoice_data of this InvoiceCreationResponse.  # noqa: E501
│ │ +    def recurring_data(self):
│ │ +        """Gets the recurring_data of this CardBindingResponse.  # noqa: E501
│ │  
│ │ -        Structure of invoice data  # noqa: E501
│ │ +        Recurring data  # noqa: E501
│ │  
│ │ -        :return: The invoice_data of this InvoiceCreationResponse.  # noqa: E501
│ │ -        :rtype: InvoiceCreationDataResponse
│ │ +        :return: The recurring_data of this CardBindingResponse.  # noqa: E501
│ │ +        :rtype: CardBindingRecurringDataResponse
│ │          """
│ │ -        return self._invoice_data
│ │ +        return self._recurring_data
│ │  
│ │ -    @invoice_data.setter
│ │ -    def invoice_data(self, invoice_data):
│ │ -        """Sets the invoice_data of this InvoiceCreationResponse.
│ │ +    @recurring_data.setter
│ │ +    def recurring_data(self, recurring_data):
│ │ +        """Sets the recurring_data of this CardBindingResponse.
│ │  
│ │ -        Structure of invoice data  # noqa: E501
│ │ +        Recurring data  # noqa: E501
│ │  
│ │ -        :param invoice_data: The invoice_data of this InvoiceCreationResponse.  # noqa: E501
│ │ -        :type: InvoiceCreationDataResponse
│ │ +        :param recurring_data: The recurring_data of this CardBindingResponse.  # noqa: E501
│ │ +        :type: CardBindingRecurringDataResponse
│ │          """
│ │  
│ │ -        self._invoice_data = invoice_data
│ │ +        self._recurring_data = recurring_data
│ │  
│ │      @property
│ │ -    def invoice_url(self):
│ │ -        """Gets the invoice_url of this InvoiceCreationResponse.  # noqa: E501
│ │ +    def redirect_url(self):
│ │ +        """Gets the redirect_url of this CardBindingResponse.  # noqa: E501
│ │  
│ │ -        Invoice URL  # noqa: E501
│ │ +        URL Customer should be redirected to  # noqa: E501
│ │  
│ │ -        :return: The invoice_url of this InvoiceCreationResponse.  # noqa: E501
│ │ +        :return: The redirect_url of this CardBindingResponse.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._invoice_url
│ │ +        return self._redirect_url
│ │  
│ │ -    @invoice_url.setter
│ │ -    def invoice_url(self, invoice_url):
│ │ -        """Sets the invoice_url of this InvoiceCreationResponse.
│ │ +    @redirect_url.setter
│ │ +    def redirect_url(self, redirect_url):
│ │ +        """Sets the redirect_url of this CardBindingResponse.
│ │  
│ │ -        Invoice URL  # noqa: E501
│ │ +        URL Customer should be redirected to  # noqa: E501
│ │  
│ │ -        :param invoice_url: The invoice_url of this InvoiceCreationResponse.  # noqa: E501
│ │ +        :param redirect_url: The redirect_url of this CardBindingResponse.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │ -        self._invoice_url = invoice_url
│ │ +        self._redirect_url = redirect_url
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -119,15 +119,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(InvoiceCreationResponse, dict):
│ │ +        if issubclass(CardBindingResponse, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -135,15 +135,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, InvoiceCreationResponse):
│ │ +        if not isinstance(other, CardBindingResponse):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/invoice_customer.py
│ ├── +++ cardpay-3.6.21/cardpay/model/subscription_list.py
│ │┄ Files 20% similar despite different names
│ │ @@ -12,89 +12,93 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ +from cardpay.model.subscription_get_response import (
│ │ +    SubscriptionGetResponse,
│ │ +)  # noqa: F401,E501
│ │  
│ │ -class InvoiceCustomer(object):
│ │ +
│ │ +class SubscriptionList(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │ -    swagger_types = {"email": "str", "phone": "str"}
│ │ +    swagger_types = {"data": "list[SubscriptionGetResponse]", "has_more": "bool"}
│ │  
│ │ -    attribute_map = {"email": "email", "phone": "phone"}
│ │ +    attribute_map = {"data": "data", "has_more": "has_more"}
│ │  
│ │ -    def __init__(self, email=None, phone=None):  # noqa: E501
│ │ -        """InvoiceCustomer - a model defined in Swagger"""  # noqa: E501
│ │ +    def __init__(self, data=None, has_more=None):  # noqa: E501
│ │ +        """SubscriptionList - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._email = None
│ │ -        self._phone = None
│ │ +        self._data = None
│ │ +        self._has_more = None
│ │          self.discriminator = None
│ │  
│ │ -        if email is not None:
│ │ -            self.email = email
│ │ -        if phone is not None:
│ │ -            self.phone = phone
│ │ +        if data is not None:
│ │ +            self.data = data
│ │ +        if has_more is not None:
│ │ +            self.has_more = has_more
│ │  
│ │      @property
│ │ -    def email(self):
│ │ -        """Gets the email of this InvoiceCustomer.  # noqa: E501
│ │ +    def data(self):
│ │ +        """Gets the data of this SubscriptionList.  # noqa: E501
│ │  
│ │ -        Email address of the customer  # noqa: E501
│ │ +        List of found objects  # noqa: E501
│ │  
│ │ -        :return: The email of this InvoiceCustomer.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The data of this SubscriptionList.  # noqa: E501
│ │ +        :rtype: list[SubscriptionGetResponse]
│ │          """
│ │ -        return self._email
│ │ +        return self._data
│ │  
│ │ -    @email.setter
│ │ -    def email(self, email):
│ │ -        """Sets the email of this InvoiceCustomer.
│ │ +    @data.setter
│ │ +    def data(self, data):
│ │ +        """Sets the data of this SubscriptionList.
│ │  
│ │ -        Email address of the customer  # noqa: E501
│ │ +        List of found objects  # noqa: E501
│ │  
│ │ -        :param email: The email of this InvoiceCustomer.  # noqa: E501
│ │ -        :type: str
│ │ +        :param data: The data of this SubscriptionList.  # noqa: E501
│ │ +        :type: list[SubscriptionGetResponse]
│ │          """
│ │  
│ │ -        self._email = email
│ │ +        self._data = data
│ │  
│ │      @property
│ │ -    def phone(self):
│ │ -        """Gets the phone of this InvoiceCustomer.  # noqa: E501
│ │ +    def has_more(self):
│ │ +        """Gets the has_more of this SubscriptionList.  # noqa: E501
│ │  
│ │ -        Customer phone number  # noqa: E501
│ │ +        Indicates if there are more elements for this period than were returned  # noqa: E501
│ │  
│ │ -        :return: The phone of this InvoiceCustomer.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The has_more of this SubscriptionList.  # noqa: E501
│ │ +        :rtype: bool
│ │          """
│ │ -        return self._phone
│ │ +        return self._has_more
│ │  
│ │ -    @phone.setter
│ │ -    def phone(self, phone):
│ │ -        """Sets the phone of this InvoiceCustomer.
│ │ +    @has_more.setter
│ │ +    def has_more(self, has_more):
│ │ +        """Sets the has_more of this SubscriptionList.
│ │  
│ │ -        Customer phone number  # noqa: E501
│ │ +        Indicates if there are more elements for this period than were returned  # noqa: E501
│ │  
│ │ -        :param phone: The phone of this InvoiceCustomer.  # noqa: E501
│ │ -        :type: str
│ │ +        :param has_more: The has_more of this SubscriptionList.  # noqa: E501
│ │ +        :type: bool
│ │          """
│ │  
│ │ -        self._phone = phone
│ │ +        self._has_more = has_more
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -112,15 +116,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(InvoiceCustomer, dict):
│ │ +        if issubclass(SubscriptionList, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -128,15 +132,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, InvoiceCustomer):
│ │ +        if not isinstance(other, SubscriptionList):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/invoice_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payout_request_card_account.py
│ │┄ Files 25% similar despite different names
│ │ @@ -12,192 +12,172 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ +from cardpay.model.billing_address import BillingAddress  # noqa: F401,E501
│ │ +from cardpay.model.payout_request_card import PayoutRequestCard  # noqa: F401,E501
│ │  
│ │ -class InvoiceData(object):
│ │ +
│ │ +class PayoutRequestCardAccount(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │ -        "amount": "float",
│ │ -        "currency": "str",
│ │ -        "expire_at": "datetime",
│ │ -        "installment_type": "str",
│ │ -        "installments": "list[int]",
│ │ +        "billing_address": "BillingAddress",
│ │ +        "card": "PayoutRequestCard",
│ │ +        "recipient_info": "str",
│ │ +        "token": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │ -        "amount": "amount",
│ │ -        "currency": "currency",
│ │ -        "expire_at": "expire_at",
│ │ -        "installment_type": "installment_type",
│ │ -        "installments": "installments",
│ │ +        "billing_address": "billing_address",
│ │ +        "card": "card",
│ │ +        "recipient_info": "recipient_info",
│ │ +        "token": "token",
│ │      }
│ │  
│ │      def __init__(
│ │ -        self,
│ │ -        amount=None,
│ │ -        currency=None,
│ │ -        expire_at=None,
│ │ -        installment_type=None,
│ │ -        installments=None,
│ │ +        self, billing_address=None, card=None, recipient_info=None, token=None
│ │      ):  # noqa: E501
│ │ -        """InvoiceData - a model defined in Swagger"""  # noqa: E501
│ │ +        """PayoutRequestCardAccount - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._amount = None
│ │ -        self._currency = None
│ │ -        self._expire_at = None
│ │ -        self._installment_type = None
│ │ -        self._installments = None
│ │ +        self._billing_address = None
│ │ +        self._card = None
│ │ +        self._recipient_info = None
│ │ +        self._token = None
│ │          self.discriminator = None
│ │  
│ │ -        self.amount = amount
│ │ -        self.currency = currency
│ │ -        if expire_at is not None:
│ │ -            self.expire_at = expire_at
│ │ -        if installment_type is not None:
│ │ -            self.installment_type = installment_type
│ │ -        if installments is not None:
│ │ -            self.installments = installments
│ │ +        if billing_address is not None:
│ │ +            self.billing_address = billing_address
│ │ +        if card is not None:
│ │ +            self.card = card
│ │ +        if recipient_info is not None:
│ │ +            self.recipient_info = recipient_info
│ │ +        if token is not None:
│ │ +            self.token = token
│ │  
│ │      @property
│ │ -    def amount(self):
│ │ -        """Gets the amount of this InvoiceData.  # noqa: E501
│ │ +    def billing_address(self):
│ │ +        """Gets the billing_address of this PayoutRequestCardAccount.  # noqa: E501
│ │  
│ │ -        The total invoice amount in selected currency with dot as a decimal separator, must be less than 10 billion  # noqa: E501
│ │ +        Address for billing  # noqa: E501
│ │  
│ │ -        :return: The amount of this InvoiceData.  # noqa: E501
│ │ -        :rtype: float
│ │ +        :return: The billing_address of this PayoutRequestCardAccount.  # noqa: E501
│ │ +        :rtype: BillingAddress
│ │          """
│ │ -        return self._amount
│ │ +        return self._billing_address
│ │  
│ │ -    @amount.setter
│ │ -    def amount(self, amount):
│ │ -        """Sets the amount of this InvoiceData.
│ │ +    @billing_address.setter
│ │ +    def billing_address(self, billing_address):
│ │ +        """Sets the billing_address of this PayoutRequestCardAccount.
│ │  
│ │ -        The total invoice amount in selected currency with dot as a decimal separator, must be less than 10 billion  # noqa: E501
│ │ +        Address for billing  # noqa: E501
│ │  
│ │ -        :param amount: The amount of this InvoiceData.  # noqa: E501
│ │ -        :type: float
│ │ +        :param billing_address: The billing_address of this PayoutRequestCardAccount.  # noqa: E501
│ │ +        :type: BillingAddress
│ │          """
│ │ -        if amount is None:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `amount`, must not be `None`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._amount = amount
│ │ +        self._billing_address = billing_address
│ │  
│ │      @property
│ │ -    def currency(self):
│ │ -        """Gets the currency of this InvoiceData.  # noqa: E501
│ │ +    def card(self):
│ │ +        """Gets the card of this PayoutRequestCardAccount.  # noqa: E501
│ │  
│ │ -        [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code  # noqa: E501
│ │ +        Represents a payout card data. Card section shouldn't be present if element `token` was presented.  # noqa: E501
│ │  
│ │ -        :return: The currency of this InvoiceData.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The card of this PayoutRequestCardAccount.  # noqa: E501
│ │ +        :rtype: PayoutRequestCard
│ │          """
│ │ -        return self._currency
│ │ +        return self._card
│ │  
│ │ -    @currency.setter
│ │ -    def currency(self, currency):
│ │ -        """Sets the currency of this InvoiceData.
│ │ +    @card.setter
│ │ +    def card(self, card):
│ │ +        """Sets the card of this PayoutRequestCardAccount.
│ │  
│ │ -        [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code  # noqa: E501
│ │ +        Represents a payout card data. Card section shouldn't be present if element `token` was presented.  # noqa: E501
│ │  
│ │ -        :param currency: The currency of this InvoiceData.  # noqa: E501
│ │ -        :type: str
│ │ +        :param card: The card of this PayoutRequestCardAccount.  # noqa: E501
│ │ +        :type: PayoutRequestCard
│ │          """
│ │ -        if currency is None:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `currency`, must not be `None`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._currency = currency
│ │ +        self._card = card
│ │  
│ │      @property
│ │ -    def expire_at(self):
│ │ -        """Gets the expire_at of this InvoiceData.  # noqa: E501
│ │ -
│ │ -        Date and time of invoice expiring. Invoice cannot be used after this date and time.  # noqa: E501
│ │ -
│ │ -        :return: The expire_at of this InvoiceData.  # noqa: E501
│ │ -        :rtype: datetime
│ │ -        """
│ │ -        return self._expire_at
│ │ -
│ │ -    @expire_at.setter
│ │ -    def expire_at(self, expire_at):
│ │ -        """Sets the expire_at of this InvoiceData.
│ │ -
│ │ -        Date and time of invoice expiring. Invoice cannot be used after this date and time.  # noqa: E501
│ │ -
│ │ -        :param expire_at: The expire_at of this InvoiceData.  # noqa: E501
│ │ -        :type: datetime
│ │ -        """
│ │ +    def recipient_info(self):
│ │ +        """Gets the recipient_info of this PayoutRequestCardAccount.  # noqa: E501
│ │  
│ │ -        self._expire_at = expire_at
│ │ +        Property `recipient_info` may be required by Bank. In most cases it's Cardholder's name, contact CardPay manager for requirements. It must be omitted when property `token` is presented  # noqa: E501
│ │  
│ │ -    @property
│ │ -    def installment_type(self):
│ │ -        """Gets the installment_type of this InvoiceData.  # noqa: E501
│ │ -
│ │ -        Installment type  # noqa: E501
│ │ -
│ │ -        :return: The installment_type of this InvoiceData.  # noqa: E501
│ │ +        :return: The recipient_info of this PayoutRequestCardAccount.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._installment_type
│ │ +        return self._recipient_info
│ │  
│ │ -    @installment_type.setter
│ │ -    def installment_type(self, installment_type):
│ │ -        """Sets the installment_type of this InvoiceData.
│ │ +    @recipient_info.setter
│ │ +    def recipient_info(self, recipient_info):
│ │ +        """Sets the recipient_info of this PayoutRequestCardAccount.
│ │  
│ │ -        Installment type  # noqa: E501
│ │ +        Property `recipient_info` may be required by Bank. In most cases it's Cardholder's name, contact CardPay manager for requirements. It must be omitted when property `token` is presented  # noqa: E501
│ │  
│ │ -        :param installment_type: The installment_type of this InvoiceData.  # noqa: E501
│ │ +        :param recipient_info: The recipient_info of this PayoutRequestCardAccount.  # noqa: E501
│ │          :type: str
│ │          """
│ │ +        if recipient_info is not None and len(recipient_info) > 500:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `recipient_info`, length must be less than or equal to `500`"
│ │ +            )  # noqa: E501
│ │ +        if recipient_info is not None and len(recipient_info) < 0:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `recipient_info`, length must be greater than or equal to `0`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._installment_type = installment_type
│ │ +        self._recipient_info = recipient_info
│ │  
│ │      @property
│ │ -    def installments(self):
│ │ -        """Gets the installments of this InvoiceData.  # noqa: E501
│ │ +    def token(self):
│ │ +        """Gets the token of this PayoutRequestCardAccount.  # noqa: E501
│ │  
│ │ -        Number of installments. It depends on country.  # noqa: E501
│ │ +        Card token value, used instead of a card data  # noqa: E501
│ │  
│ │ -        :return: The installments of this InvoiceData.  # noqa: E501
│ │ -        :rtype: list[int]
│ │ +        :return: The token of this PayoutRequestCardAccount.  # noqa: E501
│ │ +        :rtype: str
│ │          """
│ │ -        return self._installments
│ │ +        return self._token
│ │  
│ │ -    @installments.setter
│ │ -    def installments(self, installments):
│ │ -        """Sets the installments of this InvoiceData.
│ │ +    @token.setter
│ │ +    def token(self, token):
│ │ +        """Sets the token of this PayoutRequestCardAccount.
│ │  
│ │ -        Number of installments. It depends on country.  # noqa: E501
│ │ +        Card token value, used instead of a card data  # noqa: E501
│ │  
│ │ -        :param installments: The installments of this InvoiceData.  # noqa: E501
│ │ -        :type: list[int]
│ │ +        :param token: The token of this PayoutRequestCardAccount.  # noqa: E501
│ │ +        :type: str
│ │          """
│ │ +        if token is not None and len(token) > 36:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `token`, length must be less than or equal to `36`"
│ │ +            )  # noqa: E501
│ │ +        if token is not None and len(token) < 0:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `token`, length must be greater than or equal to `0`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._installments = installments
│ │ +        self._token = token
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -215,15 +195,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(InvoiceData, dict):
│ │ +        if issubclass(PayoutRequestCardAccount, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -231,15 +211,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, InvoiceData):
│ │ +        if not isinstance(other, PayoutRequestCardAccount):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/invoice_get_data_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/mobile_payment_merchant_order.py
│ │┄ Files 25% similar despite different names
│ │ @@ -12,188 +12,176 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ +from cardpay.model.item import Item  # noqa: F401,E501
│ │ +from cardpay.model.shipping_address import ShippingAddress  # noqa: F401,E501
│ │  
│ │ -class InvoiceGetDataResponse(object):
│ │ +
│ │ +class MobilePaymentMerchantOrder(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │ -        "amount": "float",
│ │ -        "currency": "str",
│ │ -        "expire_at": "datetime",
│ │ +        "description": "str",
│ │          "id": "str",
│ │ -        "status": "str",
│ │ +        "items": "list[Item]",
│ │ +        "shipping_address": "ShippingAddress",
│ │      }
│ │  
│ │      attribute_map = {
│ │ -        "amount": "amount",
│ │ -        "currency": "currency",
│ │ -        "expire_at": "expire_at",
│ │ +        "description": "description",
│ │          "id": "id",
│ │ -        "status": "status",
│ │ +        "items": "items",
│ │ +        "shipping_address": "shipping_address",
│ │      }
│ │  
│ │      def __init__(
│ │ -        self, amount=None, currency=None, expire_at=None, id=None, status=None
│ │ +        self, description=None, id=None, items=None, shipping_address=None
│ │      ):  # noqa: E501
│ │ -        """InvoiceGetDataResponse - a model defined in Swagger"""  # noqa: E501
│ │ +        """MobilePaymentMerchantOrder - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._amount = None
│ │ -        self._currency = None
│ │ -        self._expire_at = None
│ │ +        self._description = None
│ │          self._id = None
│ │ -        self._status = None
│ │ +        self._items = None
│ │ +        self._shipping_address = None
│ │          self.discriminator = None
│ │  
│ │ -        self.amount = amount
│ │ -        self.currency = currency
│ │ -        if expire_at is not None:
│ │ -            self.expire_at = expire_at
│ │ +        self.description = description
│ │          self.id = id
│ │ -        if status is not None:
│ │ -            self.status = status
│ │ +        if items is not None:
│ │ +            self.items = items
│ │ +        if shipping_address is not None:
│ │ +            self.shipping_address = shipping_address
│ │  
│ │      @property
│ │ -    def amount(self):
│ │ -        """Gets the amount of this InvoiceGetDataResponse.  # noqa: E501
│ │ +    def description(self):
│ │ +        """Gets the description of this MobilePaymentMerchantOrder.  # noqa: E501
│ │  
│ │ -        The total invoice amount in selected currency with dot as a decimal separator  # noqa: E501
│ │ +        Description of product/service being sold  # noqa: E501
│ │  
│ │ -        :return: The amount of this InvoiceGetDataResponse.  # noqa: E501
│ │ -        :rtype: float
│ │ +        :return: The description of this MobilePaymentMerchantOrder.  # noqa: E501
│ │ +        :rtype: str
│ │          """
│ │ -        return self._amount
│ │ +        return self._description
│ │  
│ │ -    @amount.setter
│ │ -    def amount(self, amount):
│ │ -        """Sets the amount of this InvoiceGetDataResponse.
│ │ +    @description.setter
│ │ +    def description(self, description):
│ │ +        """Sets the description of this MobilePaymentMerchantOrder.
│ │  
│ │ -        The total invoice amount in selected currency with dot as a decimal separator  # noqa: E501
│ │ +        Description of product/service being sold  # noqa: E501
│ │  
│ │ -        :param amount: The amount of this InvoiceGetDataResponse.  # noqa: E501
│ │ -        :type: float
│ │ +        :param description: The description of this MobilePaymentMerchantOrder.  # noqa: E501
│ │ +        :type: str
│ │          """
│ │ -        if amount is None:
│ │ +        if description is None:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `description`, must not be `None`"
│ │ +            )  # noqa: E501
│ │ +        if description is not None and len(description) > 200:
│ │              raise ValueError(
│ │ -                "Invalid value for `amount`, must not be `None`"
│ │ +                "Invalid value for `description`, length must be less than or equal to `200`"
│ │ +            )  # noqa: E501
│ │ +        if description is not None and len(description) < 1:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `description`, length must be greater than or equal to `1`"
│ │              )  # noqa: E501
│ │  
│ │ -        self._amount = amount
│ │ +        self._description = description
│ │  
│ │      @property
│ │ -    def currency(self):
│ │ -        """Gets the currency of this InvoiceGetDataResponse.  # noqa: E501
│ │ +    def id(self):
│ │ +        """Gets the id of this MobilePaymentMerchantOrder.  # noqa: E501
│ │  
│ │ -        ISO 4217 currency code  # noqa: E501
│ │ +        Merchant's ID of the order  # noqa: E501
│ │  
│ │ -        :return: The currency of this InvoiceGetDataResponse.  # noqa: E501
│ │ +        :return: The id of this MobilePaymentMerchantOrder.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._currency
│ │ +        return self._id
│ │  
│ │ -    @currency.setter
│ │ -    def currency(self, currency):
│ │ -        """Sets the currency of this InvoiceGetDataResponse.
│ │ +    @id.setter
│ │ +    def id(self, id):
│ │ +        """Sets the id of this MobilePaymentMerchantOrder.
│ │  
│ │ -        ISO 4217 currency code  # noqa: E501
│ │ +        Merchant's ID of the order  # noqa: E501
│ │  
│ │ -        :param currency: The currency of this InvoiceGetDataResponse.  # noqa: E501
│ │ +        :param id: The id of this MobilePaymentMerchantOrder.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if currency is None:
│ │ +        if id is None:
│ │ +            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
│ │ +        if id is not None and len(id) > 50:
│ │              raise ValueError(
│ │ -                "Invalid value for `currency`, must not be `None`"
│ │ +                "Invalid value for `id`, length must be less than or equal to `50`"
│ │ +            )  # noqa: E501
│ │ +        if id is not None and len(id) < 1:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `id`, length must be greater than or equal to `1`"
│ │              )  # noqa: E501
│ │  
│ │ -        self._currency = currency
│ │ -
│ │ -    @property
│ │ -    def expire_at(self):
│ │ -        """Gets the expire_at of this InvoiceGetDataResponse.  # noqa: E501
│ │ -
│ │ -        Date of invoice expiring. Invoice cannot be used after this date.  # noqa: E501
│ │ -
│ │ -        :return: The expire_at of this InvoiceGetDataResponse.  # noqa: E501
│ │ -        :rtype: datetime
│ │ -        """
│ │ -        return self._expire_at
│ │ -
│ │ -    @expire_at.setter
│ │ -    def expire_at(self, expire_at):
│ │ -        """Sets the expire_at of this InvoiceGetDataResponse.
│ │ -
│ │ -        Date of invoice expiring. Invoice cannot be used after this date.  # noqa: E501
│ │ -
│ │ -        :param expire_at: The expire_at of this InvoiceGetDataResponse.  # noqa: E501
│ │ -        :type: datetime
│ │ -        """
│ │ -
│ │ -        self._expire_at = expire_at
│ │ +        self._id = id
│ │  
│ │      @property
│ │ -    def id(self):
│ │ -        """Gets the id of this InvoiceGetDataResponse.  # noqa: E501
│ │ +    def items(self):
│ │ +        """Gets the items of this MobilePaymentMerchantOrder.  # noqa: E501
│ │  
│ │ -        Identifier of created invoice.  # noqa: E501
│ │ +        Array of items (in the shopping cart)  # noqa: E501
│ │  
│ │ -        :return: The id of this InvoiceGetDataResponse.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The items of this MobilePaymentMerchantOrder.  # noqa: E501
│ │ +        :rtype: list[Item]
│ │          """
│ │ -        return self._id
│ │ +        return self._items
│ │  
│ │ -    @id.setter
│ │ -    def id(self, id):
│ │ -        """Sets the id of this InvoiceGetDataResponse.
│ │ +    @items.setter
│ │ +    def items(self, items):
│ │ +        """Sets the items of this MobilePaymentMerchantOrder.
│ │  
│ │ -        Identifier of created invoice.  # noqa: E501
│ │ +        Array of items (in the shopping cart)  # noqa: E501
│ │  
│ │ -        :param id: The id of this InvoiceGetDataResponse.  # noqa: E501
│ │ -        :type: str
│ │ +        :param items: The items of this MobilePaymentMerchantOrder.  # noqa: E501
│ │ +        :type: list[Item]
│ │          """
│ │ -        if id is None:
│ │ -            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
│ │  
│ │ -        self._id = id
│ │ +        self._items = items
│ │  
│ │      @property
│ │ -    def status(self):
│ │ -        """Gets the status of this InvoiceGetDataResponse.  # noqa: E501
│ │ +    def shipping_address(self):
│ │ +        """Gets the shipping_address of this MobilePaymentMerchantOrder.  # noqa: E501
│ │  
│ │ -        Status of invoice.  # noqa: E501
│ │ +        Shipping Address  # noqa: E501
│ │  
│ │ -        :return: The status of this InvoiceGetDataResponse.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The shipping_address of this MobilePaymentMerchantOrder.  # noqa: E501
│ │ +        :rtype: ShippingAddress
│ │          """
│ │ -        return self._status
│ │ +        return self._shipping_address
│ │  
│ │ -    @status.setter
│ │ -    def status(self, status):
│ │ -        """Sets the status of this InvoiceGetDataResponse.
│ │ +    @shipping_address.setter
│ │ +    def shipping_address(self, shipping_address):
│ │ +        """Sets the shipping_address of this MobilePaymentMerchantOrder.
│ │  
│ │ -        Status of invoice.  # noqa: E501
│ │ +        Shipping Address  # noqa: E501
│ │  
│ │ -        :param status: The status of this InvoiceGetDataResponse.  # noqa: E501
│ │ -        :type: str
│ │ +        :param shipping_address: The shipping_address of this MobilePaymentMerchantOrder.  # noqa: E501
│ │ +        :type: ShippingAddress
│ │          """
│ │  
│ │ -        self._status = status
│ │ +        self._shipping_address = shipping_address
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -211,15 +199,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(InvoiceGetDataResponse, dict):
│ │ +        if issubclass(MobilePaymentMerchantOrder, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -227,15 +215,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, InvoiceGetDataResponse):
│ │ +        if not isinstance(other, MobilePaymentMerchantOrder):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/invoice_item.py
│ ├── +++ cardpay-3.6.21/cardpay/model/item.py
│ │┄ Files 15% similar despite different names
│ │ @@ -13,92 +13,136 @@
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │  
│ │ -class InvoiceItem(object):
│ │ +class Item(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │ -    swagger_types = {"count": "int", "name": "str", "price": "float"}
│ │ -
│ │ -    attribute_map = {"count": "count", "name": "name", "price": "price"}
│ │ -
│ │ -    def __init__(self, count=None, name=None, price=None):  # noqa: E501
│ │ -        """InvoiceItem - a model defined in Swagger"""  # noqa: E501
│ │ +    swagger_types = {
│ │ +        "count": "int",
│ │ +        "description": "str",
│ │ +        "name": "str",
│ │ +        "price": "float",
│ │ +    }
│ │ +
│ │ +    attribute_map = {
│ │ +        "count": "count",
│ │ +        "description": "description",
│ │ +        "name": "name",
│ │ +        "price": "price",
│ │ +    }
│ │ +
│ │ +    def __init__(
│ │ +        self, count=None, description=None, name=None, price=None
│ │ +    ):  # noqa: E501
│ │ +        """Item - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._count = None
│ │ +        self._description = None
│ │          self._name = None
│ │          self._price = None
│ │          self.discriminator = None
│ │  
│ │ -        self.count = count
│ │ +        if count is not None:
│ │ +            self.count = count
│ │ +        if description is not None:
│ │ +            self.description = description
│ │          self.name = name
│ │ -        self.price = price
│ │ +        if price is not None:
│ │ +            self.price = price
│ │  
│ │      @property
│ │      def count(self):
│ │ -        """Gets the count of this InvoiceItem.  # noqa: E501
│ │ +        """Gets the count of this Item.  # noqa: E501
│ │  
│ │ -        The count of product / service, provided to the customer. Any positive number  # noqa: E501
│ │ +        The count of product / service, provided to Customer. Any positive number  # noqa: E501
│ │  
│ │ -        :return: The count of this InvoiceItem.  # noqa: E501
│ │ +        :return: The count of this Item.  # noqa: E501
│ │          :rtype: int
│ │          """
│ │          return self._count
│ │  
│ │      @count.setter
│ │      def count(self, count):
│ │ -        """Sets the count of this InvoiceItem.
│ │ +        """Sets the count of this Item.
│ │  
│ │ -        The count of product / service, provided to the customer. Any positive number  # noqa: E501
│ │ +        The count of product / service, provided to Customer. Any positive number  # noqa: E501
│ │  
│ │ -        :param count: The count of this InvoiceItem.  # noqa: E501
│ │ +        :param count: The count of this Item.  # noqa: E501
│ │          :type: int
│ │          """
│ │ -        if count is None:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `count`, must not be `None`"
│ │ -            )  # noqa: E501
│ │          if count is not None and count < 1:  # noqa: E501
│ │              raise ValueError(
│ │                  "Invalid value for `count`, must be a value greater than or equal to `1`"
│ │              )  # noqa: E501
│ │  
│ │          self._count = count
│ │  
│ │      @property
│ │ +    def description(self):
│ │ +        """Gets the description of this Item.  # noqa: E501
│ │ +
│ │ +        The description of product / service, provided to Customer  # noqa: E501
│ │ +
│ │ +        :return: The description of this Item.  # noqa: E501
│ │ +        :rtype: str
│ │ +        """
│ │ +        return self._description
│ │ +
│ │ +    @description.setter
│ │ +    def description(self, description):
│ │ +        """Sets the description of this Item.
│ │ +
│ │ +        The description of product / service, provided to Customer  # noqa: E501
│ │ +
│ │ +        :param description: The description of this Item.  # noqa: E501
│ │ +        :type: str
│ │ +        """
│ │ +        if description is not None and len(description) > 200:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `description`, length must be less than or equal to `200`"
│ │ +            )  # noqa: E501
│ │ +        if description is not None and len(description) < 1:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `description`, length must be greater than or equal to `1`"
│ │ +            )  # noqa: E501
│ │ +
│ │ +        self._description = description
│ │ +
│ │ +    @property
│ │      def name(self):
│ │ -        """Gets the name of this InvoiceItem.  # noqa: E501
│ │ +        """Gets the name of this Item.  # noqa: E501
│ │  
│ │ -        The name of product / service, provided to the customer  # noqa: E501
│ │ +        The name of product / service, provided to Customer  # noqa: E501
│ │  
│ │ -        :return: The name of this InvoiceItem.  # noqa: E501
│ │ +        :return: The name of this Item.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._name
│ │  
│ │      @name.setter
│ │      def name(self, name):
│ │ -        """Sets the name of this InvoiceItem.
│ │ +        """Sets the name of this Item.
│ │  
│ │ -        The name of product / service, provided to the customer  # noqa: E501
│ │ +        The name of product / service, provided to Customer  # noqa: E501
│ │  
│ │ -        :param name: The name of this InvoiceItem.  # noqa: E501
│ │ +        :param name: The name of this Item.  # noqa: E501
│ │          :type: str
│ │          """
│ │          if name is None:
│ │              raise ValueError(
│ │                  "Invalid value for `name`, must not be `None`"
│ │              )  # noqa: E501
│ │          if name is not None and len(name) > 50:
│ │ @@ -110,36 +154,32 @@
│ │                  "Invalid value for `name`, length must be greater than or equal to `1`"
│ │              )  # noqa: E501
│ │  
│ │          self._name = name
│ │  
│ │      @property
│ │      def price(self):
│ │ -        """Gets the price of this InvoiceItem.  # noqa: E501
│ │ +        """Gets the price of this Item.  # noqa: E501
│ │  
│ │ -        Price of product / service with dot as a decimal separator, must be less than a 1000000 (one million, NOT inclusive)  For currencies with 0 digits after digital separator (like VND, IDR and others) - limit is 200000000 (200 million, NOT inclusive)  # noqa: E501
│ │ +        Price of product / service with dot as a decimal separator, must be less than 1 million  # noqa: E501
│ │  
│ │ -        :return: The price of this InvoiceItem.  # noqa: E501
│ │ +        :return: The price of this Item.  # noqa: E501
│ │          :rtype: float
│ │          """
│ │          return self._price
│ │  
│ │      @price.setter
│ │      def price(self, price):
│ │ -        """Sets the price of this InvoiceItem.
│ │ +        """Sets the price of this Item.
│ │  
│ │ -        Price of product / service with dot as a decimal separator, must be less than a 1000000 (one million, NOT inclusive)  For currencies with 0 digits after digital separator (like VND, IDR and others) - limit is 200000000 (200 million, NOT inclusive)  # noqa: E501
│ │ +        Price of product / service with dot as a decimal separator, must be less than 1 million  # noqa: E501
│ │  
│ │ -        :param price: The price of this InvoiceItem.  # noqa: E501
│ │ +        :param price: The price of this Item.  # noqa: E501
│ │          :type: float
│ │          """
│ │ -        if price is None:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `price`, must not be `None`"
│ │ -            )  # noqa: E501
│ │  
│ │          self._price = price
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │ @@ -159,15 +199,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(InvoiceItem, dict):
│ │ +        if issubclass(Item, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -175,15 +215,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, InvoiceItem):
│ │ +        if not isinstance(other, Item):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/invoice_merchant_order.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payout_request_merchant_order.py
│ │┄ Files 16% similar despite different names
│ │ @@ -12,104 +12,99 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ -from cardpay.model.invoice_item import InvoiceItem  # noqa: F401,E501
│ │  
│ │ -
│ │ -class InvoiceMerchantOrder(object):
│ │ +class PayoutRequestMerchantOrder(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │ -    swagger_types = {"id": "str", "items": "list[InvoiceItem]"}
│ │ +    swagger_types = {"description": "str", "id": "str"}
│ │  
│ │ -    attribute_map = {"id": "id", "items": "items"}
│ │ +    attribute_map = {"description": "description", "id": "id"}
│ │  
│ │ -    def __init__(self, id=None, items=None):  # noqa: E501
│ │ -        """InvoiceMerchantOrder - a model defined in Swagger"""  # noqa: E501
│ │ +    def __init__(self, description=None, id=None):  # noqa: E501
│ │ +        """PayoutRequestMerchantOrder - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ +        self._description = None
│ │          self._id = None
│ │ -        self._items = None
│ │          self.discriminator = None
│ │  
│ │ +        if description is not None:
│ │ +            self.description = description
│ │          self.id = id
│ │ -        self.items = items
│ │ +
│ │ +    @property
│ │ +    def description(self):
│ │ +        """Gets the description of this PayoutRequestMerchantOrder.  # noqa: E501
│ │ +
│ │ +        Payout description  # noqa: E501
│ │ +
│ │ +        :return: The description of this PayoutRequestMerchantOrder.  # noqa: E501
│ │ +        :rtype: str
│ │ +        """
│ │ +        return self._description
│ │ +
│ │ +    @description.setter
│ │ +    def description(self, description):
│ │ +        """Sets the description of this PayoutRequestMerchantOrder.
│ │ +
│ │ +        Payout description  # noqa: E501
│ │ +
│ │ +        :param description: The description of this PayoutRequestMerchantOrder.  # noqa: E501
│ │ +        :type: str
│ │ +        """
│ │ +
│ │ +        self._description = description
│ │  
│ │      @property
│ │      def id(self):
│ │ -        """Gets the id of this InvoiceMerchantOrder.  # noqa: E501
│ │ +        """Gets the id of this PayoutRequestMerchantOrder.  # noqa: E501
│ │  
│ │ -        Order ID used by the merchant’s shopping cart  # noqa: E501
│ │ +        Order ID used by Merchant in Merchant's system  # noqa: E501
│ │  
│ │ -        :return: The id of this InvoiceMerchantOrder.  # noqa: E501
│ │ +        :return: The id of this PayoutRequestMerchantOrder.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._id
│ │  
│ │      @id.setter
│ │      def id(self, id):
│ │ -        """Sets the id of this InvoiceMerchantOrder.
│ │ +        """Sets the id of this PayoutRequestMerchantOrder.
│ │  
│ │ -        Order ID used by the merchant’s shopping cart  # noqa: E501
│ │ +        Order ID used by Merchant in Merchant's system  # noqa: E501
│ │  
│ │ -        :param id: The id of this InvoiceMerchantOrder.  # noqa: E501
│ │ +        :param id: The id of this PayoutRequestMerchantOrder.  # noqa: E501
│ │          :type: str
│ │          """
│ │          if id is None:
│ │              raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
│ │          if id is not None and len(id) > 50:
│ │              raise ValueError(
│ │                  "Invalid value for `id`, length must be less than or equal to `50`"
│ │              )  # noqa: E501
│ │ -        if id is not None and len(id) < 1:
│ │ +        if id is not None and len(id) < 0:
│ │              raise ValueError(
│ │ -                "Invalid value for `id`, length must be greater than or equal to `1`"
│ │ +                "Invalid value for `id`, length must be greater than or equal to `0`"
│ │              )  # noqa: E501
│ │  
│ │          self._id = id
│ │  
│ │ -    @property
│ │ -    def items(self):
│ │ -        """Gets the items of this InvoiceMerchantOrder.  # noqa: E501
│ │ -
│ │ -        Array of items (in the shopping cart)  # noqa: E501
│ │ -
│ │ -        :return: The items of this InvoiceMerchantOrder.  # noqa: E501
│ │ -        :rtype: list[InvoiceItem]
│ │ -        """
│ │ -        return self._items
│ │ -
│ │ -    @items.setter
│ │ -    def items(self, items):
│ │ -        """Sets the items of this InvoiceMerchantOrder.
│ │ -
│ │ -        Array of items (in the shopping cart)  # noqa: E501
│ │ -
│ │ -        :param items: The items of this InvoiceMerchantOrder.  # noqa: E501
│ │ -        :type: list[InvoiceItem]
│ │ -        """
│ │ -        if items is None:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `items`, must not be `None`"
│ │ -            )  # noqa: E501
│ │ -
│ │ -        self._items = items
│ │ -
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │              if isinstance(value, list):
│ │ @@ -126,15 +121,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(InvoiceMerchantOrder, dict):
│ │ +        if issubclass(PayoutRequestMerchantOrder, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -142,15 +137,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, InvoiceMerchantOrder):
│ │ +        if not isinstance(other, PayoutRequestMerchantOrder):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │ ├── encoding
│ │ │ @@ -1 +1 @@
│ │ │ -utf-8
│ │ │ +us-ascii
│ │   --- cardpay-3.45.8/cardpay/model/invoice_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/refund_request.py
│ │┄ Files 18% similar despite different names
│ │ @@ -12,201 +12,238 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ -from cardpay.model.invoice_customer import InvoiceCustomer  # noqa: F401,E501
│ │ -from cardpay.model.invoice_data import InvoiceData  # noqa: F401,E501
│ │ -from cardpay.model.invoice_merchant_order import InvoiceMerchantOrder  # noqa: F401,E501
│ │ +from cardpay.model.refund_request_customer import (
│ │ +    RefundRequestCustomer,
│ │ +)  # noqa: F401,E501
│ │ +from cardpay.model.refund_request_e_wallet_account import (
│ │ +    RefundRequestEWalletAccount,
│ │ +)  # noqa: F401,E501
│ │ +from cardpay.model.refund_request_merchant_order import (
│ │ +    RefundRequestMerchantOrder,
│ │ +)  # noqa: F401,E501
│ │ +from cardpay.model.refund_request_payment_data import (
│ │ +    RefundRequestPaymentData,
│ │ +)  # noqa: F401,E501
│ │ +from cardpay.model.refund_request_refund_data import (
│ │ +    RefundRequestRefundData,
│ │ +)  # noqa: F401,E501
│ │  from cardpay.model.request import Request  # noqa: F401,E501
│ │ -from cardpay.model.return_urls import ReturnUrls  # noqa: F401,E501
│ │  
│ │  
│ │ -class InvoiceRequest(object):
│ │ +class RefundRequest(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │          "request": "Request",
│ │ -        "customer": "InvoiceCustomer",
│ │ -        "invoice_data": "InvoiceData",
│ │ -        "merchant_order": "InvoiceMerchantOrder",
│ │ -        "return_urls": "ReturnUrls",
│ │ +        "customer": "RefundRequestCustomer",
│ │ +        "ewallet_account": "RefundRequestEWalletAccount",
│ │ +        "merchant_order": "RefundRequestMerchantOrder",
│ │ +        "payment_data": "RefundRequestPaymentData",
│ │ +        "refund_data": "RefundRequestRefundData",
│ │      }
│ │  
│ │      attribute_map = {
│ │          "request": "request",
│ │          "customer": "customer",
│ │ -        "invoice_data": "invoice_data",
│ │ +        "ewallet_account": "ewallet_account",
│ │          "merchant_order": "merchant_order",
│ │ -        "return_urls": "return_urls",
│ │ +        "payment_data": "payment_data",
│ │ +        "refund_data": "refund_data",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │          request=None,
│ │          customer=None,
│ │ -        invoice_data=None,
│ │ +        ewallet_account=None,
│ │          merchant_order=None,
│ │ -        return_urls=None,
│ │ +        payment_data=None,
│ │ +        refund_data=None,
│ │      ):  # noqa: E501
│ │ -        """InvoiceRequest - a model defined in Swagger"""  # noqa: E501
│ │ +        """RefundRequest - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._request = None
│ │          self._customer = None
│ │ -        self._invoice_data = None
│ │ +        self._ewallet_account = None
│ │          self._merchant_order = None
│ │ -        self._return_urls = None
│ │ +        self._payment_data = None
│ │ +        self._refund_data = None
│ │          self.discriminator = None
│ │  
│ │          self.request = request
│ │          if customer is not None:
│ │              self.customer = customer
│ │ -        self.invoice_data = invoice_data
│ │ -        self.merchant_order = merchant_order
│ │ -        if return_urls is not None:
│ │ -            self.return_urls = return_urls
│ │ +        if ewallet_account is not None:
│ │ +            self.ewallet_account = ewallet_account
│ │ +        if merchant_order is not None:
│ │ +            self.merchant_order = merchant_order
│ │ +        self.payment_data = payment_data
│ │ +        if refund_data is not None:
│ │ +            self.refund_data = refund_data
│ │  
│ │      @property
│ │      def request(self):
│ │ -        """Gets the request of this InvoiceRequest.  # noqa: E501
│ │ +        """Gets the request of this RefundRequest.  # noqa: E501
│ │  
│ │          Request  # noqa: E501
│ │  
│ │ -        :return: The request of this InvoiceRequest.  # noqa: E501
│ │ +        :return: The request of this RefundRequest.  # noqa: E501
│ │          :rtype: Request
│ │          """
│ │          return self._request
│ │  
│ │      @request.setter
│ │      def request(self, request):
│ │ -        """Sets the request of this InvoiceRequest.
│ │ +        """Sets the request of this RefundRequest.
│ │  
│ │          Request  # noqa: E501
│ │  
│ │ -        :param request: The request of this InvoiceRequest.  # noqa: E501
│ │ +        :param request: The request of this RefundRequest.  # noqa: E501
│ │          :type: Request
│ │          """
│ │          if request is None:
│ │              raise ValueError(
│ │                  "Invalid value for `request`, must not be `None`"
│ │              )  # noqa: E501
│ │  
│ │          self._request = request
│ │  
│ │      @property
│ │      def customer(self):
│ │ -        """Gets the customer of this InvoiceRequest.  # noqa: E501
│ │ +        """Gets the customer of this RefundRequest.  # noqa: E501
│ │  
│ │ -        Customer data  # noqa: E501
│ │ +        Customer  # noqa: E501
│ │  
│ │ -        :return: The customer of this InvoiceRequest.  # noqa: E501
│ │ -        :rtype: InvoiceCustomer
│ │ +        :return: The customer of this RefundRequest.  # noqa: E501
│ │ +        :rtype: RefundRequestCustomer
│ │          """
│ │          return self._customer
│ │  
│ │      @customer.setter
│ │      def customer(self, customer):
│ │ -        """Sets the customer of this InvoiceRequest.
│ │ +        """Sets the customer of this RefundRequest.
│ │  
│ │ -        Customer data  # noqa: E501
│ │ +        Customer  # noqa: E501
│ │  
│ │ -        :param customer: The customer of this InvoiceRequest.  # noqa: E501
│ │ -        :type: InvoiceCustomer
│ │ +        :param customer: The customer of this RefundRequest.  # noqa: E501
│ │ +        :type: RefundRequestCustomer
│ │          """
│ │  
│ │          self._customer = customer
│ │  
│ │      @property
│ │ -    def invoice_data(self):
│ │ -        """Gets the invoice_data of this InvoiceRequest.  # noqa: E501
│ │ +    def ewallet_account(self):
│ │ +        """Gets the ewallet_account of this RefundRequest.  # noqa: E501
│ │  
│ │ -        Invoice data  # noqa: E501
│ │ +        EWallet  # noqa: E501
│ │  
│ │ -        :return: The invoice_data of this InvoiceRequest.  # noqa: E501
│ │ -        :rtype: InvoiceData
│ │ +        :return: The ewallet_account of this RefundRequest.  # noqa: E501
│ │ +        :rtype: RefundRequestEWalletAccount
│ │          """
│ │ -        return self._invoice_data
│ │ +        return self._ewallet_account
│ │  
│ │ -    @invoice_data.setter
│ │ -    def invoice_data(self, invoice_data):
│ │ -        """Sets the invoice_data of this InvoiceRequest.
│ │ +    @ewallet_account.setter
│ │ +    def ewallet_account(self, ewallet_account):
│ │ +        """Sets the ewallet_account of this RefundRequest.
│ │  
│ │ -        Invoice data  # noqa: E501
│ │ +        EWallet  # noqa: E501
│ │  
│ │ -        :param invoice_data: The invoice_data of this InvoiceRequest.  # noqa: E501
│ │ -        :type: InvoiceData
│ │ +        :param ewallet_account: The ewallet_account of this RefundRequest.  # noqa: E501
│ │ +        :type: RefundRequestEWalletAccount
│ │          """
│ │ -        if invoice_data is None:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `invoice_data`, must not be `None`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._invoice_data = invoice_data
│ │ +        self._ewallet_account = ewallet_account
│ │  
│ │      @property
│ │      def merchant_order(self):
│ │ -        """Gets the merchant_order of this InvoiceRequest.  # noqa: E501
│ │ +        """Gets the merchant_order of this RefundRequest.  # noqa: E501
│ │  
│ │          Merchant order data  # noqa: E501
│ │  
│ │ -        :return: The merchant_order of this InvoiceRequest.  # noqa: E501
│ │ -        :rtype: InvoiceMerchantOrder
│ │ +        :return: The merchant_order of this RefundRequest.  # noqa: E501
│ │ +        :rtype: RefundRequestMerchantOrder
│ │          """
│ │          return self._merchant_order
│ │  
│ │      @merchant_order.setter
│ │      def merchant_order(self, merchant_order):
│ │ -        """Sets the merchant_order of this InvoiceRequest.
│ │ +        """Sets the merchant_order of this RefundRequest.
│ │  
│ │          Merchant order data  # noqa: E501
│ │  
│ │ -        :param merchant_order: The merchant_order of this InvoiceRequest.  # noqa: E501
│ │ -        :type: InvoiceMerchantOrder
│ │ +        :param merchant_order: The merchant_order of this RefundRequest.  # noqa: E501
│ │ +        :type: RefundRequestMerchantOrder
│ │ +        """
│ │ +
│ │ +        self._merchant_order = merchant_order
│ │ +
│ │ +    @property
│ │ +    def payment_data(self):
│ │ +        """Gets the payment_data of this RefundRequest.  # noqa: E501
│ │ +
│ │ +        Payment data  # noqa: E501
│ │ +
│ │ +        :return: The payment_data of this RefundRequest.  # noqa: E501
│ │ +        :rtype: RefundRequestPaymentData
│ │          """
│ │ -        if merchant_order is None:
│ │ +        return self._payment_data
│ │ +
│ │ +    @payment_data.setter
│ │ +    def payment_data(self, payment_data):
│ │ +        """Sets the payment_data of this RefundRequest.
│ │ +
│ │ +        Payment data  # noqa: E501
│ │ +
│ │ +        :param payment_data: The payment_data of this RefundRequest.  # noqa: E501
│ │ +        :type: RefundRequestPaymentData
│ │ +        """
│ │ +        if payment_data is None:
│ │              raise ValueError(
│ │ -                "Invalid value for `merchant_order`, must not be `None`"
│ │ +                "Invalid value for `payment_data`, must not be `None`"
│ │              )  # noqa: E501
│ │  
│ │ -        self._merchant_order = merchant_order
│ │ +        self._payment_data = payment_data
│ │  
│ │      @property
│ │ -    def return_urls(self):
│ │ -        """Gets the return_urls of this InvoiceRequest.  # noqa: E501
│ │ +    def refund_data(self):
│ │ +        """Gets the refund_data of this RefundRequest.  # noqa: E501
│ │  
│ │ -        Return URLs are the URLs where customer returns by pressing 'Back to the shop' or 'Cancel' button in Payment Page mode  # noqa: E501
│ │ +        Refund data  # noqa: E501
│ │  
│ │ -        :return: The return_urls of this InvoiceRequest.  # noqa: E501
│ │ -        :rtype: ReturnUrls
│ │ +        :return: The refund_data of this RefundRequest.  # noqa: E501
│ │ +        :rtype: RefundRequestRefundData
│ │          """
│ │ -        return self._return_urls
│ │ +        return self._refund_data
│ │  
│ │ -    @return_urls.setter
│ │ -    def return_urls(self, return_urls):
│ │ -        """Sets the return_urls of this InvoiceRequest.
│ │ +    @refund_data.setter
│ │ +    def refund_data(self, refund_data):
│ │ +        """Sets the refund_data of this RefundRequest.
│ │  
│ │ -        Return URLs are the URLs where customer returns by pressing 'Back to the shop' or 'Cancel' button in Payment Page mode  # noqa: E501
│ │ +        Refund data  # noqa: E501
│ │  
│ │ -        :param return_urls: The return_urls of this InvoiceRequest.  # noqa: E501
│ │ -        :type: ReturnUrls
│ │ +        :param refund_data: The refund_data of this RefundRequest.  # noqa: E501
│ │ +        :type: RefundRequestRefundData
│ │          """
│ │  
│ │ -        self._return_urls = return_urls
│ │ +        self._refund_data = refund_data
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -224,15 +261,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(InvoiceRequest, dict):
│ │ +        if issubclass(RefundRequest, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -240,15 +277,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, InvoiceRequest):
│ │ +        if not isinstance(other, RefundRequest):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/item.py
│ ├── +++ cardpay-3.6.21/cardpay/model/card_binding_card.py
│ │┄ Files 19% similar despite different names
│ │ @@ -13,175 +13,192 @@
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │  
│ │ -class Item(object):
│ │ +class CardBindingCard(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │ -        "count": "int",
│ │ -        "description": "str",
│ │ -        "name": "str",
│ │ -        "price": "float",
│ │ +        "expiration": "str",
│ │ +        "holder": "str",
│ │ +        "pan": "str",
│ │ +        "security_code": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │ -        "count": "count",
│ │ -        "description": "description",
│ │ -        "name": "name",
│ │ -        "price": "price",
│ │ +        "expiration": "expiration",
│ │ +        "holder": "holder",
│ │ +        "pan": "pan",
│ │ +        "security_code": "security_code",
│ │      }
│ │  
│ │      def __init__(
│ │ -        self, count=None, description=None, name=None, price=None
│ │ +        self, expiration=None, holder=None, pan=None, security_code=None
│ │      ):  # noqa: E501
│ │ -        """Item - a model defined in Swagger"""  # noqa: E501
│ │ +        """CardBindingCard - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._count = None
│ │ -        self._description = None
│ │ -        self._name = None
│ │ -        self._price = None
│ │ +        self._expiration = None
│ │ +        self._holder = None
│ │ +        self._pan = None
│ │ +        self._security_code = None
│ │          self.discriminator = None
│ │  
│ │ -        if count is not None:
│ │ -            self.count = count
│ │ -        if description is not None:
│ │ -            self.description = description
│ │ -        self.name = name
│ │ -        if price is not None:
│ │ -            self.price = price
│ │ +        self.expiration = expiration
│ │ +        self.holder = holder
│ │ +        self.pan = pan
│ │ +        self.security_code = security_code
│ │  
│ │      @property
│ │ -    def count(self):
│ │ -        """Gets the count of this Item.  # noqa: E501
│ │ +    def expiration(self):
│ │ +        """Gets the expiration of this CardBindingCard.  # noqa: E501
│ │  
│ │ -        The count of product / service, provided to Customer. Any positive number  # noqa: E501
│ │ +        Customer's card expiration date. Format: `mm/yyyy`  # noqa: E501
│ │  
│ │ -        :return: The count of this Item.  # noqa: E501
│ │ -        :rtype: int
│ │ +        :return: The expiration of this CardBindingCard.  # noqa: E501
│ │ +        :rtype: str
│ │          """
│ │ -        return self._count
│ │ +        return self._expiration
│ │  
│ │ -    @count.setter
│ │ -    def count(self, count):
│ │ -        """Sets the count of this Item.
│ │ +    @expiration.setter
│ │ +    def expiration(self, expiration):
│ │ +        """Sets the expiration of this CardBindingCard.
│ │  
│ │ -        The count of product / service, provided to Customer. Any positive number  # noqa: E501
│ │ +        Customer's card expiration date. Format: `mm/yyyy`  # noqa: E501
│ │  
│ │ -        :param count: The count of this Item.  # noqa: E501
│ │ -        :type: int
│ │ +        :param expiration: The expiration of this CardBindingCard.  # noqa: E501
│ │ +        :type: str
│ │          """
│ │ -        if count is not None and count < 1:  # noqa: E501
│ │ +        if expiration is None:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `expiration`, must not be `None`"
│ │ +            )  # noqa: E501
│ │ +        if expiration is not None and not re.search(
│ │ +            r"([0-9]{2}\/[0-9]{4})", expiration
│ │ +        ):  # noqa: E501
│ │              raise ValueError(
│ │ -                "Invalid value for `count`, must be a value greater than or equal to `1`"
│ │ +                r"Invalid value for `expiration`, must be a follow pattern or equal to `/([0-9]{2}\/[0-9]{4})/`"
│ │              )  # noqa: E501
│ │  
│ │ -        self._count = count
│ │ +        self._expiration = expiration
│ │  
│ │      @property
│ │ -    def description(self):
│ │ -        """Gets the description of this Item.  # noqa: E501
│ │ +    def holder(self):
│ │ +        """Gets the holder of this CardBindingCard.  # noqa: E501
│ │  
│ │ -        The description of product / service, provided to Customer  # noqa: E501
│ │ +        Customer's cardholder name. Any valid cardholder name  # noqa: E501
│ │  
│ │ -        :return: The description of this Item.  # noqa: E501
│ │ +        :return: The holder of this CardBindingCard.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._description
│ │ +        return self._holder
│ │  
│ │ -    @description.setter
│ │ -    def description(self, description):
│ │ -        """Sets the description of this Item.
│ │ +    @holder.setter
│ │ +    def holder(self, holder):
│ │ +        """Sets the holder of this CardBindingCard.
│ │  
│ │ -        The description of product / service, provided to Customer  # noqa: E501
│ │ +        Customer's cardholder name. Any valid cardholder name  # noqa: E501
│ │  
│ │ -        :param description: The description of this Item.  # noqa: E501
│ │ +        :param holder: The holder of this CardBindingCard.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if description is not None and len(description) > 200:
│ │ +        if holder is None:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `holder`, must not be `None`"
│ │ +            )  # noqa: E501
│ │ +        if holder is not None and len(holder) > 50:
│ │              raise ValueError(
│ │ -                "Invalid value for `description`, length must be less than or equal to `200`"
│ │ +                "Invalid value for `holder`, length must be less than or equal to `50`"
│ │              )  # noqa: E501
│ │ -        if description is not None and len(description) < 1:
│ │ +        if holder is not None and len(holder) < 1:
│ │              raise ValueError(
│ │ -                "Invalid value for `description`, length must be greater than or equal to `1`"
│ │ +                "Invalid value for `holder`, length must be greater than or equal to `1`"
│ │              )  # noqa: E501
│ │  
│ │ -        self._description = description
│ │ +        self._holder = holder
│ │  
│ │      @property
│ │ -    def name(self):
│ │ -        """Gets the name of this Item.  # noqa: E501
│ │ +    def pan(self):
│ │ +        """Gets the pan of this CardBindingCard.  # noqa: E501
│ │  
│ │ -        The name of product / service, provided to Customer  # noqa: E501
│ │ +        Customer's card number (PAN). Any valid card number, may contain spaces  # noqa: E501
│ │  
│ │ -        :return: The name of this Item.  # noqa: E501
│ │ +        :return: The pan of this CardBindingCard.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._name
│ │ +        return self._pan
│ │  
│ │ -    @name.setter
│ │ -    def name(self, name):
│ │ -        """Sets the name of this Item.
│ │ +    @pan.setter
│ │ +    def pan(self, pan):
│ │ +        """Sets the pan of this CardBindingCard.
│ │  
│ │ -        The name of product / service, provided to Customer  # noqa: E501
│ │ +        Customer's card number (PAN). Any valid card number, may contain spaces  # noqa: E501
│ │  
│ │ -        :param name: The name of this Item.  # noqa: E501
│ │ +        :param pan: The pan of this CardBindingCard.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if name is None:
│ │ +        if pan is None:
│ │              raise ValueError(
│ │ -                "Invalid value for `name`, must not be `None`"
│ │ +                "Invalid value for `pan`, must not be `None`"
│ │              )  # noqa: E501
│ │ -        if name is not None and len(name) > 50:
│ │ +        if pan is not None and len(pan) > 19:
│ │              raise ValueError(
│ │ -                "Invalid value for `name`, length must be less than or equal to `50`"
│ │ +                "Invalid value for `pan`, length must be less than or equal to `19`"
│ │              )  # noqa: E501
│ │ -        if name is not None and len(name) < 1:
│ │ +        if pan is not None and len(pan) < 13:
│ │              raise ValueError(
│ │ -                "Invalid value for `name`, length must be greater than or equal to `1`"
│ │ +                "Invalid value for `pan`, length must be greater than or equal to `13`"
│ │              )  # noqa: E501
│ │  
│ │ -        self._name = name
│ │ +        self._pan = pan
│ │  
│ │      @property
│ │ -    def price(self):
│ │ -        """Gets the price of this Item.  # noqa: E501
│ │ +    def security_code(self):
│ │ +        """Gets the security_code of this CardBindingCard.  # noqa: E501
│ │  
│ │ -        Price of product / service with dot as a decimal separator, must be less than 200 million  # noqa: E501
│ │ +        Customer's CVV2 / CVC2 / CAV2  # noqa: E501
│ │  
│ │ -        :return: The price of this Item.  # noqa: E501
│ │ -        :rtype: float
│ │ +        :return: The security_code of this CardBindingCard.  # noqa: E501
│ │ +        :rtype: str
│ │          """
│ │ -        return self._price
│ │ +        return self._security_code
│ │  
│ │ -    @price.setter
│ │ -    def price(self, price):
│ │ -        """Sets the price of this Item.
│ │ +    @security_code.setter
│ │ +    def security_code(self, security_code):
│ │ +        """Sets the security_code of this CardBindingCard.
│ │  
│ │ -        Price of product / service with dot as a decimal separator, must be less than 200 million  # noqa: E501
│ │ +        Customer's CVV2 / CVC2 / CAV2  # noqa: E501
│ │  
│ │ -        :param price: The price of this Item.  # noqa: E501
│ │ -        :type: float
│ │ +        :param security_code: The security_code of this CardBindingCard.  # noqa: E501
│ │ +        :type: str
│ │          """
│ │ +        if security_code is None:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `security_code`, must not be `None`"
│ │ +            )  # noqa: E501
│ │ +        if security_code is not None and not re.search(
│ │ +            r"[0-9]{3,4}", security_code
│ │ +        ):  # noqa: E501
│ │ +            raise ValueError(
│ │ +                r"Invalid value for `security_code`, must be a follow pattern or equal to `/[0-9]{3,4}/`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._price = price
│ │ +        self._security_code = security_code
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -199,15 +216,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(Item, dict):
│ │ +        if issubclass(CardBindingCard, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -215,15 +232,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, Item):
│ │ +        if not isinstance(other, CardBindingCard):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/limit_info_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/limit_info_response.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/next_subscription_payment.py
│ ├── +++ cardpay-3.6.21/cardpay/model/next_subscription_payment.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/not_found_error.py
│ ├── +++ cardpay-3.6.21/cardpay/model/not_found_error.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/o_auth_error.py
│ ├── +++ cardpay-3.6.21/cardpay/model/o_auth_error.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/oneclick_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/recurring_request_recurring_data.py
│ │┄ Files 20% similar despite different names
│ │ @@ -12,213 +12,195 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ +from cardpay.model.plan import Plan  # noqa: F401,E501
│ │  from cardpay.model.recurring_request_filing import (
│ │      RecurringRequestFiling,
│ │  )  # noqa: F401,E501
│ │  
│ │  
│ │ -class OneclickData(object):
│ │ +class RecurringRequestRecurringData(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │          "amount": "float",
│ │ -        "contract_number": "str",
│ │          "currency": "str",
│ │          "dynamic_descriptor": "str",
│ │          "filing": "RecurringRequestFiling",
│ │          "generate_token": "bool",
│ │          "initiator": "str",
│ │ -        "network_trans_id": "str",
│ │ +        "interval": "int",
│ │          "note": "str",
│ │ +        "payments": "int",
│ │ +        "period": "str",
│ │ +        "plan": "Plan",
│ │          "preauth": "bool",
│ │ -        "sca_exemption": "str",
│ │ -        "three_ds_challenge_indicator": "str",
│ │ -        "trans_type": "str",
│ │ +        "retries": "int",
│ │ +        "subscription_start": "datetime",
│ │      }
│ │  
│ │      attribute_map = {
│ │          "amount": "amount",
│ │ -        "contract_number": "contract_number",
│ │          "currency": "currency",
│ │          "dynamic_descriptor": "dynamic_descriptor",
│ │          "filing": "filing",
│ │          "generate_token": "generate_token",
│ │          "initiator": "initiator",
│ │ -        "network_trans_id": "network_trans_id",
│ │ +        "interval": "interval",
│ │          "note": "note",
│ │ +        "payments": "payments",
│ │ +        "period": "period",
│ │ +        "plan": "plan",
│ │          "preauth": "preauth",
│ │ -        "sca_exemption": "sca_exemption",
│ │ -        "three_ds_challenge_indicator": "three_ds_challenge_indicator",
│ │ -        "trans_type": "trans_type",
│ │ +        "retries": "retries",
│ │ +        "subscription_start": "subscription_start",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │          amount=None,
│ │ -        contract_number=None,
│ │          currency=None,
│ │          dynamic_descriptor=None,
│ │          filing=None,
│ │          generate_token=None,
│ │          initiator=None,
│ │ -        network_trans_id=None,
│ │ +        interval=None,
│ │          note=None,
│ │ +        payments=None,
│ │ +        period=None,
│ │ +        plan=None,
│ │          preauth=None,
│ │ -        sca_exemption=None,
│ │ -        three_ds_challenge_indicator=None,
│ │ -        trans_type=None,
│ │ +        retries=None,
│ │ +        subscription_start=None,
│ │      ):  # noqa: E501
│ │ -        """OneclickData - a model defined in Swagger"""  # noqa: E501
│ │ +        """RecurringRequestRecurringData - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._amount = None
│ │ -        self._contract_number = None
│ │          self._currency = None
│ │          self._dynamic_descriptor = None
│ │          self._filing = None
│ │          self._generate_token = None
│ │          self._initiator = None
│ │ -        self._network_trans_id = None
│ │ +        self._interval = None
│ │          self._note = None
│ │ +        self._payments = None
│ │ +        self._period = None
│ │ +        self._plan = None
│ │          self._preauth = None
│ │ -        self._sca_exemption = None
│ │ -        self._three_ds_challenge_indicator = None
│ │ -        self._trans_type = None
│ │ +        self._retries = None
│ │ +        self._subscription_start = None
│ │          self.discriminator = None
│ │  
│ │          if amount is not None:
│ │              self.amount = amount
│ │ -        if contract_number is not None:
│ │ -            self.contract_number = contract_number
│ │ -        self.currency = currency
│ │ +        if currency is not None:
│ │ +            self.currency = currency
│ │          if dynamic_descriptor is not None:
│ │              self.dynamic_descriptor = dynamic_descriptor
│ │          if filing is not None:
│ │              self.filing = filing
│ │          if generate_token is not None:
│ │              self.generate_token = generate_token
│ │ -        self.initiator = initiator
│ │ -        if network_trans_id is not None:
│ │ -            self.network_trans_id = network_trans_id
│ │ +        if initiator is not None:
│ │ +            self.initiator = initiator
│ │ +        if interval is not None:
│ │ +            self.interval = interval
│ │          if note is not None:
│ │              self.note = note
│ │ +        if payments is not None:
│ │ +            self.payments = payments
│ │ +        if period is not None:
│ │ +            self.period = period
│ │ +        if plan is not None:
│ │ +            self.plan = plan
│ │          if preauth is not None:
│ │              self.preauth = preauth
│ │ -        if sca_exemption is not None:
│ │ -            self.sca_exemption = sca_exemption
│ │ -        if three_ds_challenge_indicator is not None:
│ │ -            self.three_ds_challenge_indicator = three_ds_challenge_indicator
│ │ -        if trans_type is not None:
│ │ -            self.trans_type = trans_type
│ │ +        if retries is not None:
│ │ +            self.retries = retries
│ │ +        if subscription_start is not None:
│ │ +            self.subscription_start = subscription_start
│ │  
│ │      @property
│ │      def amount(self):
│ │ -        """Gets the amount of this OneclickData.  # noqa: E501
│ │ +        """Gets the amount of this RecurringRequestRecurringData.  # noqa: E501
│ │  
│ │ -        The total transaction amount in selected currency with dot as a decimal separator, must be less than 10 billion  # noqa: E501
│ │ +        The total transaction amount in selected currency with dot as a decimal separator, must be less than 100 millions  # noqa: E501
│ │  
│ │ -        :return: The amount of this OneclickData.  # noqa: E501
│ │ +        :return: The amount of this RecurringRequestRecurringData.  # noqa: E501
│ │          :rtype: float
│ │          """
│ │          return self._amount
│ │  
│ │      @amount.setter
│ │      def amount(self, amount):
│ │ -        """Sets the amount of this OneclickData.
│ │ +        """Sets the amount of this RecurringRequestRecurringData.
│ │  
│ │ -        The total transaction amount in selected currency with dot as a decimal separator, must be less than 10 billion  # noqa: E501
│ │ +        The total transaction amount in selected currency with dot as a decimal separator, must be less than 100 millions  # noqa: E501
│ │  
│ │ -        :param amount: The amount of this OneclickData.  # noqa: E501
│ │ +        :param amount: The amount of this RecurringRequestRecurringData.  # noqa: E501
│ │          :type: float
│ │          """
│ │  
│ │          self._amount = amount
│ │  
│ │      @property
│ │ -    def contract_number(self):
│ │ -        """Gets the contract_number of this OneclickData.  # noqa: E501
│ │ -
│ │ -        Contract number between customer and merchant. Required for Mexican merchants for scheduled payments.  # noqa: E501
│ │ -
│ │ -        :return: The contract_number of this OneclickData.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._contract_number
│ │ -
│ │ -    @contract_number.setter
│ │ -    def contract_number(self, contract_number):
│ │ -        """Sets the contract_number of this OneclickData.
│ │ -
│ │ -        Contract number between customer and merchant. Required for Mexican merchants for scheduled payments.  # noqa: E501
│ │ -
│ │ -        :param contract_number: The contract_number of this OneclickData.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._contract_number = contract_number
│ │ -
│ │ -    @property
│ │      def currency(self):
│ │ -        """Gets the currency of this OneclickData.  # noqa: E501
│ │ +        """Gets the currency of this RecurringRequestRecurringData.  # noqa: E501
│ │  
│ │          [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code  # noqa: E501
│ │  
│ │ -        :return: The currency of this OneclickData.  # noqa: E501
│ │ +        :return: The currency of this RecurringRequestRecurringData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._currency
│ │  
│ │      @currency.setter
│ │      def currency(self, currency):
│ │ -        """Sets the currency of this OneclickData.
│ │ +        """Sets the currency of this RecurringRequestRecurringData.
│ │  
│ │          [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code  # noqa: E501
│ │  
│ │ -        :param currency: The currency of this OneclickData.  # noqa: E501
│ │ +        :param currency: The currency of this RecurringRequestRecurringData.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if currency is None:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `currency`, must not be `None`"
│ │ -            )  # noqa: E501
│ │  
│ │          self._currency = currency
│ │  
│ │      @property
│ │      def dynamic_descriptor(self):
│ │ -        """Gets the dynamic_descriptor of this OneclickData.  # noqa: E501
│ │ +        """Gets the dynamic_descriptor of this RecurringRequestRecurringData.  # noqa: E501
│ │  
│ │          Short description of the service or product, must be enabled by CardPay manager to be used.  # noqa: E501
│ │  
│ │ -        :return: The dynamic_descriptor of this OneclickData.  # noqa: E501
│ │ +        :return: The dynamic_descriptor of this RecurringRequestRecurringData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._dynamic_descriptor
│ │  
│ │      @dynamic_descriptor.setter
│ │      def dynamic_descriptor(self, dynamic_descriptor):
│ │ -        """Sets the dynamic_descriptor of this OneclickData.
│ │ +        """Sets the dynamic_descriptor of this RecurringRequestRecurringData.
│ │  
│ │          Short description of the service or product, must be enabled by CardPay manager to be used.  # noqa: E501
│ │  
│ │ -        :param dynamic_descriptor: The dynamic_descriptor of this OneclickData.  # noqa: E501
│ │ +        :param dynamic_descriptor: The dynamic_descriptor of this RecurringRequestRecurringData.  # noqa: E501
│ │          :type: str
│ │          """
│ │          if dynamic_descriptor is not None and len(dynamic_descriptor) > 25:
│ │              raise ValueError(
│ │                  "Invalid value for `dynamic_descriptor`, length must be less than or equal to `25`"
│ │              )  # noqa: E501
│ │          if dynamic_descriptor is not None and len(dynamic_descriptor) < 0:
│ │ @@ -226,256 +208,310 @@
│ │                  "Invalid value for `dynamic_descriptor`, length must be greater than or equal to `0`"
│ │              )  # noqa: E501
│ │  
│ │          self._dynamic_descriptor = dynamic_descriptor
│ │  
│ │      @property
│ │      def filing(self):
│ │ -        """Gets the filing of this OneclickData.  # noqa: E501
│ │ +        """Gets the filing of this RecurringRequestRecurringData.  # noqa: E501
│ │  
│ │          Filing data, should be send in all recurring requests besides first recurring request First recurring request should be send without filing attribute  # noqa: E501
│ │  
│ │ -        :return: The filing of this OneclickData.  # noqa: E501
│ │ +        :return: The filing of this RecurringRequestRecurringData.  # noqa: E501
│ │          :rtype: RecurringRequestFiling
│ │          """
│ │          return self._filing
│ │  
│ │      @filing.setter
│ │      def filing(self, filing):
│ │ -        """Sets the filing of this OneclickData.
│ │ +        """Sets the filing of this RecurringRequestRecurringData.
│ │  
│ │          Filing data, should be send in all recurring requests besides first recurring request First recurring request should be send without filing attribute  # noqa: E501
│ │  
│ │ -        :param filing: The filing of this OneclickData.  # noqa: E501
│ │ +        :param filing: The filing of this RecurringRequestRecurringData.  # noqa: E501
│ │          :type: RecurringRequestFiling
│ │          """
│ │  
│ │          self._filing = filing
│ │  
│ │      @property
│ │      def generate_token(self):
│ │ -        """Gets the generate_token of this OneclickData.  # noqa: E501
│ │ +        """Gets the generate_token of this RecurringRequestRecurringData.  # noqa: E501
│ │  
│ │ -        This attribute can be received only in first recurring request. If set to 'true', Card token will be generated and returned in GET response for all successful transactions (can't be generated for declined transactions). In all requests with filing_id card.token can't be generated.  # noqa: E501
│ │ +        This attribute can be received only in first recurring request. In all requests with recurring_id card.token can't be generated. If set to 'true', card token will be generated and returned in GET response. Will be generated only for successful transactions (not for declined).  # noqa: E501
│ │  
│ │ -        :return: The generate_token of this OneclickData.  # noqa: E501
│ │ +        :return: The generate_token of this RecurringRequestRecurringData.  # noqa: E501
│ │          :rtype: bool
│ │          """
│ │          return self._generate_token
│ │  
│ │      @generate_token.setter
│ │      def generate_token(self, generate_token):
│ │ -        """Sets the generate_token of this OneclickData.
│ │ +        """Sets the generate_token of this RecurringRequestRecurringData.
│ │  
│ │ -        This attribute can be received only in first recurring request. If set to 'true', Card token will be generated and returned in GET response for all successful transactions (can't be generated for declined transactions). In all requests with filing_id card.token can't be generated.  # noqa: E501
│ │ +        This attribute can be received only in first recurring request. In all requests with recurring_id card.token can't be generated. If set to 'true', card token will be generated and returned in GET response. Will be generated only for successful transactions (not for declined).  # noqa: E501
│ │  
│ │ -        :param generate_token: The generate_token of this OneclickData.  # noqa: E501
│ │ +        :param generate_token: The generate_token of this RecurringRequestRecurringData.  # noqa: E501
│ │          :type: bool
│ │          """
│ │  
│ │          self._generate_token = generate_token
│ │  
│ │      @property
│ │      def initiator(self):
│ │ -        """Gets the initiator of this OneclickData.  # noqa: E501
│ │ +        """Gets the initiator of this RecurringRequestRecurringData.  # noqa: E501
│ │  
│ │ -        Can be only 2 values - 'mit' (merchant initiated transaction), 'cit' (cardholder initiated transaction).  # noqa: E501
│ │ +        Can be only 2 values: `mit` (merchant initiated transaction), `cit` (cardholder initiated transaction)  # noqa: E501
│ │  
│ │ -        :return: The initiator of this OneclickData.  # noqa: E501
│ │ +        :return: The initiator of this RecurringRequestRecurringData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._initiator
│ │  
│ │      @initiator.setter
│ │      def initiator(self, initiator):
│ │ -        """Sets the initiator of this OneclickData.
│ │ +        """Sets the initiator of this RecurringRequestRecurringData.
│ │  
│ │ -        Can be only 2 values - 'mit' (merchant initiated transaction), 'cit' (cardholder initiated transaction).  # noqa: E501
│ │ +        Can be only 2 values: `mit` (merchant initiated transaction), `cit` (cardholder initiated transaction)  # noqa: E501
│ │  
│ │ -        :param initiator: The initiator of this OneclickData.  # noqa: E501
│ │ +        :param initiator: The initiator of this RecurringRequestRecurringData.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if initiator is None:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `initiator`, must not be `None`"
│ │ -            )  # noqa: E501
│ │          if initiator is not None and not re.search(r"mit|cit", initiator):  # noqa: E501
│ │              raise ValueError(
│ │                  r"Invalid value for `initiator`, must be a follow pattern or equal to `/mit|cit/`"
│ │              )  # noqa: E501
│ │  
│ │          self._initiator = initiator
│ │  
│ │      @property
│ │ -    def network_trans_id(self):
│ │ -        """Gets the network_trans_id of this OneclickData.  # noqa: E501
│ │ +    def interval(self):
│ │ +        """Gets the interval of this RecurringRequestRecurringData.  # noqa: E501
│ │  
│ │ -        Network Reference Number of original transaction  # noqa: E501
│ │ +        Frequency interval of period, can be 1-365 depending on selected period value. Minimum value of period + interval can be 7 days / 1 week. Maximum value of period + interval plan can be 365 days / 52 weeks / 12 months / 1 year. 1-60 minutes - for **sandbox environment** and testing purpose only.  # noqa: E501
│ │  
│ │ -        :return: The network_trans_id of this OneclickData.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The interval of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :rtype: int
│ │          """
│ │ -        return self._network_trans_id
│ │ +        return self._interval
│ │  
│ │ -    @network_trans_id.setter
│ │ -    def network_trans_id(self, network_trans_id):
│ │ -        """Sets the network_trans_id of this OneclickData.
│ │ +    @interval.setter
│ │ +    def interval(self, interval):
│ │ +        """Sets the interval of this RecurringRequestRecurringData.
│ │  
│ │ -        Network Reference Number of original transaction  # noqa: E501
│ │ +        Frequency interval of period, can be 1-365 depending on selected period value. Minimum value of period + interval can be 7 days / 1 week. Maximum value of period + interval plan can be 365 days / 52 weeks / 12 months / 1 year. 1-60 minutes - for **sandbox environment** and testing purpose only.  # noqa: E501
│ │  
│ │ -        :param network_trans_id: The network_trans_id of this OneclickData.  # noqa: E501
│ │ -        :type: str
│ │ +        :param interval: The interval of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :type: int
│ │          """
│ │ +        if interval is not None and interval < 1:  # noqa: E501
│ │ +            raise ValueError(
│ │ +                "Invalid value for `interval`, must be a value greater than or equal to `1`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._network_trans_id = network_trans_id
│ │ +        self._interval = interval
│ │  
│ │      @property
│ │      def note(self):
│ │ -        """Gets the note of this OneclickData.  # noqa: E501
│ │ +        """Gets the note of this RecurringRequestRecurringData.  # noqa: E501
│ │  
│ │          Note about the recurring that will not be displayed to customer.  # noqa: E501
│ │  
│ │ -        :return: The note of this OneclickData.  # noqa: E501
│ │ +        :return: The note of this RecurringRequestRecurringData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._note
│ │  
│ │      @note.setter
│ │      def note(self, note):
│ │ -        """Sets the note of this OneclickData.
│ │ +        """Sets the note of this RecurringRequestRecurringData.
│ │  
│ │          Note about the recurring that will not be displayed to customer.  # noqa: E501
│ │  
│ │ -        :param note: The note of this OneclickData.  # noqa: E501
│ │ +        :param note: The note of this RecurringRequestRecurringData.  # noqa: E501
│ │          :type: str
│ │          """
│ │          if note is not None and len(note) > 100:
│ │              raise ValueError(
│ │                  "Invalid value for `note`, length must be less than or equal to `100`"
│ │              )  # noqa: E501
│ │          if note is not None and len(note) < 0:
│ │              raise ValueError(
│ │                  "Invalid value for `note`, length must be greater than or equal to `0`"
│ │              )  # noqa: E501
│ │  
│ │          self._note = note
│ │  
│ │      @property
│ │ -    def preauth(self):
│ │ -        """Gets the preauth of this OneclickData.  # noqa: E501
│ │ +    def payments(self):
│ │ +        """Gets the payments of this RecurringRequestRecurringData.  # noqa: E501
│ │  
│ │ -        This parameter allowed to be used only for first recurring payment. If set to 'true', the amount will not be captured but only blocked. One-click payments with 'preauth' attribute will be captured automatically in 7 days from the time of creating the preauth transaction. In continue recurring request (with 'filing_id') this parameter shouldn't be used.  # noqa: E501
│ │ +        Number of total payments to be charged per defined interval, can be 2-200.  # noqa: E501
│ │  
│ │ -        :return: The preauth of this OneclickData.  # noqa: E501
│ │ -        :rtype: bool
│ │ +        :return: The payments of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :rtype: int
│ │          """
│ │ -        return self._preauth
│ │ +        return self._payments
│ │  
│ │ -    @preauth.setter
│ │ -    def preauth(self, preauth):
│ │ -        """Sets the preauth of this OneclickData.
│ │ +    @payments.setter
│ │ +    def payments(self, payments):
│ │ +        """Sets the payments of this RecurringRequestRecurringData.
│ │  
│ │ -        This parameter allowed to be used only for first recurring payment. If set to 'true', the amount will not be captured but only blocked. One-click payments with 'preauth' attribute will be captured automatically in 7 days from the time of creating the preauth transaction. In continue recurring request (with 'filing_id') this parameter shouldn't be used.  # noqa: E501
│ │ +        Number of total payments to be charged per defined interval, can be 2-200.  # noqa: E501
│ │  
│ │ -        :param preauth: The preauth of this OneclickData.  # noqa: E501
│ │ -        :type: bool
│ │ +        :param payments: The payments of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :type: int
│ │          """
│ │ +        if payments is not None and payments > 200:  # noqa: E501
│ │ +            raise ValueError(
│ │ +                "Invalid value for `payments`, must be a value less than or equal to `200`"
│ │ +            )  # noqa: E501
│ │ +        if payments is not None and payments < 2:  # noqa: E501
│ │ +            raise ValueError(
│ │ +                "Invalid value for `payments`, must be a value greater than or equal to `2`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._preauth = preauth
│ │ +        self._payments = payments
│ │ +
│ │ +    class Period(object):
│ │ +        MINUTE = "minute"
│ │ +        DAY = "day"
│ │ +        WEEK = "week"
│ │ +        MONTH = "month"
│ │ +        YEAR = "year"
│ │  
│ │      @property
│ │ -    def sca_exemption(self):
│ │ -        """Gets the sca_exemption of this OneclickData.  # noqa: E501
│ │ +    def period(self):
│ │ +        """Gets the period of this RecurringRequestRecurringData.  # noqa: E501
│ │  
│ │ -        Indicates the exemption type that you want to request for the transaction. Possible value: LOW_VALUE  # noqa: E501
│ │ +        Initial period of recurring, can be `day`, `week`, `month`, `year`.  `minute` - for **sandbox environment** and testing purpose only.  # noqa: E501
│ │  
│ │ -        :return: The sca_exemption of this OneclickData.  # noqa: E501
│ │ +        :return: The period of this RecurringRequestRecurringData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._sca_exemption
│ │ +        return self._period
│ │  
│ │ -    @sca_exemption.setter
│ │ -    def sca_exemption(self, sca_exemption):
│ │ -        """Sets the sca_exemption of this OneclickData.
│ │ +    @period.setter
│ │ +    def period(self, period):
│ │ +        """Sets the period of this RecurringRequestRecurringData.
│ │  
│ │ -        Indicates the exemption type that you want to request for the transaction. Possible value: LOW_VALUE  # noqa: E501
│ │ +        Initial period of recurring, can be `day`, `week`, `month`, `year`.  `minute` - for **sandbox environment** and testing purpose only.  # noqa: E501
│ │  
│ │ -        :param sca_exemption: The sca_exemption of this OneclickData.  # noqa: E501
│ │ +        :param period: The period of this RecurringRequestRecurringData.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if sca_exemption is not None and not re.search(
│ │ -            r"LOW_VALUE", sca_exemption
│ │ -        ):  # noqa: E501
│ │ +        allowed_values = ["minute", "day", "week", "month", "year"]  # noqa: E501
│ │ +        if period not in allowed_values:
│ │              raise ValueError(
│ │ -                r"Invalid value for `sca_exemption`, must be a follow pattern or equal to `/LOW_VALUE/`"
│ │ -            )  # noqa: E501
│ │ +                "Invalid value for `period` ({0}), must be one of {1}".format(  # noqa: E501
│ │ +                    period, allowed_values
│ │ +                )
│ │ +            )
│ │  
│ │ -        self._sca_exemption = sca_exemption
│ │ +        self._period = period
│ │  
│ │      @property
│ │ -    def three_ds_challenge_indicator(self):
│ │ -        """Gets the three_ds_challenge_indicator of this OneclickData.  # noqa: E501
│ │ +    def plan(self):
│ │ +        """Gets the plan of this RecurringRequestRecurringData.  # noqa: E501
│ │  
│ │ +        Plan data  # noqa: E501
│ │  
│ │ -        :return: The three_ds_challenge_indicator of this OneclickData.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The plan of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :rtype: Plan
│ │          """
│ │ -        return self._three_ds_challenge_indicator
│ │ +        return self._plan
│ │  
│ │ -    @three_ds_challenge_indicator.setter
│ │ -    def three_ds_challenge_indicator(self, three_ds_challenge_indicator):
│ │ -        """Sets the three_ds_challenge_indicator of this OneclickData.
│ │ +    @plan.setter
│ │ +    def plan(self, plan):
│ │ +        """Sets the plan of this RecurringRequestRecurringData.
│ │  
│ │ +        Plan data  # noqa: E501
│ │  
│ │ -        :param three_ds_challenge_indicator: The three_ds_challenge_indicator of this OneclickData.  # noqa: E501
│ │ -        :type: str
│ │ +        :param plan: The plan of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :type: Plan
│ │          """
│ │ -        if three_ds_challenge_indicator is not None and not re.search(
│ │ -            r"01|04", three_ds_challenge_indicator
│ │ -        ):  # noqa: E501
│ │ -            raise ValueError(
│ │ -                r"Invalid value for `three_ds_challenge_indicator`, must be a follow pattern or equal to `/01|04/`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._three_ds_challenge_indicator = three_ds_challenge_indicator
│ │ +        self._plan = plan
│ │ +
│ │ +    @property
│ │ +    def preauth(self):
│ │ +        """Gets the preauth of this RecurringRequestRecurringData.  # noqa: E501
│ │ +
│ │ +        This parameter is allowed to be used only for first recurring payment. If set to `true`, the amount will not be captured but only blocked *(for BANKCARD payment method only)*.  # noqa: E501
│ │ +
│ │ +        :return: The preauth of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :rtype: bool
│ │ +        """
│ │ +        return self._preauth
│ │ +
│ │ +    @preauth.setter
│ │ +    def preauth(self, preauth):
│ │ +        """Sets the preauth of this RecurringRequestRecurringData.
│ │ +
│ │ +        This parameter is allowed to be used only for first recurring payment. If set to `true`, the amount will not be captured but only blocked *(for BANKCARD payment method only)*.  # noqa: E501
│ │ +
│ │ +        :param preauth: The preauth of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :type: bool
│ │ +        """
│ │  
│ │ -    class TransType(object):
│ │ -        _01 = "01"
│ │ -        _03 = "03"
│ │ -        _10 = "10"
│ │ -        _11 = "11"
│ │ -        _28 = "28"
│ │ +        self._preauth = preauth
│ │  
│ │      @property
│ │ -    def trans_type(self):
│ │ -        """Gets the trans_type of this OneclickData.  # noqa: E501
│ │ +    def retries(self):
│ │ +        """Gets the retries of this RecurringRequestRecurringData.  # noqa: E501
│ │  
│ │ +        Number of daily basis retry attempts in case of payment has not been captured successfully, from 1 to 15 attempts can be specified.  # noqa: E501
│ │  
│ │ -        :return: The trans_type of this OneclickData.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The retries of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :rtype: int
│ │          """
│ │ -        return self._trans_type
│ │ +        return self._retries
│ │  
│ │ -    @trans_type.setter
│ │ -    def trans_type(self, trans_type):
│ │ -        """Sets the trans_type of this OneclickData.
│ │ +    @retries.setter
│ │ +    def retries(self, retries):
│ │ +        """Sets the retries of this RecurringRequestRecurringData.
│ │  
│ │ +        Number of daily basis retry attempts in case of payment has not been captured successfully, from 1 to 15 attempts can be specified.  # noqa: E501
│ │  
│ │ -        :param trans_type: The trans_type of this OneclickData.  # noqa: E501
│ │ -        :type: str
│ │ +        :param retries: The retries of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :type: int
│ │          """
│ │ -        allowed_values = ["01", "03", "10", "11", "28"]  # noqa: E501
│ │ -        if trans_type not in allowed_values:
│ │ +        if retries is not None and retries > 15:  # noqa: E501
│ │              raise ValueError(
│ │ -                "Invalid value for `trans_type` ({0}), must be one of {1}".format(  # noqa: E501
│ │ -                    trans_type, allowed_values
│ │ -                )
│ │ -            )
│ │ +                "Invalid value for `retries`, must be a value less than or equal to `15`"
│ │ +            )  # noqa: E501
│ │ +        if retries is not None and retries < 1:  # noqa: E501
│ │ +            raise ValueError(
│ │ +                "Invalid value for `retries`, must be a value greater than or equal to `1`"
│ │ +            )  # noqa: E501
│ │ +
│ │ +        self._retries = retries
│ │ +
│ │ +    @property
│ │ +    def subscription_start(self):
│ │ +        """Gets the subscription_start of this RecurringRequestRecurringData.  # noqa: E501
│ │ +
│ │ +        The date in yyyy-MM-dd format when subscription will actually become activated (grace period). Auth request will be created but Customer will be charged only when subscription start date comes. Leave it empty or specify the current date to activate subscription at once without any grace period applied.  # noqa: E501
│ │ +
│ │ +        :return: The subscription_start of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :rtype: datetime
│ │ +        """
│ │ +        return self._subscription_start
│ │ +
│ │ +    @subscription_start.setter
│ │ +    def subscription_start(self, subscription_start):
│ │ +        """Sets the subscription_start of this RecurringRequestRecurringData.
│ │ +
│ │ +        The date in yyyy-MM-dd format when subscription will actually become activated (grace period). Auth request will be created but Customer will be charged only when subscription start date comes. Leave it empty or specify the current date to activate subscription at once without any grace period applied.  # noqa: E501
│ │ +
│ │ +        :param subscription_start: The subscription_start of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :type: datetime
│ │ +        """
│ │  
│ │ -        self._trans_type = trans_type
│ │ +        self._subscription_start = subscription_start
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -493,15 +529,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(OneclickData, dict):
│ │ +        if issubclass(RecurringRequestRecurringData, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -509,15 +545,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, OneclickData):
│ │ +        if not isinstance(other, RecurringRequestRecurringData):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/payment_callback.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_callback.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payment_confirm3ds_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_confirm3ds_request.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payment_execute_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_execute_request.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payment_gateway_creation_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_gateway_creation_response.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payment_gateway_response_payment_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_gateway_response_payment_data.py
│ │┄ Files 18% similar despite different names
│ │ @@ -26,65 +26,31 @@
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │ -    swagger_types = {
│ │ -        "extended_data": "dict(str, str)",
│ │ -        "id": "str",
│ │ -        "separate_auth": "bool",
│ │ -    }
│ │ -
│ │ -    attribute_map = {
│ │ -        "extended_data": "extended_data",
│ │ -        "id": "id",
│ │ -        "separate_auth": "separate_auth",
│ │ -    }
│ │ +    swagger_types = {"id": "str", "separate_auth": "bool"}
│ │  
│ │ -    def __init__(self, extended_data=None, id=None, separate_auth=None):  # noqa: E501
│ │ +    attribute_map = {"id": "id", "separate_auth": "separate_auth"}
│ │ +
│ │ +    def __init__(self, id=None, separate_auth=None):  # noqa: E501
│ │          """PaymentGatewayResponsePaymentData - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._extended_data = None
│ │          self._id = None
│ │          self._separate_auth = None
│ │          self.discriminator = None
│ │  
│ │ -        if extended_data is not None:
│ │ -            self.extended_data = extended_data
│ │          if id is not None:
│ │              self.id = id
│ │          if separate_auth is not None:
│ │              self.separate_auth = separate_auth
│ │  
│ │      @property
│ │ -    def extended_data(self):
│ │ -        """Gets the extended_data of this PaymentGatewayResponsePaymentData.  # noqa: E501
│ │ -
│ │ -        Extended structure with information for processing a payment in gateway mode. Contact your account manager to enable it  # noqa: E501
│ │ -
│ │ -        :return: The extended_data of this PaymentGatewayResponsePaymentData.  # noqa: E501
│ │ -        :rtype: dict(str, str)
│ │ -        """
│ │ -        return self._extended_data
│ │ -
│ │ -    @extended_data.setter
│ │ -    def extended_data(self, extended_data):
│ │ -        """Sets the extended_data of this PaymentGatewayResponsePaymentData.
│ │ -
│ │ -        Extended structure with information for processing a payment in gateway mode. Contact your account manager to enable it  # noqa: E501
│ │ -
│ │ -        :param extended_data: The extended_data of this PaymentGatewayResponsePaymentData.  # noqa: E501
│ │ -        :type: dict(str, str)
│ │ -        """
│ │ -
│ │ -        self._extended_data = extended_data
│ │ -
│ │ -    @property
│ │      def id(self):
│ │          """Gets the id of this PaymentGatewayResponsePaymentData.  # noqa: E501
│ │  
│ │          Cardpay's payment id  # noqa: E501
│ │  
│ │          :return: The id of this PaymentGatewayResponsePaymentData.  # noqa: E501
│ │          :rtype: str
│ │   --- cardpay-3.45.8/cardpay/model/payment_methods_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/transaction_methods_list.py
│ │┄ Files 22% similar despite different names
│ │ @@ -12,157 +12,99 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ -from cardpay.model.supported_payment_method import (
│ │ -    SupportedPaymentMethod,
│ │ +from cardpay.model.payment_methods_response import (
│ │ +    PaymentMethodsResponse,
│ │  )  # noqa: F401,E501
│ │  
│ │  
│ │ -class PaymentMethodsResponse(object):
│ │ +class TransactionMethodsList(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │ -        "brands": "list[str]",
│ │ -        "category": "str",
│ │ -        "name": "str",
│ │ -        "supported_payment_methods": "list[SupportedPaymentMethod]",
│ │ +        "payment_methods": "list[PaymentMethodsResponse]",
│ │ +        "payout_methods": "list[PaymentMethodsResponse]",
│ │      }
│ │  
│ │      attribute_map = {
│ │ -        "brands": "brands",
│ │ -        "category": "category",
│ │ -        "name": "name",
│ │ -        "supported_payment_methods": "supported_payment_methods",
│ │ +        "payment_methods": "payment_methods",
│ │ +        "payout_methods": "payout_methods",
│ │      }
│ │  
│ │ -    def __init__(
│ │ -        self, brands=None, category=None, name=None, supported_payment_methods=None
│ │ -    ):  # noqa: E501
│ │ -        """PaymentMethodsResponse - a model defined in Swagger"""  # noqa: E501
│ │ -
│ │ -        self._brands = None
│ │ -        self._category = None
│ │ -        self._name = None
│ │ -        self._supported_payment_methods = None
│ │ -        self.discriminator = None
│ │ -
│ │ -        if brands is not None:
│ │ -            self.brands = brands
│ │ -        if category is not None:
│ │ -            self.category = category
│ │ -        if name is not None:
│ │ -            self.name = name
│ │ -        if supported_payment_methods is not None:
│ │ -            self.supported_payment_methods = supported_payment_methods
│ │ -
│ │ -    @property
│ │ -    def brands(self):
│ │ -        """Gets the brands of this PaymentMethodsResponse.  # noqa: E501
│ │ -
│ │ -        Available Card Brands, is presented only for 'BANKCARD' payment method  # noqa: E501
│ │ -
│ │ -        :return: The brands of this PaymentMethodsResponse.  # noqa: E501
│ │ -        :rtype: list[str]
│ │ -        """
│ │ -        return self._brands
│ │ -
│ │ -    @brands.setter
│ │ -    def brands(self, brands):
│ │ -        """Sets the brands of this PaymentMethodsResponse.
│ │ -
│ │ -        Available Card Brands, is presented only for 'BANKCARD' payment method  # noqa: E501
│ │ -
│ │ -        :param brands: The brands of this PaymentMethodsResponse.  # noqa: E501
│ │ -        :type: list[str]
│ │ -        """
│ │ +    def __init__(self, payment_methods=None, payout_methods=None):  # noqa: E501
│ │ +        """TransactionMethodsList - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._brands = brands
│ │ -
│ │ -    @property
│ │ -    def category(self):
│ │ -        """Gets the category of this PaymentMethodsResponse.  # noqa: E501
│ │ -
│ │ -        Payment method category  # noqa: E501
│ │ -
│ │ -        :return: The category of this PaymentMethodsResponse.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._category
│ │ -
│ │ -    @category.setter
│ │ -    def category(self, category):
│ │ -        """Sets the category of this PaymentMethodsResponse.
│ │ -
│ │ -        Payment method category  # noqa: E501
│ │ -
│ │ -        :param category: The category of this PaymentMethodsResponse.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ +        self._payment_methods = None
│ │ +        self._payout_methods = None
│ │ +        self.discriminator = None
│ │  
│ │ -        self._category = category
│ │ +        if payment_methods is not None:
│ │ +            self.payment_methods = payment_methods
│ │ +        if payout_methods is not None:
│ │ +            self.payout_methods = payout_methods
│ │  
│ │      @property
│ │ -    def name(self):
│ │ -        """Gets the name of this PaymentMethodsResponse.  # noqa: E501
│ │ +    def payment_methods(self):
│ │ +        """Gets the payment_methods of this TransactionMethodsList.  # noqa: E501
│ │  
│ │ -        Payment method name  # noqa: E501
│ │ +        Payment methods list  # noqa: E501
│ │  
│ │ -        :return: The name of this PaymentMethodsResponse.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The payment_methods of this TransactionMethodsList.  # noqa: E501
│ │ +        :rtype: list[PaymentMethodsResponse]
│ │          """
│ │ -        return self._name
│ │ +        return self._payment_methods
│ │  
│ │ -    @name.setter
│ │ -    def name(self, name):
│ │ -        """Sets the name of this PaymentMethodsResponse.
│ │ +    @payment_methods.setter
│ │ +    def payment_methods(self, payment_methods):
│ │ +        """Sets the payment_methods of this TransactionMethodsList.
│ │  
│ │ -        Payment method name  # noqa: E501
│ │ +        Payment methods list  # noqa: E501
│ │  
│ │ -        :param name: The name of this PaymentMethodsResponse.  # noqa: E501
│ │ -        :type: str
│ │ +        :param payment_methods: The payment_methods of this TransactionMethodsList.  # noqa: E501
│ │ +        :type: list[PaymentMethodsResponse]
│ │          """
│ │  
│ │ -        self._name = name
│ │ +        self._payment_methods = payment_methods
│ │  
│ │      @property
│ │ -    def supported_payment_methods(self):
│ │ -        """Gets the supported_payment_methods of this PaymentMethodsResponse.  # noqa: E501
│ │ +    def payout_methods(self):
│ │ +        """Gets the payout_methods of this TransactionMethodsList.  # noqa: E501
│ │  
│ │ -        Supported payment methods  # noqa: E501
│ │ +        Payout methods list  # noqa: E501
│ │  
│ │ -        :return: The supported_payment_methods of this PaymentMethodsResponse.  # noqa: E501
│ │ -        :rtype: list[SupportedPaymentMethod]
│ │ +        :return: The payout_methods of this TransactionMethodsList.  # noqa: E501
│ │ +        :rtype: list[PaymentMethodsResponse]
│ │          """
│ │ -        return self._supported_payment_methods
│ │ +        return self._payout_methods
│ │  
│ │ -    @supported_payment_methods.setter
│ │ -    def supported_payment_methods(self, supported_payment_methods):
│ │ -        """Sets the supported_payment_methods of this PaymentMethodsResponse.
│ │ +    @payout_methods.setter
│ │ +    def payout_methods(self, payout_methods):
│ │ +        """Sets the payout_methods of this TransactionMethodsList.
│ │  
│ │ -        Supported payment methods  # noqa: E501
│ │ +        Payout methods list  # noqa: E501
│ │  
│ │ -        :param supported_payment_methods: The supported_payment_methods of this PaymentMethodsResponse.  # noqa: E501
│ │ -        :type: list[SupportedPaymentMethod]
│ │ +        :param payout_methods: The payout_methods of this TransactionMethodsList.  # noqa: E501
│ │ +        :type: list[PaymentMethodsResponse]
│ │          """
│ │  
│ │ -        self._supported_payment_methods = supported_payment_methods
│ │ +        self._payout_methods = payout_methods
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -180,15 +122,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(PaymentMethodsResponse, dict):
│ │ +        if issubclass(TransactionMethodsList, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -196,15 +138,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, PaymentMethodsResponse):
│ │ +        if not isinstance(other, TransactionMethodsList):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/payment_patch_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_patch_request.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payment_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_request.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payment_request_card.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_request_card.py
│ │┄ Files 6% similar despite different names
│ │ @@ -31,56 +31,45 @@
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │          "acct_type": "str",
│ │          "expiration": "str",
│ │          "holder": "str",
│ │          "pan": "str",
│ │ -        "pin_code": "str",
│ │          "security_code": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │          "acct_type": "acct_type",
│ │          "expiration": "expiration",
│ │          "holder": "holder",
│ │          "pan": "pan",
│ │ -        "pin_code": "pin_code",
│ │          "security_code": "security_code",
│ │      }
│ │  
│ │      def __init__(
│ │ -        self,
│ │ -        acct_type=None,
│ │ -        expiration=None,
│ │ -        holder=None,
│ │ -        pan=None,
│ │ -        pin_code=None,
│ │ -        security_code=None,
│ │ +        self, acct_type=None, expiration=None, holder=None, pan=None, security_code=None
│ │      ):  # noqa: E501
│ │          """PaymentRequestCard - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._acct_type = None
│ │          self._expiration = None
│ │          self._holder = None
│ │          self._pan = None
│ │ -        self._pin_code = None
│ │          self._security_code = None
│ │          self.discriminator = None
│ │  
│ │          if acct_type is not None:
│ │              self.acct_type = acct_type
│ │          if expiration is not None:
│ │              self.expiration = expiration
│ │          if holder is not None:
│ │              self.holder = holder
│ │          if pan is not None:
│ │              self.pan = pan
│ │ -        if pin_code is not None:
│ │ -            self.pin_code = pin_code
│ │          if security_code is not None:
│ │              self.security_code = security_code
│ │  
│ │      class AcctType(object):
│ │          _01 = "01"
│ │          _02 = "02"
│ │          _03 = "03"
│ │ @@ -201,41 +190,14 @@
│ │              raise ValueError(
│ │                  "Invalid value for `pan`, length must be greater than or equal to `13`"
│ │              )  # noqa: E501
│ │  
│ │          self._pan = pan
│ │  
│ │      @property
│ │ -    def pin_code(self):
│ │ -        """Gets the pin_code of this PaymentRequestCard.  # noqa: E501
│ │ -
│ │ -
│ │ -        :return: The pin_code of this PaymentRequestCard.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._pin_code
│ │ -
│ │ -    @pin_code.setter
│ │ -    def pin_code(self, pin_code):
│ │ -        """Sets the pin_code of this PaymentRequestCard.
│ │ -
│ │ -
│ │ -        :param pin_code: The pin_code of this PaymentRequestCard.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -        if pin_code is not None and not re.search(
│ │ -            r"^[0-9]{4}$", pin_code
│ │ -        ):  # noqa: E501
│ │ -            raise ValueError(
│ │ -                r"Invalid value for `pin_code`, must be a follow pattern or equal to `/^[0-9]{4}$/`"
│ │ -            )  # noqa: E501
│ │ -
│ │ -        self._pin_code = pin_code
│ │ -
│ │ -    @property
│ │      def security_code(self):
│ │          """Gets the security_code of this PaymentRequestCard.  # noqa: E501
│ │  
│ │          Customer's CVV2 / CVC2 / CAV2  # noqa: E501
│ │  
│ │          :return: The security_code of this PaymentRequestCard.  # noqa: E501
│ │          :rtype: str
│ │   --- cardpay-3.45.8/cardpay/model/payment_request_card_account.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_request_e_wallet_account.py
│ │┄ Files 22% similar despite different names
│ │ @@ -12,213 +12,198 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ -from cardpay.model.billing_address import BillingAddress  # noqa: F401,E501
│ │ -from cardpay.model.payment_request_card import PaymentRequestCard  # noqa: F401,E501
│ │  
│ │ -
│ │ -class PaymentRequestCardAccount(object):
│ │ +class PaymentRequestEWalletAccount(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │ -        "billing_address": "BillingAddress",
│ │ -        "card": "PaymentRequestCard",
│ │ -        "encrypted_card_data": "str",
│ │ -        "recipient_info": "str",
│ │ -        "token": "str",
│ │ +        "bank_code": "str",
│ │ +        "creation_date": "str",
│ │ +        "expiration_date": "str",
│ │ +        "id": "str",
│ │ +        "verification_code": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │ -        "billing_address": "billing_address",
│ │ -        "card": "card",
│ │ -        "encrypted_card_data": "encrypted_card_data",
│ │ -        "recipient_info": "recipient_info",
│ │ -        "token": "token",
│ │ +        "bank_code": "bank_code",
│ │ +        "creation_date": "creation_date",
│ │ +        "expiration_date": "expiration_date",
│ │ +        "id": "id",
│ │ +        "verification_code": "verification_code",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │ -        billing_address=None,
│ │ -        card=None,
│ │ -        encrypted_card_data=None,
│ │ -        recipient_info=None,
│ │ -        token=None,
│ │ +        bank_code=None,
│ │ +        creation_date=None,
│ │ +        expiration_date=None,
│ │ +        id=None,
│ │ +        verification_code=None,
│ │      ):  # noqa: E501
│ │ -        """PaymentRequestCardAccount - a model defined in Swagger"""  # noqa: E501
│ │ +        """PaymentRequestEWalletAccount - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._billing_address = None
│ │ -        self._card = None
│ │ -        self._encrypted_card_data = None
│ │ -        self._recipient_info = None
│ │ -        self._token = None
│ │ +        self._bank_code = None
│ │ +        self._creation_date = None
│ │ +        self._expiration_date = None
│ │ +        self._id = None
│ │ +        self._verification_code = None
│ │          self.discriminator = None
│ │  
│ │ -        if billing_address is not None:
│ │ -            self.billing_address = billing_address
│ │ -        if card is not None:
│ │ -            self.card = card
│ │ -        if encrypted_card_data is not None:
│ │ -            self.encrypted_card_data = encrypted_card_data
│ │ -        if recipient_info is not None:
│ │ -            self.recipient_info = recipient_info
│ │ -        if token is not None:
│ │ -            self.token = token
│ │ +        if bank_code is not None:
│ │ +            self.bank_code = bank_code
│ │ +        if creation_date is not None:
│ │ +            self.creation_date = creation_date
│ │ +        if expiration_date is not None:
│ │ +            self.expiration_date = expiration_date
│ │ +        if id is not None:
│ │ +            self.id = id
│ │ +        if verification_code is not None:
│ │ +            self.verification_code = verification_code
│ │  
│ │      @property
│ │ -    def billing_address(self):
│ │ -        """Gets the billing_address of this PaymentRequestCardAccount.  # noqa: E501
│ │ +    def bank_code(self):
│ │ +        """Gets the bank_code of this PaymentRequestEWalletAccount.  # noqa: E501
│ │  
│ │ -        Billing Address  # noqa: E501
│ │ +        Card issuer's code. For DIRECTBANKINGNGA: Customer bank code (3 digits). Mandatory for DIRECTBANKINGNGA payment method only.  # noqa: E501
│ │  
│ │ -        :return: The billing_address of this PaymentRequestCardAccount.  # noqa: E501
│ │ -        :rtype: BillingAddress
│ │ +        :return: The bank_code of this PaymentRequestEWalletAccount.  # noqa: E501
│ │ +        :rtype: str
│ │          """
│ │ -        return self._billing_address
│ │ +        return self._bank_code
│ │  
│ │ -    @billing_address.setter
│ │ -    def billing_address(self, billing_address):
│ │ -        """Sets the billing_address of this PaymentRequestCardAccount.
│ │ +    @bank_code.setter
│ │ +    def bank_code(self, bank_code):
│ │ +        """Sets the bank_code of this PaymentRequestEWalletAccount.
│ │  
│ │ -        Billing Address  # noqa: E501
│ │ +        Card issuer's code. For DIRECTBANKINGNGA: Customer bank code (3 digits). Mandatory for DIRECTBANKINGNGA payment method only.  # noqa: E501
│ │  
│ │ -        :param billing_address: The billing_address of this PaymentRequestCardAccount.  # noqa: E501
│ │ -        :type: BillingAddress
│ │ +        :param bank_code: The bank_code of this PaymentRequestEWalletAccount.  # noqa: E501
│ │ +        :type: str
│ │          """
│ │  
│ │ -        self._billing_address = billing_address
│ │ +        self._bank_code = bank_code
│ │  
│ │      @property
│ │ -    def card(self):
│ │ -        """Gets the card of this PaymentRequestCardAccount.  # noqa: E501
│ │ +    def creation_date(self):
│ │ +        """Gets the creation_date of this PaymentRequestEWalletAccount.  # noqa: E501
│ │  
│ │ -        Represents a payment card data. Card section shouldn't be present if element 'token' was presented. Shouldn't be used in Payment Page mode. For recurring: all card elements should presented only for first recurring payment.  # noqa: E501
│ │ +        Card creation date  # noqa: E501
│ │  
│ │ -        :return: The card of this PaymentRequestCardAccount.  # noqa: E501
│ │ -        :rtype: PaymentRequestCard
│ │ +        :return: The creation_date of this PaymentRequestEWalletAccount.  # noqa: E501
│ │ +        :rtype: str
│ │          """
│ │ -        return self._card
│ │ +        return self._creation_date
│ │  
│ │ -    @card.setter
│ │ -    def card(self, card):
│ │ -        """Sets the card of this PaymentRequestCardAccount.
│ │ +    @creation_date.setter
│ │ +    def creation_date(self, creation_date):
│ │ +        """Sets the creation_date of this PaymentRequestEWalletAccount.
│ │  
│ │ -        Represents a payment card data. Card section shouldn't be present if element 'token' was presented. Shouldn't be used in Payment Page mode. For recurring: all card elements should presented only for first recurring payment.  # noqa: E501
│ │ +        Card creation date  # noqa: E501
│ │  
│ │ -        :param card: The card of this PaymentRequestCardAccount.  # noqa: E501
│ │ -        :type: PaymentRequestCard
│ │ +        :param creation_date: The creation_date of this PaymentRequestEWalletAccount.  # noqa: E501
│ │ +        :type: str
│ │          """
│ │ +        if creation_date is not None and not re.search(
│ │ +            r"^[\\d{2,4}|\/?|\\.?]{2,10}$", creation_date
│ │ +        ):  # noqa: E501
│ │ +            raise ValueError(
│ │ +                r"Invalid value for `creation_date`, must be a follow pattern or equal to `/^[\\d{2,4}|\/?|\\.?]{2,10}$/`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._card = card
│ │ +        self._creation_date = creation_date
│ │  
│ │      @property
│ │ -    def encrypted_card_data(self):
│ │ -        """Gets the encrypted_card_data of this PaymentRequestCardAccount.  # noqa: E501
│ │ +    def expiration_date(self):
│ │ +        """Gets the expiration_date of this PaymentRequestEWalletAccount.  # noqa: E501
│ │  
│ │ -        Encrypted card data. The field includes: pan, security_code, expiration. Only for Gateway mode.  # noqa: E501
│ │ +        Account expiration date  # noqa: E501
│ │  
│ │ -        :return: The encrypted_card_data of this PaymentRequestCardAccount.  # noqa: E501
│ │ +        :return: The expiration_date of this PaymentRequestEWalletAccount.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._encrypted_card_data
│ │ +        return self._expiration_date
│ │  
│ │ -    @encrypted_card_data.setter
│ │ -    def encrypted_card_data(self, encrypted_card_data):
│ │ -        """Sets the encrypted_card_data of this PaymentRequestCardAccount.
│ │ +    @expiration_date.setter
│ │ +    def expiration_date(self, expiration_date):
│ │ +        """Sets the expiration_date of this PaymentRequestEWalletAccount.
│ │  
│ │ -        Encrypted card data. The field includes: pan, security_code, expiration. Only for Gateway mode.  # noqa: E501
│ │ +        Account expiration date  # noqa: E501
│ │  
│ │ -        :param encrypted_card_data: The encrypted_card_data of this PaymentRequestCardAccount.  # noqa: E501
│ │ +        :param expiration_date: The expiration_date of this PaymentRequestEWalletAccount.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if encrypted_card_data is not None and len(encrypted_card_data) > 1000:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `encrypted_card_data`, length must be less than or equal to `1000`"
│ │ -            )  # noqa: E501
│ │ -        if encrypted_card_data is not None and len(encrypted_card_data) < 0:
│ │ +        if expiration_date is not None and not re.search(
│ │ +            r"^[\\d{2,4}|\/?|\\.?]{2,10}$", expiration_date
│ │ +        ):  # noqa: E501
│ │              raise ValueError(
│ │ -                "Invalid value for `encrypted_card_data`, length must be greater than or equal to `0`"
│ │ +                r"Invalid value for `expiration_date`, must be a follow pattern or equal to `/^[\\d{2,4}|\/?|\\.?]{2,10}$/`"
│ │              )  # noqa: E501
│ │  
│ │ -        self._encrypted_card_data = encrypted_card_data
│ │ +        self._expiration_date = expiration_date
│ │  
│ │      @property
│ │ -    def recipient_info(self):
│ │ -        """Gets the recipient_info of this PaymentRequestCardAccount.  # noqa: E501
│ │ +    def id(self):
│ │ +        """Gets the id of this PaymentRequestEWalletAccount.  # noqa: E501
│ │  
│ │ -        Recipient full name. Property `recipient_info` may be required by Bank. In most cases it's Cardholder's name, contact Unlimint manager for requirements. Mandatory only for money transfer operation.  # noqa: E501
│ │ +        For QIWI: Customer phone number (from 1 to 15 digits). For NETELLER: email address of Customer. For 'Latin America': Customer personal identification number: CPF or CNPJ for Brazil, DNI for Argentina and ID for other countries. For AIRTEL, MPESA, MTN, UGANDAMOBILE, VODAFONE and TIGO: phone number linked to Customer's mobile money account. For DIRECTBANKINGNGA: bank account number Mandatory for QIWI, NETELLER, 'Latin America', AIRTEL, MPESA, MTN, UGANDAMOBILE, VODAFONE, TIGO and DIRECTBANKINGNGA payment methods only.  # noqa: E501
│ │  
│ │ -        :return: The recipient_info of this PaymentRequestCardAccount.  # noqa: E501
│ │ +        :return: The id of this PaymentRequestEWalletAccount.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._recipient_info
│ │ +        return self._id
│ │  
│ │ -    @recipient_info.setter
│ │ -    def recipient_info(self, recipient_info):
│ │ -        """Sets the recipient_info of this PaymentRequestCardAccount.
│ │ +    @id.setter
│ │ +    def id(self, id):
│ │ +        """Sets the id of this PaymentRequestEWalletAccount.
│ │  
│ │ -        Recipient full name. Property `recipient_info` may be required by Bank. In most cases it's Cardholder's name, contact Unlimint manager for requirements. Mandatory only for money transfer operation.  # noqa: E501
│ │ +        For QIWI: Customer phone number (from 1 to 15 digits). For NETELLER: email address of Customer. For 'Latin America': Customer personal identification number: CPF or CNPJ for Brazil, DNI for Argentina and ID for other countries. For AIRTEL, MPESA, MTN, UGANDAMOBILE, VODAFONE and TIGO: phone number linked to Customer's mobile money account. For DIRECTBANKINGNGA: bank account number Mandatory for QIWI, NETELLER, 'Latin America', AIRTEL, MPESA, MTN, UGANDAMOBILE, VODAFONE, TIGO and DIRECTBANKINGNGA payment methods only.  # noqa: E501
│ │  
│ │ -        :param recipient_info: The recipient_info of this PaymentRequestCardAccount.  # noqa: E501
│ │ +        :param id: The id of this PaymentRequestEWalletAccount.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if recipient_info is not None and len(recipient_info) > 500:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `recipient_info`, length must be less than or equal to `500`"
│ │ -            )  # noqa: E501
│ │ -        if recipient_info is not None and len(recipient_info) < 0:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `recipient_info`, length must be greater than or equal to `0`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._recipient_info = recipient_info
│ │ +        self._id = id
│ │  
│ │      @property
│ │ -    def token(self):
│ │ -        """Gets the token of this PaymentRequestCardAccount.  # noqa: E501
│ │ +    def verification_code(self):
│ │ +        """Gets the verification_code of this PaymentRequestEWalletAccount.  # noqa: E501
│ │  
│ │ -        Card token value used instead of card information, except 'card.security_code' (it's mandatory). For payment: see PaymentRequestPaymentData for token generation. For recurring: this attribute is valid only for first recurring payment. It isn't valid for continue recurring payments (with filing id), see RecurringRequestRecurringData for token generation.  # noqa: E501
│ │ +        Provider security code. For NETELLER: member's 6 digits Secure Id or Google Authenticator OTP For VODAFONE: Customer voucher code (6 digits) For UBA bank in DIRECTBANKINGNGA: Customer BVN (bank verification number) number, 11 digits Mandatory for NETELLER, VODAFONE and DIRECTBANKINGNGA payment methods only.  # noqa: E501
│ │  
│ │ -        :return: The token of this PaymentRequestCardAccount.  # noqa: E501
│ │ +        :return: The verification_code of this PaymentRequestEWalletAccount.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._token
│ │ +        return self._verification_code
│ │  
│ │ -    @token.setter
│ │ -    def token(self, token):
│ │ -        """Sets the token of this PaymentRequestCardAccount.
│ │ +    @verification_code.setter
│ │ +    def verification_code(self, verification_code):
│ │ +        """Sets the verification_code of this PaymentRequestEWalletAccount.
│ │  
│ │ -        Card token value used instead of card information, except 'card.security_code' (it's mandatory). For payment: see PaymentRequestPaymentData for token generation. For recurring: this attribute is valid only for first recurring payment. It isn't valid for continue recurring payments (with filing id), see RecurringRequestRecurringData for token generation.  # noqa: E501
│ │ +        Provider security code. For NETELLER: member's 6 digits Secure Id or Google Authenticator OTP For VODAFONE: Customer voucher code (6 digits) For UBA bank in DIRECTBANKINGNGA: Customer BVN (bank verification number) number, 11 digits Mandatory for NETELLER, VODAFONE and DIRECTBANKINGNGA payment methods only.  # noqa: E501
│ │  
│ │ -        :param token: The token of this PaymentRequestCardAccount.  # noqa: E501
│ │ +        :param verification_code: The verification_code of this PaymentRequestEWalletAccount.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if token is not None and len(token) > 36:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `token`, length must be less than or equal to `36`"
│ │ -            )  # noqa: E501
│ │ -        if token is not None and len(token) < 0:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `token`, length must be greater than or equal to `0`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._token = token
│ │ +        self._verification_code = verification_code
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -236,15 +221,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(PaymentRequestCardAccount, dict):
│ │ +        if issubclass(PaymentRequestEWalletAccount, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -252,15 +237,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, PaymentRequestCardAccount):
│ │ +        if not isinstance(other, PaymentRequestEWalletAccount):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/payment_request_cryptocurrency_account.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_request_cryptocurrency_account.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payment_request_customer.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_request_customer.py
│ │┄ Files 0% similar despite different names
│ │ @@ -198,17 +198,17 @@
│ │          :param email: The email of this PaymentRequestCustomer.  # noqa: E501
│ │          :type: str
│ │          """
│ │          if email is not None and len(email) > 256:
│ │              raise ValueError(
│ │                  "Invalid value for `email`, length must be less than or equal to `256`"
│ │              )  # noqa: E501
│ │ -        if email is not None and len(email) < 3:
│ │ +        if email is not None and len(email) < 1:
│ │              raise ValueError(
│ │ -                "Invalid value for `email`, length must be greater than or equal to `3`"
│ │ +                "Invalid value for `email`, length must be greater than or equal to `1`"
│ │              )  # noqa: E501
│ │  
│ │          self._email = email
│ │  
│ │      @property
│ │      def first_name(self):
│ │          """Gets the first_name of this PaymentRequestCustomer.  # noqa: E501
│ │   --- cardpay-3.45.8/cardpay/model/payment_request_e_wallet_account.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payout_request_living_address.py
│ │┄ Files 23% similar despite different names
│ │ @@ -13,197 +13,220 @@
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │  
│ │ -class PaymentRequestEWalletAccount(object):
│ │ +class PayoutRequestLivingAddress(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │ -        "bank_code": "str",
│ │ -        "creation_date": "str",
│ │ -        "expiration_date": "str",
│ │ -        "id": "str",
│ │ -        "verification_code": "str",
│ │ +        "address": "str",
│ │ +        "city": "str",
│ │ +        "country": "str",
│ │ +        "state": "str",
│ │ +        "zip": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │ -        "bank_code": "bank_code",
│ │ -        "creation_date": "creation_date",
│ │ -        "expiration_date": "expiration_date",
│ │ -        "id": "id",
│ │ -        "verification_code": "verification_code",
│ │ +        "address": "address",
│ │ +        "city": "city",
│ │ +        "country": "country",
│ │ +        "state": "state",
│ │ +        "zip": "zip",
│ │      }
│ │  
│ │      def __init__(
│ │ -        self,
│ │ -        bank_code=None,
│ │ -        creation_date=None,
│ │ -        expiration_date=None,
│ │ -        id=None,
│ │ -        verification_code=None,
│ │ +        self, address=None, city=None, country=None, state=None, zip=None
│ │      ):  # noqa: E501
│ │ -        """PaymentRequestEWalletAccount - a model defined in Swagger"""  # noqa: E501
│ │ +        """PayoutRequestLivingAddress - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._bank_code = None
│ │ -        self._creation_date = None
│ │ -        self._expiration_date = None
│ │ -        self._id = None
│ │ -        self._verification_code = None
│ │ +        self._address = None
│ │ +        self._city = None
│ │ +        self._country = None
│ │ +        self._state = None
│ │ +        self._zip = None
│ │          self.discriminator = None
│ │  
│ │ -        if bank_code is not None:
│ │ -            self.bank_code = bank_code
│ │ -        if creation_date is not None:
│ │ -            self.creation_date = creation_date
│ │ -        if expiration_date is not None:
│ │ -            self.expiration_date = expiration_date
│ │ -        if id is not None:
│ │ -            self.id = id
│ │ -        if verification_code is not None:
│ │ -            self.verification_code = verification_code
│ │ +        if address is not None:
│ │ +            self.address = address
│ │ +        if city is not None:
│ │ +            self.city = city
│ │ +        if country is not None:
│ │ +            self.country = country
│ │ +        if state is not None:
│ │ +            self.state = state
│ │ +        if zip is not None:
│ │ +            self.zip = zip
│ │  
│ │      @property
│ │ -    def bank_code(self):
│ │ -        """Gets the bank_code of this PaymentRequestEWalletAccount.  # noqa: E501
│ │ +    def address(self):
│ │ +        """Gets the address of this PayoutRequestLivingAddress.  # noqa: E501
│ │  
│ │ -        Card issuer's code. For DIRECTBANKINGNGA: Customer bank code (3 digits). Mandatory for DIRECTBANKINGNGA payment method only.  # noqa: E501
│ │ +        Customer address *(mandatory for 'Latin America' methods only)* For 'Latin America' is required for methods where country = CO  # noqa: E501
│ │  
│ │ -        :return: The bank_code of this PaymentRequestEWalletAccount.  # noqa: E501
│ │ +        :return: The address of this PayoutRequestLivingAddress.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._bank_code
│ │ +        return self._address
│ │  
│ │ -    @bank_code.setter
│ │ -    def bank_code(self, bank_code):
│ │ -        """Sets the bank_code of this PaymentRequestEWalletAccount.
│ │ +    @address.setter
│ │ +    def address(self, address):
│ │ +        """Sets the address of this PayoutRequestLivingAddress.
│ │  
│ │ -        Card issuer's code. For DIRECTBANKINGNGA: Customer bank code (3 digits). Mandatory for DIRECTBANKINGNGA payment method only.  # noqa: E501
│ │ +        Customer address *(mandatory for 'Latin America' methods only)* For 'Latin America' is required for methods where country = CO  # noqa: E501
│ │  
│ │ -        :param bank_code: The bank_code of this PaymentRequestEWalletAccount.  # noqa: E501
│ │ +        :param address: The address of this PayoutRequestLivingAddress.  # noqa: E501
│ │          :type: str
│ │          """
│ │ +        if address is not None and len(address) > 100:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `address`, length must be less than or equal to `100`"
│ │ +            )  # noqa: E501
│ │ +        if address is not None and len(address) < 0:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `address`, length must be greater than or equal to `0`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._bank_code = bank_code
│ │ +        self._address = address
│ │  
│ │      @property
│ │ -    def creation_date(self):
│ │ -        """Gets the creation_date of this PaymentRequestEWalletAccount.  # noqa: E501
│ │ +    def city(self):
│ │ +        """Gets the city of this PayoutRequestLivingAddress.  # noqa: E501
│ │  
│ │ -        Card creation date  # noqa: E501
│ │ +        Customer city.  # noqa: E501
│ │  
│ │ -        :return: The creation_date of this PaymentRequestEWalletAccount.  # noqa: E501
│ │ +        :return: The city of this PayoutRequestLivingAddress.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._creation_date
│ │ +        return self._city
│ │  
│ │ -    @creation_date.setter
│ │ -    def creation_date(self, creation_date):
│ │ -        """Sets the creation_date of this PaymentRequestEWalletAccount.
│ │ +    @city.setter
│ │ +    def city(self, city):
│ │ +        """Sets the city of this PayoutRequestLivingAddress.
│ │  
│ │ -        Card creation date  # noqa: E501
│ │ +        Customer city.  # noqa: E501
│ │  
│ │ -        :param creation_date: The creation_date of this PaymentRequestEWalletAccount.  # noqa: E501
│ │ +        :param city: The city of this PayoutRequestLivingAddress.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if creation_date is not None and not re.search(
│ │ -            r"^[\\d{2,4}|\/?|\\.?]{2,10}$", creation_date
│ │ -        ):  # noqa: E501
│ │ +        if city is not None and len(city) > 20:
│ │              raise ValueError(
│ │ -                r"Invalid value for `creation_date`, must be a follow pattern or equal to `/^[\\d{2,4}|\/?|\\.?]{2,10}$/`"
│ │ +                "Invalid value for `city`, length must be less than or equal to `20`"
│ │ +            )  # noqa: E501
│ │ +        if city is not None and len(city) < 0:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `city`, length must be greater than or equal to `0`"
│ │              )  # noqa: E501
│ │  
│ │ -        self._creation_date = creation_date
│ │ +        self._city = city
│ │  
│ │      @property
│ │ -    def expiration_date(self):
│ │ -        """Gets the expiration_date of this PaymentRequestEWalletAccount.  # noqa: E501
│ │ +    def country(self):
│ │ +        """Gets the country of this PayoutRequestLivingAddress.  # noqa: E501
│ │  
│ │ -        Account expiration date  # noqa: E501
│ │ +        ISO 3166-1 code of country: 2 or 3 latin letters or numeric code.  # noqa: E501
│ │  
│ │ -        :return: The expiration_date of this PaymentRequestEWalletAccount.  # noqa: E501
│ │ +        :return: The country of this PayoutRequestLivingAddress.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._expiration_date
│ │ +        return self._country
│ │  
│ │ -    @expiration_date.setter
│ │ -    def expiration_date(self, expiration_date):
│ │ -        """Sets the expiration_date of this PaymentRequestEWalletAccount.
│ │ +    @country.setter
│ │ +    def country(self, country):
│ │ +        """Sets the country of this PayoutRequestLivingAddress.
│ │  
│ │ -        Account expiration date  # noqa: E501
│ │ +        ISO 3166-1 code of country: 2 or 3 latin letters or numeric code.  # noqa: E501
│ │  
│ │ -        :param expiration_date: The expiration_date of this PaymentRequestEWalletAccount.  # noqa: E501
│ │ +        :param country: The country of this PayoutRequestLivingAddress.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if expiration_date is not None and not re.search(
│ │ -            r"^[\\d{2,4}|\/?|\\.?]{2,10}$", expiration_date
│ │ -        ):  # noqa: E501
│ │ +        if country is not None and len(country) > 3:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `country`, length must be less than or equal to `3`"
│ │ +            )  # noqa: E501
│ │ +        if country is not None and len(country) < 2:
│ │              raise ValueError(
│ │ -                r"Invalid value for `expiration_date`, must be a follow pattern or equal to `/^[\\d{2,4}|\/?|\\.?]{2,10}$/`"
│ │ +                "Invalid value for `country`, length must be greater than or equal to `2`"
│ │              )  # noqa: E501
│ │  
│ │ -        self._expiration_date = expiration_date
│ │ +        self._country = country
│ │  
│ │      @property
│ │ -    def id(self):
│ │ -        """Gets the id of this PaymentRequestEWalletAccount.  # noqa: E501
│ │ +    def state(self):
│ │ +        """Gets the state of this PayoutRequestLivingAddress.  # noqa: E501
│ │  
│ │ -        For QIWI: Customer phone number (from 1 to 15 digits). For NETELLER: email address of Customer. For 'Latin America': Customer personal identification number: CPF or CNPJ for Brazil, DNI for Argentina and ID for other countries. For AIRTEL, MPESA, MTN, UGANDAMOBILE, VODAFONE and TIGO: phone number linked to Customer's mobile money account. For DIRECTBANKINGNGA: bank account number Mandatory for QIWI, NETELLER, 'Latin America', AIRTEL, MPESA, MTN, UGANDAMOBILE, VODAFONE, TIGO and DIRECTBANKINGNGA payment methods only.  # noqa: E501
│ │ +        Living state or province.  # noqa: E501
│ │  
│ │ -        :return: The id of this PaymentRequestEWalletAccount.  # noqa: E501
│ │ +        :return: The state of this PayoutRequestLivingAddress.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._id
│ │ +        return self._state
│ │  
│ │ -    @id.setter
│ │ -    def id(self, id):
│ │ -        """Sets the id of this PaymentRequestEWalletAccount.
│ │ +    @state.setter
│ │ +    def state(self, state):
│ │ +        """Sets the state of this PayoutRequestLivingAddress.
│ │  
│ │ -        For QIWI: Customer phone number (from 1 to 15 digits). For NETELLER: email address of Customer. For 'Latin America': Customer personal identification number: CPF or CNPJ for Brazil, DNI for Argentina and ID for other countries. For AIRTEL, MPESA, MTN, UGANDAMOBILE, VODAFONE and TIGO: phone number linked to Customer's mobile money account. For DIRECTBANKINGNGA: bank account number Mandatory for QIWI, NETELLER, 'Latin America', AIRTEL, MPESA, MTN, UGANDAMOBILE, VODAFONE, TIGO and DIRECTBANKINGNGA payment methods only.  # noqa: E501
│ │ +        Living state or province.  # noqa: E501
│ │  
│ │ -        :param id: The id of this PaymentRequestEWalletAccount.  # noqa: E501
│ │ +        :param state: The state of this PayoutRequestLivingAddress.  # noqa: E501
│ │          :type: str
│ │          """
│ │ +        if state is not None and len(state) > 20:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `state`, length must be less than or equal to `20`"
│ │ +            )  # noqa: E501
│ │ +        if state is not None and len(state) < 0:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `state`, length must be greater than or equal to `0`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._id = id
│ │ +        self._state = state
│ │  
│ │      @property
│ │ -    def verification_code(self):
│ │ -        """Gets the verification_code of this PaymentRequestEWalletAccount.  # noqa: E501
│ │ +    def zip(self):
│ │ +        """Gets the zip of this PayoutRequestLivingAddress.  # noqa: E501
│ │  
│ │ -        Provider security code. For NETELLER: member's 6 digits Secure Id or Google Authenticator OTP For VODAFONE: Customer voucher code (6 digits) For UBA bank in DIRECTBANKINGNGA: Customer BVN (bank verification number) number, 11 digits Mandatory for NETELLER, VODAFONE and DIRECTBANKINGNGA payment methods only.  # noqa: E501
│ │ +        Customer postal code  # noqa: E501
│ │  
│ │ -        :return: The verification_code of this PaymentRequestEWalletAccount.  # noqa: E501
│ │ +        :return: The zip of this PayoutRequestLivingAddress.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._verification_code
│ │ +        return self._zip
│ │  
│ │ -    @verification_code.setter
│ │ -    def verification_code(self, verification_code):
│ │ -        """Sets the verification_code of this PaymentRequestEWalletAccount.
│ │ +    @zip.setter
│ │ +    def zip(self, zip):
│ │ +        """Sets the zip of this PayoutRequestLivingAddress.
│ │  
│ │ -        Provider security code. For NETELLER: member's 6 digits Secure Id or Google Authenticator OTP For VODAFONE: Customer voucher code (6 digits) For UBA bank in DIRECTBANKINGNGA: Customer BVN (bank verification number) number, 11 digits Mandatory for NETELLER, VODAFONE and DIRECTBANKINGNGA payment methods only.  # noqa: E501
│ │ +        Customer postal code  # noqa: E501
│ │  
│ │ -        :param verification_code: The verification_code of this PaymentRequestEWalletAccount.  # noqa: E501
│ │ +        :param zip: The zip of this PayoutRequestLivingAddress.  # noqa: E501
│ │          :type: str
│ │          """
│ │ +        if zip is not None and len(zip) > 17:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `zip`, length must be less than or equal to `17`"
│ │ +            )  # noqa: E501
│ │ +        if zip is not None and len(zip) < 0:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `zip`, length must be greater than or equal to `0`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._verification_code = verification_code
│ │ +        self._zip = zip
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -221,15 +244,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(PaymentRequestEWalletAccount, dict):
│ │ +        if issubclass(PayoutRequestLivingAddress, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -237,15 +260,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, PaymentRequestEWalletAccount):
│ │ +        if not isinstance(other, PayoutRequestLivingAddress):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/payment_request_living_address.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_request_living_address.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payment_request_merchant_order.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_request_merchant_order.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payment_request_payment_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/recurring_response_recurring_data.py
│ │┄ Files 23% similar despite different names
│ │ @@ -12,491 +12,740 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ +from cardpay.model.recurring_response_filing import (
│ │ +    RecurringResponseFiling,
│ │ +)  # noqa: F401,E501
│ │ +from cardpay.model.subscription import Subscription  # noqa: F401,E501
│ │  
│ │ -class PaymentRequestPaymentData(object):
│ │ +
│ │ +class RecurringResponseRecurringData(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │          "amount": "float",
│ │ -        "authentication_request": "bool",
│ │ +        "arn": "str",
│ │ +        "auth_code": "str",
│ │ +        "created": "str",
│ │          "currency": "str",
│ │ -        "dynamic_descriptor": "str",
│ │ -        "encrypted_data": "str",
│ │ -        "generate_token": "bool",
│ │ +        "decline_code": "str",
│ │ +        "decline_reason": "str",
│ │ +        "filing": "RecurringResponseFiling",
│ │ +        "id": "str",
│ │ +        "initiator": "str",
│ │          "installment_amount": "float",
│ │          "installment_type": "str",
│ │ -        "installments": "str",
│ │ +        "invalid_data": "list[str]",
│ │ +        "is_3d": "bool",
│ │          "note": "str",
│ │ -        "preauth": "bool",
│ │ -        "sca_exemption": "str",
│ │ -        "three_ds_challenge_indicator": "str",
│ │ +        "payments": "str",
│ │ +        "rrn": "str",
│ │ +        "scheduled_type": "str",
│ │ +        "status": "str",
│ │ +        "subscription": "Subscription",
│ │ +        "type": "str",
│ │          "trans_type": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │          "amount": "amount",
│ │ -        "authentication_request": "authentication_request",
│ │ +        "arn": "arn",
│ │ +        "auth_code": "auth_code",
│ │ +        "created": "created",
│ │          "currency": "currency",
│ │ -        "dynamic_descriptor": "dynamic_descriptor",
│ │ -        "encrypted_data": "encrypted_data",
│ │ -        "generate_token": "generate_token",
│ │ +        "decline_code": "decline_code",
│ │ +        "decline_reason": "decline_reason",
│ │ +        "filing": "filing",
│ │ +        "id": "id",
│ │ +        "initiator": "initiator",
│ │          "installment_amount": "installment_amount",
│ │          "installment_type": "installment_type",
│ │ -        "installments": "installments",
│ │ +        "invalid_data": "invalid_data",
│ │ +        "is_3d": "is_3d",
│ │          "note": "note",
│ │ -        "preauth": "preauth",
│ │ -        "sca_exemption": "sca_exemption",
│ │ -        "three_ds_challenge_indicator": "three_ds_challenge_indicator",
│ │ +        "payments": "payments",
│ │ +        "rrn": "rrn",
│ │ +        "scheduled_type": "scheduled_type",
│ │ +        "status": "status",
│ │ +        "subscription": "subscription",
│ │ +        "type": "type",
│ │          "trans_type": "trans_type",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │          amount=None,
│ │ -        authentication_request=None,
│ │ +        arn=None,
│ │ +        auth_code=None,
│ │ +        created=None,
│ │          currency=None,
│ │ -        dynamic_descriptor=None,
│ │ -        encrypted_data=None,
│ │ -        generate_token=None,
│ │ +        decline_code=None,
│ │ +        decline_reason=None,
│ │ +        filing=None,
│ │ +        id=None,
│ │ +        initiator=None,
│ │          installment_amount=None,
│ │          installment_type=None,
│ │ -        installments=None,
│ │ +        invalid_data=None,
│ │ +        is_3d=None,
│ │          note=None,
│ │ -        preauth=None,
│ │ -        sca_exemption=None,
│ │ -        three_ds_challenge_indicator=None,
│ │ +        payments=None,
│ │ +        rrn=None,
│ │ +        scheduled_type=None,
│ │ +        status=None,
│ │ +        subscription=None,
│ │ +        type=None,
│ │          trans_type=None,
│ │      ):  # noqa: E501
│ │ -        """PaymentRequestPaymentData - a model defined in Swagger"""  # noqa: E501
│ │ +        """RecurringResponseRecurringData - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._amount = None
│ │ -        self._authentication_request = None
│ │ +        self._arn = None
│ │ +        self._auth_code = None
│ │ +        self._created = None
│ │          self._currency = None
│ │ -        self._dynamic_descriptor = None
│ │ -        self._encrypted_data = None
│ │ -        self._generate_token = None
│ │ +        self._decline_code = None
│ │ +        self._decline_reason = None
│ │ +        self._filing = None
│ │ +        self._id = None
│ │ +        self._initiator = None
│ │          self._installment_amount = None
│ │          self._installment_type = None
│ │ -        self._installments = None
│ │ +        self._invalid_data = None
│ │ +        self._is_3d = None
│ │          self._note = None
│ │ -        self._preauth = None
│ │ -        self._sca_exemption = None
│ │ -        self._three_ds_challenge_indicator = None
│ │ +        self._payments = None
│ │ +        self._rrn = None
│ │ +        self._scheduled_type = None
│ │ +        self._status = None
│ │ +        self._subscription = None
│ │ +        self._type = None
│ │          self._trans_type = None
│ │          self.discriminator = None
│ │  
│ │          if amount is not None:
│ │              self.amount = amount
│ │ -        if authentication_request is not None:
│ │ -            self.authentication_request = authentication_request
│ │ -        self.currency = currency
│ │ -        if dynamic_descriptor is not None:
│ │ -            self.dynamic_descriptor = dynamic_descriptor
│ │ -        if encrypted_data is not None:
│ │ -            self.encrypted_data = encrypted_data
│ │ -        if generate_token is not None:
│ │ -            self.generate_token = generate_token
│ │ +        if arn is not None:
│ │ +            self.arn = arn
│ │ +        if auth_code is not None:
│ │ +            self.auth_code = auth_code
│ │ +        if created is not None:
│ │ +            self.created = created
│ │ +        if currency is not None:
│ │ +            self.currency = currency
│ │ +        if decline_code is not None:
│ │ +            self.decline_code = decline_code
│ │ +        if decline_reason is not None:
│ │ +            self.decline_reason = decline_reason
│ │ +        if filing is not None:
│ │ +            self.filing = filing
│ │ +        if id is not None:
│ │ +            self.id = id
│ │ +        if initiator is not None:
│ │ +            self.initiator = initiator
│ │          if installment_amount is not None:
│ │              self.installment_amount = installment_amount
│ │          if installment_type is not None:
│ │              self.installment_type = installment_type
│ │ -        if installments is not None:
│ │ -            self.installments = installments
│ │ +        if invalid_data is not None:
│ │ +            self.invalid_data = invalid_data
│ │ +        if is_3d is not None:
│ │ +            self.is_3d = is_3d
│ │          if note is not None:
│ │              self.note = note
│ │ -        if preauth is not None:
│ │ -            self.preauth = preauth
│ │ -        if sca_exemption is not None:
│ │ -            self.sca_exemption = sca_exemption
│ │ -        if three_ds_challenge_indicator is not None:
│ │ -            self.three_ds_challenge_indicator = three_ds_challenge_indicator
│ │ +        if payments is not None:
│ │ +            self.payments = payments
│ │ +        if rrn is not None:
│ │ +            self.rrn = rrn
│ │ +        if scheduled_type is not None:
│ │ +            self.scheduled_type = scheduled_type
│ │ +        if status is not None:
│ │ +            self.status = status
│ │ +        if subscription is not None:
│ │ +            self.subscription = subscription
│ │ +        if type is not None:
│ │ +            self.type = type
│ │          if trans_type is not None:
│ │              self.trans_type = trans_type
│ │  
│ │      @property
│ │      def amount(self):
│ │ -        """Gets the amount of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        """Gets the amount of this RecurringResponseRecurringData.  # noqa: E501
│ │  
│ │ -        The total transaction amount in selected currency with dot as a decimal separator, must be less than 10 billion If 'payment_method' = `BITCOIN` then minimum order amount is approximately 0.003 bitcoins or its equivalent. The exact value should be provided by the account manager.  # noqa: E501
│ │ +        Recurring amount  # noqa: E501
│ │  
│ │ -        :return: The amount of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :return: The amount of this RecurringResponseRecurringData.  # noqa: E501
│ │          :rtype: float
│ │          """
│ │          return self._amount
│ │  
│ │      @amount.setter
│ │      def amount(self, amount):
│ │ -        """Sets the amount of this PaymentRequestPaymentData.
│ │ +        """Sets the amount of this RecurringResponseRecurringData.
│ │  
│ │ -        The total transaction amount in selected currency with dot as a decimal separator, must be less than 10 billion If 'payment_method' = `BITCOIN` then minimum order amount is approximately 0.003 bitcoins or its equivalent. The exact value should be provided by the account manager.  # noqa: E501
│ │ +        Recurring amount  # noqa: E501
│ │  
│ │ -        :param amount: The amount of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :param amount: The amount of this RecurringResponseRecurringData.  # noqa: E501
│ │          :type: float
│ │          """
│ │  
│ │          self._amount = amount
│ │  
│ │      @property
│ │ -    def authentication_request(self):
│ │ -        """Gets the authentication_request of this PaymentRequestPaymentData.  # noqa: E501
│ │ +    def arn(self):
│ │ +        """Gets the arn of this RecurringResponseRecurringData.  # noqa: E501
│ │  
│ │ -        If set to `true`, amount must not be presented in request, no payment will be made, only cardholder authentication will be performed. Also can be used to generate token. *(for BANKCARD payment method only)*  # noqa: E501
│ │ +        ARN (Acquirer Reference Number), supplied by the acquiring financial institution, return only after receiving ARN from bank acquirer *(for BANKCARD payment method only)*  # noqa: E501
│ │  
│ │ -        :return: The authentication_request of this PaymentRequestPaymentData.  # noqa: E501
│ │ -        :rtype: bool
│ │ +        :return: The arn of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :rtype: str
│ │          """
│ │ -        return self._authentication_request
│ │ +        return self._arn
│ │  
│ │ -    @authentication_request.setter
│ │ -    def authentication_request(self, authentication_request):
│ │ -        """Sets the authentication_request of this PaymentRequestPaymentData.
│ │ +    @arn.setter
│ │ +    def arn(self, arn):
│ │ +        """Sets the arn of this RecurringResponseRecurringData.
│ │  
│ │ -        If set to `true`, amount must not be presented in request, no payment will be made, only cardholder authentication will be performed. Also can be used to generate token. *(for BANKCARD payment method only)*  # noqa: E501
│ │ +        ARN (Acquirer Reference Number), supplied by the acquiring financial institution, return only after receiving ARN from bank acquirer *(for BANKCARD payment method only)*  # noqa: E501
│ │  
│ │ -        :param authentication_request: The authentication_request of this PaymentRequestPaymentData.  # noqa: E501
│ │ -        :type: bool
│ │ +        :param arn: The arn of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :type: str
│ │ +        """
│ │ +
│ │ +        self._arn = arn
│ │ +
│ │ +    @property
│ │ +    def auth_code(self):
│ │ +        """Gets the auth_code of this RecurringResponseRecurringData.  # noqa: E501
│ │ +
│ │ +        Authorization code, provided by bank  # noqa: E501
│ │ +
│ │ +        :return: The auth_code of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :rtype: str
│ │ +        """
│ │ +        return self._auth_code
│ │ +
│ │ +    @auth_code.setter
│ │ +    def auth_code(self, auth_code):
│ │ +        """Sets the auth_code of this RecurringResponseRecurringData.
│ │ +
│ │ +        Authorization code, provided by bank  # noqa: E501
│ │ +
│ │ +        :param auth_code: The auth_code of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :type: str
│ │ +        """
│ │ +
│ │ +        self._auth_code = auth_code
│ │ +
│ │ +    @property
│ │ +    def created(self):
│ │ +        """Gets the created of this RecurringResponseRecurringData.  # noqa: E501
│ │ +
│ │ +        Date and time when this recurring payment was created, [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format  # noqa: E501
│ │ +
│ │ +        :return: The created of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :rtype: str
│ │          """
│ │ +        return self._created
│ │  
│ │ -        self._authentication_request = authentication_request
│ │ +    @created.setter
│ │ +    def created(self, created):
│ │ +        """Sets the created of this RecurringResponseRecurringData.
│ │ +
│ │ +        Date and time when this recurring payment was created, [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format  # noqa: E501
│ │ +
│ │ +        :param created: The created of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :type: str
│ │ +        """
│ │ +
│ │ +        self._created = created
│ │  
│ │      @property
│ │      def currency(self):
│ │ -        """Gets the currency of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        """Gets the currency of this RecurringResponseRecurringData.  # noqa: E501
│ │  
│ │ -        [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code  # noqa: E501
│ │ +        Recurring currency code ([ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code)  # noqa: E501
│ │  
│ │ -        :return: The currency of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :return: The currency of this RecurringResponseRecurringData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._currency
│ │  
│ │      @currency.setter
│ │      def currency(self, currency):
│ │ -        """Sets the currency of this PaymentRequestPaymentData.
│ │ +        """Sets the currency of this RecurringResponseRecurringData.
│ │  
│ │ -        [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code  # noqa: E501
│ │ +        Recurring currency code ([ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code)  # noqa: E501
│ │  
│ │ -        :param currency: The currency of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :param currency: The currency of this RecurringResponseRecurringData.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if currency is None:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `currency`, must not be `None`"
│ │ -            )  # noqa: E501
│ │  
│ │          self._currency = currency
│ │  
│ │      @property
│ │ -    def dynamic_descriptor(self):
│ │ -        """Gets the dynamic_descriptor of this PaymentRequestPaymentData.  # noqa: E501
│ │ +    def decline_code(self):
│ │ +        """Gets the decline_code of this RecurringResponseRecurringData.  # noqa: E501
│ │  
│ │ -        Short description of the service or product, must be enabled by CardPay manager to be used *(for BANKCARD payment method only)*  # noqa: E501
│ │ +        Decline code (only in decline case)  # noqa: E501
│ │  
│ │ -        :return: The dynamic_descriptor of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :return: The decline_code of this RecurringResponseRecurringData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._dynamic_descriptor
│ │ +        return self._decline_code
│ │  
│ │ -    @dynamic_descriptor.setter
│ │ -    def dynamic_descriptor(self, dynamic_descriptor):
│ │ -        """Sets the dynamic_descriptor of this PaymentRequestPaymentData.
│ │ +    @decline_code.setter
│ │ +    def decline_code(self, decline_code):
│ │ +        """Sets the decline_code of this RecurringResponseRecurringData.
│ │  
│ │ -        Short description of the service or product, must be enabled by CardPay manager to be used *(for BANKCARD payment method only)*  # noqa: E501
│ │ +        Decline code (only in decline case)  # noqa: E501
│ │  
│ │ -        :param dynamic_descriptor: The dynamic_descriptor of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :param decline_code: The decline_code of this RecurringResponseRecurringData.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if dynamic_descriptor is not None and len(dynamic_descriptor) > 25:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `dynamic_descriptor`, length must be less than or equal to `25`"
│ │ -            )  # noqa: E501
│ │ -        if dynamic_descriptor is not None and len(dynamic_descriptor) < 0:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `dynamic_descriptor`, length must be greater than or equal to `0`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._dynamic_descriptor = dynamic_descriptor
│ │ +        self._decline_code = decline_code
│ │  
│ │      @property
│ │ -    def encrypted_data(self):
│ │ -        """Gets the encrypted_data of this PaymentRequestPaymentData.  # noqa: E501
│ │ +    def decline_reason(self):
│ │ +        """Gets the decline_reason of this RecurringResponseRecurringData.  # noqa: E501
│ │  
│ │ -        The encrypted payment credentials encoded in base64. *(for APPLEPAY payment method only)*  # noqa: E501
│ │ +        Bank's message about transaction decline reason (only in decline case)  # noqa: E501
│ │  
│ │ -        :return: The encrypted_data of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :return: The decline_reason of this RecurringResponseRecurringData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._encrypted_data
│ │ +        return self._decline_reason
│ │  
│ │ -    @encrypted_data.setter
│ │ -    def encrypted_data(self, encrypted_data):
│ │ -        """Sets the encrypted_data of this PaymentRequestPaymentData.
│ │ +    @decline_reason.setter
│ │ +    def decline_reason(self, decline_reason):
│ │ +        """Sets the decline_reason of this RecurringResponseRecurringData.
│ │  
│ │ -        The encrypted payment credentials encoded in base64. *(for APPLEPAY payment method only)*  # noqa: E501
│ │ +        Bank's message about transaction decline reason (only in decline case)  # noqa: E501
│ │  
│ │ -        :param encrypted_data: The encrypted_data of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :param decline_reason: The decline_reason of this RecurringResponseRecurringData.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if encrypted_data is not None and len(encrypted_data) > 10000:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `encrypted_data`, length must be less than or equal to `10000`"
│ │ -            )  # noqa: E501
│ │ -        if encrypted_data is not None and len(encrypted_data) < 0:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `encrypted_data`, length must be greater than or equal to `0`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._encrypted_data = encrypted_data
│ │ +        self._decline_reason = decline_reason
│ │  
│ │      @property
│ │ -    def generate_token(self):
│ │ -        """Gets the generate_token of this PaymentRequestPaymentData.  # noqa: E501
│ │ +    def filing(self):
│ │ +        """Gets the filing of this RecurringResponseRecurringData.  # noqa: E501
│ │  
│ │ -        If set to `true`, token will be generated and returned in the response. Token can be generated only for successful transactions (not for declined transactions) *(for BANKCARD payment method only)*  # noqa: E501
│ │ +        CardPay's filing data  # noqa: E501
│ │  
│ │ -        :return: The generate_token of this PaymentRequestPaymentData.  # noqa: E501
│ │ -        :rtype: bool
│ │ +        :return: The filing of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :rtype: RecurringResponseFiling
│ │          """
│ │ -        return self._generate_token
│ │ +        return self._filing
│ │  
│ │ -    @generate_token.setter
│ │ -    def generate_token(self, generate_token):
│ │ -        """Sets the generate_token of this PaymentRequestPaymentData.
│ │ +    @filing.setter
│ │ +    def filing(self, filing):
│ │ +        """Sets the filing of this RecurringResponseRecurringData.
│ │  
│ │ -        If set to `true`, token will be generated and returned in the response. Token can be generated only for successful transactions (not for declined transactions) *(for BANKCARD payment method only)*  # noqa: E501
│ │ +        CardPay's filing data  # noqa: E501
│ │  
│ │ -        :param generate_token: The generate_token of this PaymentRequestPaymentData.  # noqa: E501
│ │ -        :type: bool
│ │ +        :param filing: The filing of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :type: RecurringResponseFiling
│ │ +        """
│ │ +
│ │ +        self._filing = filing
│ │ +
│ │ +    @property
│ │ +    def id(self):
│ │ +        """Gets the id of this RecurringResponseRecurringData.  # noqa: E501
│ │ +
│ │ +        CardPay's recurring id  # noqa: E501
│ │ +
│ │ +        :return: The id of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :rtype: str
│ │ +        """
│ │ +        return self._id
│ │ +
│ │ +    @id.setter
│ │ +    def id(self, id):
│ │ +        """Sets the id of this RecurringResponseRecurringData.
│ │ +
│ │ +        CardPay's recurring id  # noqa: E501
│ │ +
│ │ +        :param id: The id of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :type: str
│ │          """
│ │  
│ │ -        self._generate_token = generate_token
│ │ +        self._id = id
│ │ +
│ │ +    @property
│ │ +    def initiator(self):
│ │ +        """Gets the initiator of this RecurringResponseRecurringData.  # noqa: E501
│ │ +
│ │ +        Initiator of scheduled transaction (applicable only for scheduled by merchant payments)  # noqa: E501
│ │ +
│ │ +        :return: The initiator of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :rtype: str
│ │ +        """
│ │ +        return self._initiator
│ │ +
│ │ +    @initiator.setter
│ │ +    def initiator(self, initiator):
│ │ +        """Sets the initiator of this RecurringResponseRecurringData.
│ │ +
│ │ +        Initiator of scheduled transaction (applicable only for scheduled by merchant payments)  # noqa: E501
│ │ +
│ │ +        :param initiator: The initiator of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :type: str
│ │ +        """
│ │ +
│ │ +        self._initiator = initiator
│ │  
│ │      @property
│ │      def installment_amount(self):
│ │ -        """Gets the installment_amount of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        """Gets the installment_amount of this RecurringResponseRecurringData.  # noqa: E501
│ │  
│ │ -        Amount of 1 installment payment, should be less or equal to total amount of subscription, can have dot as a decimal separator. Mandatory for Payment Page Mode only.  # noqa: E501
│ │ +        Amount of 1 installment payment, will be returned if presented in request (for payment page mode only)  # noqa: E501
│ │  
│ │ -        :return: The installment_amount of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :return: The installment_amount of this RecurringResponseRecurringData.  # noqa: E501
│ │          :rtype: float
│ │          """
│ │          return self._installment_amount
│ │  
│ │      @installment_amount.setter
│ │      def installment_amount(self, installment_amount):
│ │ -        """Sets the installment_amount of this PaymentRequestPaymentData.
│ │ +        """Sets the installment_amount of this RecurringResponseRecurringData.
│ │  
│ │ -        Amount of 1 installment payment, should be less or equal to total amount of subscription, can have dot as a decimal separator. Mandatory for Payment Page Mode only.  # noqa: E501
│ │ +        Amount of 1 installment payment, will be returned if presented in request (for payment page mode only)  # noqa: E501
│ │  
│ │ -        :param installment_amount: The installment_amount of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :param installment_amount: The installment_amount of this RecurringResponseRecurringData.  # noqa: E501
│ │          :type: float
│ │          """
│ │  
│ │          self._installment_amount = installment_amount
│ │  
│ │      @property
│ │      def installment_type(self):
│ │ -        """Gets the installment_type of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        """Gets the installment_type of this RecurringResponseRecurringData.  # noqa: E501
│ │  
│ │ -        Installment type, 2 possible values: `IF` - issuer financed `MF_HOLD' - merchant financed. For installment subscription with hold rest amount.  # noqa: E501
│ │ +        Selected installment type  # noqa: E501
│ │  
│ │ -        :return: The installment_type of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :return: The installment_type of this RecurringResponseRecurringData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._installment_type
│ │  
│ │      @installment_type.setter
│ │      def installment_type(self, installment_type):
│ │ -        """Sets the installment_type of this PaymentRequestPaymentData.
│ │ +        """Sets the installment_type of this RecurringResponseRecurringData.
│ │  
│ │ -        Installment type, 2 possible values: `IF` - issuer financed `MF_HOLD' - merchant financed. For installment subscription with hold rest amount.  # noqa: E501
│ │ +        Selected installment type  # noqa: E501
│ │  
│ │ -        :param installment_type: The installment_type of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :param installment_type: The installment_type of this RecurringResponseRecurringData.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if installment_type is not None and not re.search(
│ │ -            r"IF|MF_HOLD", installment_type
│ │ -        ):  # noqa: E501
│ │ -            raise ValueError(
│ │ -                r"Invalid value for `installment_type`, must be a follow pattern or equal to `/IF|MF_HOLD/`"
│ │ -            )  # noqa: E501
│ │  
│ │          self._installment_type = installment_type
│ │  
│ │      @property
│ │ -    def installments(self):
│ │ -        """Gets the installments of this PaymentRequestPaymentData.  # noqa: E501
│ │ +    def invalid_data(self):
│ │ +        """Gets the invalid_data of this RecurringResponseRecurringData.  # noqa: E501
│ │  
│ │ -        Number of total installment payments, to be charged per defined interval. For installment subscription with installment_type = `MF_HOLD` can be 1-12. For installment subscription with installment_type = `IF` can be 1-99.  # noqa: E501
│ │ +        Invalid card or billing data  # noqa: E501
│ │  
│ │ -        :return: The installments of this PaymentRequestPaymentData.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The invalid_data of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :rtype: list[str]
│ │          """
│ │ -        return self._installments
│ │ +        return self._invalid_data
│ │  
│ │ -    @installments.setter
│ │ -    def installments(self, installments):
│ │ -        """Sets the installments of this PaymentRequestPaymentData.
│ │ +    @invalid_data.setter
│ │ +    def invalid_data(self, invalid_data):
│ │ +        """Sets the invalid_data of this RecurringResponseRecurringData.
│ │  
│ │ -        Number of total installment payments, to be charged per defined interval. For installment subscription with installment_type = `MF_HOLD` can be 1-12. For installment subscription with installment_type = `IF` can be 1-99.  # noqa: E501
│ │ +        Invalid card or billing data  # noqa: E501
│ │  
│ │ -        :param installments: The installments of this PaymentRequestPaymentData.  # noqa: E501
│ │ -        :type: str
│ │ +        :param invalid_data: The invalid_data of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :type: list[str]
│ │          """
│ │  
│ │ -        self._installments = installments
│ │ +        self._invalid_data = invalid_data
│ │ +
│ │ +    @property
│ │ +    def is_3d(self):
│ │ +        """Gets the is_3d of this RecurringResponseRecurringData.  # noqa: E501
│ │ +
│ │ +        Was 3-D Secure authentication made or not  # noqa: E501
│ │ +
│ │ +        :return: The is_3d of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :rtype: bool
│ │ +        """
│ │ +        return self._is_3d
│ │ +
│ │ +    @is_3d.setter
│ │ +    def is_3d(self, is_3d):
│ │ +        """Sets the is_3d of this RecurringResponseRecurringData.
│ │ +
│ │ +        Was 3-D Secure authentication made or not  # noqa: E501
│ │ +
│ │ +        :param is_3d: The is_3d of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :type: bool
│ │ +        """
│ │ +
│ │ +        self._is_3d = is_3d
│ │  
│ │      @property
│ │      def note(self):
│ │ -        """Gets the note of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        """Gets the note of this RecurringResponseRecurringData.  # noqa: E501
│ │  
│ │ -        Note about the transaction that will not be displayed to Customer  # noqa: E501
│ │ +        Payment note  # noqa: E501
│ │  
│ │ -        :return: The note of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :return: The note of this RecurringResponseRecurringData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._note
│ │  
│ │      @note.setter
│ │      def note(self, note):
│ │ -        """Sets the note of this PaymentRequestPaymentData.
│ │ +        """Sets the note of this RecurringResponseRecurringData.
│ │  
│ │ -        Note about the transaction that will not be displayed to Customer  # noqa: E501
│ │ +        Payment note  # noqa: E501
│ │  
│ │ -        :param note: The note of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :param note: The note of this RecurringResponseRecurringData.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if note is not None and len(note) > 100:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `note`, length must be less than or equal to `100`"
│ │ -            )  # noqa: E501
│ │ -        if note is not None and len(note) < 0:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `note`, length must be greater than or equal to `0`"
│ │ -            )  # noqa: E501
│ │  
│ │          self._note = note
│ │  
│ │      @property
│ │ -    def preauth(self):
│ │ -        """Gets the preauth of this PaymentRequestPaymentData.  # noqa: E501
│ │ +    def payments(self):
│ │ +        """Gets the payments of this RecurringResponseRecurringData.  # noqa: E501
│ │  
│ │ -        If set to `true`, the amount will not be captured but only blocked. Payments with 'preauth' attribute will be captured automatically in 7 days from the time of creating the preauth transaction. *(for BANKCARD payment method only)*.  # noqa: E501
│ │ +        Number of total payments, to be charged  # noqa: E501
│ │  
│ │ -        :return: The preauth of this PaymentRequestPaymentData.  # noqa: E501
│ │ -        :rtype: bool
│ │ +        :return: The payments of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :rtype: str
│ │          """
│ │ -        return self._preauth
│ │ +        return self._payments
│ │  
│ │ -    @preauth.setter
│ │ -    def preauth(self, preauth):
│ │ -        """Sets the preauth of this PaymentRequestPaymentData.
│ │ +    @payments.setter
│ │ +    def payments(self, payments):
│ │ +        """Sets the payments of this RecurringResponseRecurringData.
│ │  
│ │ -        If set to `true`, the amount will not be captured but only blocked. Payments with 'preauth' attribute will be captured automatically in 7 days from the time of creating the preauth transaction. *(for BANKCARD payment method only)*.  # noqa: E501
│ │ +        Number of total payments, to be charged  # noqa: E501
│ │  
│ │ -        :param preauth: The preauth of this PaymentRequestPaymentData.  # noqa: E501
│ │ -        :type: bool
│ │ +        :param payments: The payments of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :type: str
│ │ +        """
│ │ +
│ │ +        self._payments = payments
│ │ +
│ │ +    @property
│ │ +    def rrn(self):
│ │ +        """Gets the rrn of this RecurringResponseRecurringData.  # noqa: E501
│ │ +
│ │ +        RRN (Retrieval Reference Number), supplied by the acquiring financial institution  # noqa: E501
│ │ +
│ │ +        :return: The rrn of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :rtype: str
│ │ +        """
│ │ +        return self._rrn
│ │ +
│ │ +    @rrn.setter
│ │ +    def rrn(self, rrn):
│ │ +        """Sets the rrn of this RecurringResponseRecurringData.
│ │ +
│ │ +        RRN (Retrieval Reference Number), supplied by the acquiring financial institution  # noqa: E501
│ │ +
│ │ +        :param rrn: The rrn of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :type: str
│ │ +        """
│ │ +
│ │ +        self._rrn = rrn
│ │ +
│ │ +    class ScheduledType(object):
│ │ +        SA = "SA"
│ │ +        SM = "SM"
│ │ +
│ │ +    @property
│ │ +    def scheduled_type(self):
│ │ +        """Gets the scheduled_type of this RecurringResponseRecurringData.  # noqa: E501
│ │ +
│ │ +        Scheduled payment type attribute. `SM` - value for scheduled by merchant case `SA` - value for scheduled by acquirer case  # noqa: E501
│ │ +
│ │ +        :return: The scheduled_type of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :rtype: str
│ │ +        """
│ │ +        return self._scheduled_type
│ │ +
│ │ +    @scheduled_type.setter
│ │ +    def scheduled_type(self, scheduled_type):
│ │ +        """Sets the scheduled_type of this RecurringResponseRecurringData.
│ │ +
│ │ +        Scheduled payment type attribute. `SM` - value for scheduled by merchant case `SA` - value for scheduled by acquirer case  # noqa: E501
│ │ +
│ │ +        :param scheduled_type: The scheduled_type of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :type: str
│ │          """
│ │ +        allowed_values = ["SA", "SM"]  # noqa: E501
│ │ +        if scheduled_type not in allowed_values:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `scheduled_type` ({0}), must be one of {1}".format(  # noqa: E501
│ │ +                    scheduled_type, allowed_values
│ │ +                )
│ │ +            )
│ │ +
│ │ +        self._scheduled_type = scheduled_type
│ │  
│ │ -        self._preauth = preauth
│ │ +    class Status(object):
│ │ +        NEW = "NEW"
│ │ +        IN_PROGRESS = "IN_PROGRESS"
│ │ +        DECLINED = "DECLINED"
│ │ +        AUTHORIZED = "AUTHORIZED"
│ │ +        COMPLETED = "COMPLETED"
│ │ +        CANCELLED = "CANCELLED"
│ │ +        REFUNDED = "REFUNDED"
│ │ +        VOIDED = "VOIDED"
│ │ +        TERMINATED = "TERMINATED"
│ │ +        CHARGED_BACK = "CHARGED_BACK"
│ │ +        CHARGEBACK_RESOLVED = "CHARGEBACK_RESOLVED"
│ │  
│ │      @property
│ │ -    def sca_exemption(self):
│ │ -        """Gets the sca_exemption of this PaymentRequestPaymentData.  # noqa: E501
│ │ +    def status(self):
│ │ +        """Gets the status of this RecurringResponseRecurringData.  # noqa: E501
│ │  
│ │ -        Indicates the exemption type that you want to request for the transaction. Possible value: LOW_VALUE  # noqa: E501
│ │ +        Current recurring payment status  # noqa: E501
│ │  
│ │ -        :return: The sca_exemption of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :return: The status of this RecurringResponseRecurringData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._sca_exemption
│ │ +        return self._status
│ │  
│ │ -    @sca_exemption.setter
│ │ -    def sca_exemption(self, sca_exemption):
│ │ -        """Sets the sca_exemption of this PaymentRequestPaymentData.
│ │ +    @status.setter
│ │ +    def status(self, status):
│ │ +        """Sets the status of this RecurringResponseRecurringData.
│ │  
│ │ -        Indicates the exemption type that you want to request for the transaction. Possible value: LOW_VALUE  # noqa: E501
│ │ +        Current recurring payment status  # noqa: E501
│ │  
│ │ -        :param sca_exemption: The sca_exemption of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :param status: The status of this RecurringResponseRecurringData.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if sca_exemption is not None and not re.search(
│ │ -            r"LOW_VALUE", sca_exemption
│ │ -        ):  # noqa: E501
│ │ +        allowed_values = [
│ │ +            "NEW",
│ │ +            "IN_PROGRESS",
│ │ +            "DECLINED",
│ │ +            "AUTHORIZED",
│ │ +            "COMPLETED",
│ │ +            "CANCELLED",
│ │ +            "REFUNDED",
│ │ +            "VOIDED",
│ │ +            "TERMINATED",
│ │ +            "CHARGED_BACK",
│ │ +            "CHARGEBACK_RESOLVED",
│ │ +        ]  # noqa: E501
│ │ +        if status not in allowed_values:
│ │              raise ValueError(
│ │ -                r"Invalid value for `sca_exemption`, must be a follow pattern or equal to `/LOW_VALUE/`"
│ │ -            )  # noqa: E501
│ │ +                "Invalid value for `status` ({0}), must be one of {1}".format(  # noqa: E501
│ │ +                    status, allowed_values
│ │ +                )
│ │ +            )
│ │  
│ │ -        self._sca_exemption = sca_exemption
│ │ +        self._status = status
│ │  
│ │      @property
│ │ -    def three_ds_challenge_indicator(self):
│ │ -        """Gets the three_ds_challenge_indicator of this PaymentRequestPaymentData.  # noqa: E501
│ │ +    def subscription(self):
│ │ +        """Gets the subscription of this RecurringResponseRecurringData.  # noqa: E501
│ │ +
│ │ +        Subscription data. Mandatory if scheduled payment is requested.  # noqa: E501
│ │ +
│ │ +        :return: The subscription of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :rtype: Subscription
│ │ +        """
│ │ +        return self._subscription
│ │ +
│ │ +    @subscription.setter
│ │ +    def subscription(self, subscription):
│ │ +        """Sets the subscription of this RecurringResponseRecurringData.
│ │  
│ │ +        Subscription data. Mandatory if scheduled payment is requested.  # noqa: E501
│ │ +
│ │ +        :param subscription: The subscription of this RecurringResponseRecurringData.  # noqa: E501
│ │ +        :type: Subscription
│ │ +        """
│ │  
│ │ -        :return: The three_ds_challenge_indicator of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        self._subscription = subscription
│ │ +
│ │ +    class Type(object):
│ │ +        ONECLICK = "ONECLICK"
│ │ +        SCHEDULED = "SCHEDULED"
│ │ +        INSTALLMENT = "INSTALLMENT"
│ │ +
│ │ +    @property
│ │ +    def type(self):
│ │ +        """Gets the type of this RecurringResponseRecurringData.  # noqa: E501
│ │ +
│ │ +        Recurring payment type name; can be ONECLICK, SCHEDULED, INSTALLMENT  # noqa: E501
│ │ +
│ │ +        :return: The type of this RecurringResponseRecurringData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._three_ds_challenge_indicator
│ │ +        return self._type
│ │  
│ │ -    @three_ds_challenge_indicator.setter
│ │ -    def three_ds_challenge_indicator(self, three_ds_challenge_indicator):
│ │ -        """Sets the three_ds_challenge_indicator of this PaymentRequestPaymentData.
│ │ +    @type.setter
│ │ +    def type(self, type):
│ │ +        """Sets the type of this RecurringResponseRecurringData.
│ │  
│ │ +        Recurring payment type name; can be ONECLICK, SCHEDULED, INSTALLMENT  # noqa: E501
│ │  
│ │ -        :param three_ds_challenge_indicator: The three_ds_challenge_indicator of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :param type: The type of this RecurringResponseRecurringData.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if three_ds_challenge_indicator is not None and not re.search(
│ │ -            r"01|04", three_ds_challenge_indicator
│ │ -        ):  # noqa: E501
│ │ +        allowed_values = ["ONECLICK", "SCHEDULED", "INSTALLMENT"]  # noqa: E501
│ │ +        if type not in allowed_values:
│ │              raise ValueError(
│ │ -                r"Invalid value for `three_ds_challenge_indicator`, must be a follow pattern or equal to `/01|04/`"
│ │ -            )  # noqa: E501
│ │ +                "Invalid value for `type` ({0}), must be one of {1}".format(  # noqa: E501
│ │ +                    type, allowed_values
│ │ +                )
│ │ +            )
│ │  
│ │ -        self._three_ds_challenge_indicator = three_ds_challenge_indicator
│ │ +        self._type = type
│ │  
│ │      class TransType(object):
│ │          _01 = "01"
│ │          _03 = "03"
│ │          _10 = "10"
│ │          _11 = "11"
│ │          _28 = "28"
│ │  
│ │      @property
│ │      def trans_type(self):
│ │ -        """Gets the trans_type of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        """Gets the trans_type of this RecurringResponseRecurringData.  # noqa: E501
│ │  
│ │  
│ │ -        :return: The trans_type of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :return: The trans_type of this RecurringResponseRecurringData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._trans_type
│ │  
│ │      @trans_type.setter
│ │      def trans_type(self, trans_type):
│ │ -        """Sets the trans_type of this PaymentRequestPaymentData.
│ │ +        """Sets the trans_type of this RecurringResponseRecurringData.
│ │  
│ │  
│ │ -        :param trans_type: The trans_type of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :param trans_type: The trans_type of this RecurringResponseRecurringData.  # noqa: E501
│ │          :type: str
│ │          """
│ │          allowed_values = ["01", "03", "10", "11", "28"]  # noqa: E501
│ │          if trans_type not in allowed_values:
│ │              raise ValueError(
│ │                  "Invalid value for `trans_type` ({0}), must be one of {1}".format(  # noqa: E501
│ │                      trans_type, allowed_values
│ │ @@ -525,15 +774,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(PaymentRequestPaymentData, dict):
│ │ +        if issubclass(RecurringResponseRecurringData, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -541,15 +790,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, PaymentRequestPaymentData):
│ │ +        if not isinstance(other, RecurringResponseRecurringData):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/payment_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_response.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payment_response_card_account.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_response_card_account.py
│ │┄ Files 22% similar despite different names
│ │ @@ -28,73 +28,55 @@
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │          "acct_type": "str",
│ │ -        "card_brand": "str",
│ │ -        "card_type": "str",
│ │          "expiration": "str",
│ │          "holder": "str",
│ │ -        "issuer": "str",
│ │          "issuing_country_code": "str",
│ │          "masked_pan": "str",
│ │          "token": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │          "acct_type": "acct_type",
│ │ -        "card_brand": "card_brand",
│ │ -        "card_type": "card_type",
│ │          "expiration": "expiration",
│ │          "holder": "holder",
│ │ -        "issuer": "issuer",
│ │          "issuing_country_code": "issuing_country_code",
│ │          "masked_pan": "masked_pan",
│ │          "token": "token",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │          acct_type=None,
│ │ -        card_brand=None,
│ │ -        card_type=None,
│ │          expiration=None,
│ │          holder=None,
│ │ -        issuer=None,
│ │          issuing_country_code=None,
│ │          masked_pan=None,
│ │          token=None,
│ │      ):  # noqa: E501
│ │          """PaymentResponseCardAccount - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._acct_type = None
│ │ -        self._card_brand = None
│ │ -        self._card_type = None
│ │          self._expiration = None
│ │          self._holder = None
│ │ -        self._issuer = None
│ │          self._issuing_country_code = None
│ │          self._masked_pan = None
│ │          self._token = None
│ │          self.discriminator = None
│ │  
│ │          if acct_type is not None:
│ │              self.acct_type = acct_type
│ │ -        if card_brand is not None:
│ │ -            self.card_brand = card_brand
│ │ -        if card_type is not None:
│ │ -            self.card_type = card_type
│ │          if expiration is not None:
│ │              self.expiration = expiration
│ │          if holder is not None:
│ │              self.holder = holder
│ │ -        if issuer is not None:
│ │ -            self.issuer = issuer
│ │          if issuing_country_code is not None:
│ │              self.issuing_country_code = issuing_country_code
│ │          if masked_pan is not None:
│ │              self.masked_pan = masked_pan
│ │          if token is not None:
│ │              self.token = token
│ │  
│ │ @@ -128,80 +110,14 @@
│ │                      acct_type, allowed_values
│ │                  )
│ │              )
│ │  
│ │          self._acct_type = acct_type
│ │  
│ │      @property
│ │ -    def card_brand(self):
│ │ -        """Gets the card_brand of this PaymentResponseCardAccount.  # noqa: E501
│ │ -
│ │ -        Card brand  # noqa: E501
│ │ -
│ │ -        :return: The card_brand of this PaymentResponseCardAccount.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._card_brand
│ │ -
│ │ -    @card_brand.setter
│ │ -    def card_brand(self, card_brand):
│ │ -        """Sets the card_brand of this PaymentResponseCardAccount.
│ │ -
│ │ -        Card brand  # noqa: E501
│ │ -
│ │ -        :param card_brand: The card_brand of this PaymentResponseCardAccount.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._card_brand = card_brand
│ │ -
│ │ -    class CardType(object):
│ │ -        DEBIT = "DEBIT"
│ │ -        CREDIT = "CREDIT"
│ │ -        PREPAID = "PREPAID"
│ │ -        OTHER = "OTHER"
│ │ -        UNKNOWN = "UNKNOWN"
│ │ -
│ │ -    @property
│ │ -    def card_type(self):
│ │ -        """Gets the card_type of this PaymentResponseCardAccount.  # noqa: E501
│ │ -
│ │ -        Card type  # noqa: E501
│ │ -
│ │ -        :return: The card_type of this PaymentResponseCardAccount.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._card_type
│ │ -
│ │ -    @card_type.setter
│ │ -    def card_type(self, card_type):
│ │ -        """Sets the card_type of this PaymentResponseCardAccount.
│ │ -
│ │ -        Card type  # noqa: E501
│ │ -
│ │ -        :param card_type: The card_type of this PaymentResponseCardAccount.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -        allowed_values = [
│ │ -            "DEBIT",
│ │ -            "CREDIT",
│ │ -            "PREPAID",
│ │ -            "OTHER",
│ │ -            "UNKNOWN",
│ │ -        ]  # noqa: E501
│ │ -        if card_type not in allowed_values:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `card_type` ({0}), must be one of {1}".format(  # noqa: E501
│ │ -                    card_type, allowed_values
│ │ -                )
│ │ -            )
│ │ -
│ │ -        self._card_type = card_type
│ │ -
│ │ -    @property
│ │      def expiration(self):
│ │          """Gets the expiration of this PaymentResponseCardAccount.  # noqa: E501
│ │  
│ │          Customer’s card expiration date. Format: `mm/yyyy`  # noqa: E501
│ │  
│ │          :return: The expiration of this PaymentResponseCardAccount.  # noqa: E501
│ │          :rtype: str
│ │ @@ -240,37 +156,14 @@
│ │          :param holder: The holder of this PaymentResponseCardAccount.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._holder = holder
│ │  
│ │      @property
│ │ -    def issuer(self):
│ │ -        """Gets the issuer of this PaymentResponseCardAccount.  # noqa: E501
│ │ -
│ │ -        Card issuer  # noqa: E501
│ │ -
│ │ -        :return: The issuer of this PaymentResponseCardAccount.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._issuer
│ │ -
│ │ -    @issuer.setter
│ │ -    def issuer(self, issuer):
│ │ -        """Sets the issuer of this PaymentResponseCardAccount.
│ │ -
│ │ -        Card issuer  # noqa: E501
│ │ -
│ │ -        :param issuer: The issuer of this PaymentResponseCardAccount.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._issuer = issuer
│ │ -
│ │ -    @property
│ │      def issuing_country_code(self):
│ │          """Gets the issuing_country_code of this PaymentResponseCardAccount.  # noqa: E501
│ │  
│ │          Country code of issuing card country  # noqa: E501
│ │  
│ │          :return: The issuing_country_code of this PaymentResponseCardAccount.  # noqa: E501
│ │          :rtype: str
│ │   --- cardpay-3.45.8/cardpay/model/payment_response_cryptocurrency_account.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_response_cryptocurrency_account.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payment_response_customer.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_response_customer.py
│ │┄ Files 11% similar despite different names
│ │ @@ -32,79 +32,67 @@
│ │      """
│ │      swagger_types = {
│ │          "email": "str",
│ │          "full_name": "str",
│ │          "home_phone": "str",
│ │          "id": "str",
│ │          "ip": "str",
│ │ -        "ip_country": "str",
│ │          "locale": "str",
│ │          "phone": "str",
│ │ -        "user_agent": "str",
│ │          "work_phone": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │          "email": "email",
│ │          "full_name": "full_name",
│ │          "home_phone": "home_phone",
│ │          "id": "id",
│ │          "ip": "ip",
│ │ -        "ip_country": "ip_country",
│ │          "locale": "locale",
│ │          "phone": "phone",
│ │ -        "user_agent": "user_agent",
│ │          "work_phone": "work_phone",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │          email=None,
│ │          full_name=None,
│ │          home_phone=None,
│ │          id=None,
│ │          ip=None,
│ │ -        ip_country=None,
│ │          locale=None,
│ │          phone=None,
│ │ -        user_agent=None,
│ │          work_phone=None,
│ │      ):  # noqa: E501
│ │          """PaymentResponseCustomer - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._email = None
│ │          self._full_name = None
│ │          self._home_phone = None
│ │          self._id = None
│ │          self._ip = None
│ │ -        self._ip_country = None
│ │          self._locale = None
│ │          self._phone = None
│ │ -        self._user_agent = None
│ │          self._work_phone = None
│ │          self.discriminator = None
│ │  
│ │          if email is not None:
│ │              self.email = email
│ │          if full_name is not None:
│ │              self.full_name = full_name
│ │          if home_phone is not None:
│ │              self.home_phone = home_phone
│ │          if id is not None:
│ │              self.id = id
│ │          if ip is not None:
│ │              self.ip = ip
│ │ -        if ip_country is not None:
│ │ -            self.ip_country = ip_country
│ │          if locale is not None:
│ │              self.locale = locale
│ │          if phone is not None:
│ │              self.phone = phone
│ │ -        if user_agent is not None:
│ │ -            self.user_agent = user_agent
│ │          if work_phone is not None:
│ │              self.work_phone = work_phone
│ │  
│ │      @property
│ │      def email(self):
│ │          """Gets the email of this PaymentResponseCustomer.  # noqa: E501
│ │  
│ │ @@ -216,37 +204,14 @@
│ │          :param ip: The ip of this PaymentResponseCustomer.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._ip = ip
│ │  
│ │      @property
│ │ -    def ip_country(self):
│ │ -        """Gets the ip_country of this PaymentResponseCustomer.  # noqa: E501
│ │ -
│ │ -        Customer country by IP  # noqa: E501
│ │ -
│ │ -        :return: The ip_country of this PaymentResponseCustomer.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._ip_country
│ │ -
│ │ -    @ip_country.setter
│ │ -    def ip_country(self, ip_country):
│ │ -        """Sets the ip_country of this PaymentResponseCustomer.
│ │ -
│ │ -        Customer country by IP  # noqa: E501
│ │ -
│ │ -        :param ip_country: The ip_country of this PaymentResponseCustomer.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._ip_country = ip_country
│ │ -
│ │ -    @property
│ │      def locale(self):
│ │          """Gets the locale of this PaymentResponseCustomer.  # noqa: E501
│ │  
│ │          Preferred locale for the payment page ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) language code). The default locale will be applied if the selected locale is not supported. Supported locales are: `ru`, `en`, `zh`, `ja`  # noqa: E501
│ │  
│ │          :return: The locale of this PaymentResponseCustomer.  # noqa: E501
│ │          :rtype: str
│ │ @@ -285,37 +250,14 @@
│ │          :param phone: The phone of this PaymentResponseCustomer.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._phone = phone
│ │  
│ │      @property
│ │ -    def user_agent(self):
│ │ -        """Gets the user_agent of this PaymentResponseCustomer.  # noqa: E501
│ │ -
│ │ -        User agent  # noqa: E501
│ │ -
│ │ -        :return: The user_agent of this PaymentResponseCustomer.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._user_agent
│ │ -
│ │ -    @user_agent.setter
│ │ -    def user_agent(self, user_agent):
│ │ -        """Sets the user_agent of this PaymentResponseCustomer.
│ │ -
│ │ -        User agent  # noqa: E501
│ │ -
│ │ -        :param user_agent: The user_agent of this PaymentResponseCustomer.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._user_agent = user_agent
│ │ -
│ │ -    @property
│ │      def work_phone(self):
│ │          """Gets the work_phone of this PaymentResponseCustomer.  # noqa: E501
│ │  
│ │          The work phone number provided by the Cardholder. Required (if available) unless market or regional mandate restricts sending this information. Characters Format: string (10-18 symbols) country code + Subscriber number. Refer to ITU-E.164 for additional information on format and length.  # noqa: E501
│ │  
│ │          :return: The work_phone of this PaymentResponseCustomer.  # noqa: E501
│ │          :rtype: str
│ │   --- cardpay-3.45.8/cardpay/model/payment_response_payment_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_response_payment_data.py
│ │┄ Files 15% similar despite different names
│ │ @@ -34,89 +34,73 @@
│ │          "amount": "float",
│ │          "arn": "str",
│ │          "auth_code": "str",
│ │          "created": "str",
│ │          "currency": "str",
│ │          "decline_code": "str",
│ │          "decline_reason": "str",
│ │ -        "extended_decline_reason": "str",
│ │          "id": "str",
│ │ -        "installment_type": "str",
│ │ -        "installments": "str",
│ │          "invalid_data": "list[str]",
│ │          "is_3d": "bool",
│ │          "note": "str",
│ │          "rrn": "str",
│ │          "status": "str",
│ │          "trans_type": "str",
│ │ -        "type": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │          "amount": "amount",
│ │          "arn": "arn",
│ │          "auth_code": "auth_code",
│ │          "created": "created",
│ │          "currency": "currency",
│ │          "decline_code": "decline_code",
│ │          "decline_reason": "decline_reason",
│ │ -        "extended_decline_reason": "extended_decline_reason",
│ │          "id": "id",
│ │ -        "installment_type": "installment_type",
│ │ -        "installments": "installments",
│ │          "invalid_data": "invalid_data",
│ │          "is_3d": "is_3d",
│ │          "note": "note",
│ │          "rrn": "rrn",
│ │          "status": "status",
│ │          "trans_type": "trans_type",
│ │ -        "type": "type",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │          amount=None,
│ │          arn=None,
│ │          auth_code=None,
│ │          created=None,
│ │          currency=None,
│ │          decline_code=None,
│ │          decline_reason=None,
│ │ -        extended_decline_reason=None,
│ │          id=None,
│ │ -        installment_type=None,
│ │ -        installments=None,
│ │          invalid_data=None,
│ │          is_3d=None,
│ │          note=None,
│ │          rrn=None,
│ │          status=None,
│ │          trans_type=None,
│ │ -        type=None,
│ │      ):  # noqa: E501
│ │          """PaymentResponsePaymentData - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._amount = None
│ │          self._arn = None
│ │          self._auth_code = None
│ │          self._created = None
│ │          self._currency = None
│ │          self._decline_code = None
│ │          self._decline_reason = None
│ │ -        self._extended_decline_reason = None
│ │          self._id = None
│ │ -        self._installment_type = None
│ │ -        self._installments = None
│ │          self._invalid_data = None
│ │          self._is_3d = None
│ │          self._note = None
│ │          self._rrn = None
│ │          self._status = None
│ │          self._trans_type = None
│ │ -        self._type = None
│ │          self.discriminator = None
│ │  
│ │          if amount is not None:
│ │              self.amount = amount
│ │          if arn is not None:
│ │              self.arn = arn
│ │          if auth_code is not None:
│ │ @@ -125,36 +109,28 @@
│ │              self.created = created
│ │          if currency is not None:
│ │              self.currency = currency
│ │          if decline_code is not None:
│ │              self.decline_code = decline_code
│ │          if decline_reason is not None:
│ │              self.decline_reason = decline_reason
│ │ -        if extended_decline_reason is not None:
│ │ -            self.extended_decline_reason = extended_decline_reason
│ │          if id is not None:
│ │              self.id = id
│ │ -        if installment_type is not None:
│ │ -            self.installment_type = installment_type
│ │ -        if installments is not None:
│ │ -            self.installments = installments
│ │          if invalid_data is not None:
│ │              self.invalid_data = invalid_data
│ │          if is_3d is not None:
│ │              self.is_3d = is_3d
│ │          if note is not None:
│ │              self.note = note
│ │          if rrn is not None:
│ │              self.rrn = rrn
│ │          if status is not None:
│ │              self.status = status
│ │          if trans_type is not None:
│ │              self.trans_type = trans_type
│ │ -        if type is not None:
│ │ -            self.type = type
│ │  
│ │      @property
│ │      def amount(self):
│ │          """Gets the amount of this PaymentResponsePaymentData.  # noqa: E501
│ │  
│ │          Payment amount  # noqa: E501
│ │  
│ │ @@ -310,37 +286,14 @@
│ │          :param decline_reason: The decline_reason of this PaymentResponsePaymentData.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._decline_reason = decline_reason
│ │  
│ │      @property
│ │ -    def extended_decline_reason(self):
│ │ -        """Gets the extended_decline_reason of this PaymentResponsePaymentData.  # noqa: E501
│ │ -
│ │ -        Original decline reason. Can be presented in responses if original network response code is presented and option is enabled for Merchant. Not presented by default, ask Unlimint manager to enable it if needed.  # noqa: E501
│ │ -
│ │ -        :return: The extended_decline_reason of this PaymentResponsePaymentData.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._extended_decline_reason
│ │ -
│ │ -    @extended_decline_reason.setter
│ │ -    def extended_decline_reason(self, extended_decline_reason):
│ │ -        """Sets the extended_decline_reason of this PaymentResponsePaymentData.
│ │ -
│ │ -        Original decline reason. Can be presented in responses if original network response code is presented and option is enabled for Merchant. Not presented by default, ask Unlimint manager to enable it if needed.  # noqa: E501
│ │ -
│ │ -        :param extended_decline_reason: The extended_decline_reason of this PaymentResponsePaymentData.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._extended_decline_reason = extended_decline_reason
│ │ -
│ │ -    @property
│ │      def id(self):
│ │          """Gets the id of this PaymentResponsePaymentData.  # noqa: E501
│ │  
│ │          CardPay's payment id  # noqa: E501
│ │  
│ │          :return: The id of this PaymentResponsePaymentData.  # noqa: E501
│ │          :rtype: str
│ │ @@ -356,60 +309,14 @@
│ │          :param id: The id of this PaymentResponsePaymentData.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._id = id
│ │  
│ │      @property
│ │ -    def installment_type(self):
│ │ -        """Gets the installment_type of this PaymentResponsePaymentData.  # noqa: E501
│ │ -
│ │ -        Selected installment type  # noqa: E501
│ │ -
│ │ -        :return: The installment_type of this PaymentResponsePaymentData.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._installment_type
│ │ -
│ │ -    @installment_type.setter
│ │ -    def installment_type(self, installment_type):
│ │ -        """Sets the installment_type of this PaymentResponsePaymentData.
│ │ -
│ │ -        Selected installment type  # noqa: E501
│ │ -
│ │ -        :param installment_type: The installment_type of this PaymentResponsePaymentData.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._installment_type = installment_type
│ │ -
│ │ -    @property
│ │ -    def installments(self):
│ │ -        """Gets the installments of this PaymentResponsePaymentData.  # noqa: E501
│ │ -
│ │ -        Number of total installment payments, to be charged  # noqa: E501
│ │ -
│ │ -        :return: The installments of this PaymentResponsePaymentData.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._installments
│ │ -
│ │ -    @installments.setter
│ │ -    def installments(self, installments):
│ │ -        """Sets the installments of this PaymentResponsePaymentData.
│ │ -
│ │ -        Number of total installment payments, to be charged  # noqa: E501
│ │ -
│ │ -        :param installments: The installments of this PaymentResponsePaymentData.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._installments = installments
│ │ -
│ │ -    @property
│ │      def invalid_data(self):
│ │          """Gets the invalid_data of this PaymentResponsePaymentData.  # noqa: E501
│ │  
│ │          Invalid card or billing data  # noqa: E501
│ │  
│ │          :return: The invalid_data of this PaymentResponsePaymentData.  # noqa: E501
│ │          :rtype: list[str]
│ │ @@ -583,37 +490,14 @@
│ │                  "Invalid value for `trans_type` ({0}), must be one of {1}".format(  # noqa: E501
│ │                      trans_type, allowed_values
│ │                  )
│ │              )
│ │  
│ │          self._trans_type = trans_type
│ │  
│ │ -    @property
│ │ -    def type(self):
│ │ -        """Gets the type of this PaymentResponsePaymentData.  # noqa: E501
│ │ -
│ │ -        Payment type, can be PAYMENT, INSTALLMENT  # noqa: E501
│ │ -
│ │ -        :return: The type of this PaymentResponsePaymentData.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._type
│ │ -
│ │ -    @type.setter
│ │ -    def type(self, type):
│ │ -        """Sets the type of this PaymentResponsePaymentData.
│ │ -
│ │ -        Payment type, can be PAYMENT, INSTALLMENT  # noqa: E501
│ │ -
│ │ -        :param type: The type of this PaymentResponsePaymentData.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._type = type
│ │ -
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │              if isinstance(value, list):
│ │   --- cardpay-3.45.8/cardpay/model/payment_update_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_update_request.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payment_update_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/plan_update_request.py
│ │┄ Files 18% similar despite different names
│ │ @@ -12,144 +12,148 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ -from cardpay.model.response_updated_transaction_data import (
│ │ -    ResponseUpdatedTransactionData,
│ │ -)  # noqa: F401,E501
│ │ -from cardpay.model.transaction_response_merchant_order import (
│ │ -    TransactionResponseMerchantOrder,
│ │ +from cardpay.model.plan_update_request_plan_data import (
│ │ +    PlanUpdateRequestPlanData,
│ │  )  # noqa: F401,E501
│ │ +from cardpay.model.request import Request  # noqa: F401,E501
│ │  
│ │  
│ │ -class PaymentUpdateResponse(object):
│ │ +class PlanUpdateRequest(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │ -        "merchant_order": "TransactionResponseMerchantOrder",
│ │ +        "request": "Request",
│ │          "operation": "str",
│ │ -        "payment_data": "ResponseUpdatedTransactionData",
│ │ +        "plan_data": "PlanUpdateRequestPlanData",
│ │      }
│ │  
│ │      attribute_map = {
│ │ -        "merchant_order": "merchant_order",
│ │ +        "request": "request",
│ │          "operation": "operation",
│ │ -        "payment_data": "payment_data",
│ │ +        "plan_data": "plan_data",
│ │      }
│ │  
│ │ -    def __init__(
│ │ -        self, merchant_order=None, operation=None, payment_data=None
│ │ -    ):  # noqa: E501
│ │ -        """PaymentUpdateResponse - a model defined in Swagger"""  # noqa: E501
│ │ +    def __init__(self, request=None, operation=None, plan_data=None):  # noqa: E501
│ │ +        """PlanUpdateRequest - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._merchant_order = None
│ │ +        self._request = None
│ │          self._operation = None
│ │ -        self._payment_data = None
│ │ +        self._plan_data = None
│ │          self.discriminator = None
│ │  
│ │ -        if merchant_order is not None:
│ │ -            self.merchant_order = merchant_order
│ │ -        if operation is not None:
│ │ -            self.operation = operation
│ │ -        if payment_data is not None:
│ │ -            self.payment_data = payment_data
│ │ +        self.request = request
│ │ +        self.operation = operation
│ │ +        self.plan_data = plan_data
│ │  
│ │      @property
│ │ -    def merchant_order(self):
│ │ -        """Gets the merchant_order of this PaymentUpdateResponse.  # noqa: E501
│ │ +    def request(self):
│ │ +        """Gets the request of this PlanUpdateRequest.  # noqa: E501
│ │  
│ │ -        Merchant order data  # noqa: E501
│ │ +        Request  # noqa: E501
│ │  
│ │ -        :return: The merchant_order of this PaymentUpdateResponse.  # noqa: E501
│ │ -        :rtype: TransactionResponseMerchantOrder
│ │ +        :return: The request of this PlanUpdateRequest.  # noqa: E501
│ │ +        :rtype: Request
│ │          """
│ │ -        return self._merchant_order
│ │ +        return self._request
│ │  
│ │ -    @merchant_order.setter
│ │ -    def merchant_order(self, merchant_order):
│ │ -        """Sets the merchant_order of this PaymentUpdateResponse.
│ │ +    @request.setter
│ │ +    def request(self, request):
│ │ +        """Sets the request of this PlanUpdateRequest.
│ │  
│ │ -        Merchant order data  # noqa: E501
│ │ +        Request  # noqa: E501
│ │  
│ │ -        :param merchant_order: The merchant_order of this PaymentUpdateResponse.  # noqa: E501
│ │ -        :type: TransactionResponseMerchantOrder
│ │ +        :param request: The request of this PlanUpdateRequest.  # noqa: E501
│ │ +        :type: Request
│ │          """
│ │ +        if request is None:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `request`, must not be `None`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._merchant_order = merchant_order
│ │ +        self._request = request
│ │  
│ │      class Operation(object):
│ │          CHANGE_STATUS = "CHANGE_STATUS"
│ │ -        CONFIRM_3DS = "CONFIRM_3DS"
│ │ -        EXECUTE = "EXECUTE"
│ │ +        RENAME = "RENAME"
│ │  
│ │      @property
│ │      def operation(self):
│ │ -        """Gets the operation of this PaymentUpdateResponse.  # noqa: E501
│ │ +        """Gets the operation of this PlanUpdateRequest.  # noqa: E501
│ │  
│ │ -        Operation  # noqa: E501
│ │ +        `CHANGE_STATUS` value to initiate operation for status changing. `RENAME` value to initiate operation for plan renaming.  # noqa: E501
│ │  
│ │ -        :return: The operation of this PaymentUpdateResponse.  # noqa: E501
│ │ +        :return: The operation of this PlanUpdateRequest.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._operation
│ │  
│ │      @operation.setter
│ │      def operation(self, operation):
│ │ -        """Sets the operation of this PaymentUpdateResponse.
│ │ +        """Sets the operation of this PlanUpdateRequest.
│ │  
│ │ -        Operation  # noqa: E501
│ │ +        `CHANGE_STATUS` value to initiate operation for status changing. `RENAME` value to initiate operation for plan renaming.  # noqa: E501
│ │  
│ │ -        :param operation: The operation of this PaymentUpdateResponse.  # noqa: E501
│ │ +        :param operation: The operation of this PlanUpdateRequest.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        allowed_values = ["CHANGE_STATUS", "CONFIRM_3DS", "EXECUTE"]  # noqa: E501
│ │ +        if operation is None:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `operation`, must not be `None`"
│ │ +            )  # noqa: E501
│ │ +        allowed_values = ["CHANGE_STATUS", "RENAME"]  # noqa: E501
│ │          if operation not in allowed_values:
│ │              raise ValueError(
│ │                  "Invalid value for `operation` ({0}), must be one of {1}".format(  # noqa: E501
│ │                      operation, allowed_values
│ │                  )
│ │              )
│ │  
│ │          self._operation = operation
│ │  
│ │      @property
│ │ -    def payment_data(self):
│ │ -        """Gets the payment_data of this PaymentUpdateResponse.  # noqa: E501
│ │ +    def plan_data(self):
│ │ +        """Gets the plan_data of this PlanUpdateRequest.  # noqa: E501
│ │  
│ │ -        Transaction data  # noqa: E501
│ │ +        Plan data  # noqa: E501
│ │  
│ │ -        :return: The payment_data of this PaymentUpdateResponse.  # noqa: E501
│ │ -        :rtype: ResponseUpdatedTransactionData
│ │ +        :return: The plan_data of this PlanUpdateRequest.  # noqa: E501
│ │ +        :rtype: PlanUpdateRequestPlanData
│ │          """
│ │ -        return self._payment_data
│ │ +        return self._plan_data
│ │  
│ │ -    @payment_data.setter
│ │ -    def payment_data(self, payment_data):
│ │ -        """Sets the payment_data of this PaymentUpdateResponse.
│ │ +    @plan_data.setter
│ │ +    def plan_data(self, plan_data):
│ │ +        """Sets the plan_data of this PlanUpdateRequest.
│ │  
│ │ -        Transaction data  # noqa: E501
│ │ +        Plan data  # noqa: E501
│ │  
│ │ -        :param payment_data: The payment_data of this PaymentUpdateResponse.  # noqa: E501
│ │ -        :type: ResponseUpdatedTransactionData
│ │ +        :param plan_data: The plan_data of this PlanUpdateRequest.  # noqa: E501
│ │ +        :type: PlanUpdateRequestPlanData
│ │          """
│ │ +        if plan_data is None:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `plan_data`, must not be `None`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._payment_data = payment_data
│ │ +        self._plan_data = plan_data
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -167,15 +171,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(PaymentUpdateResponse, dict):
│ │ +        if issubclass(PlanUpdateRequest, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -183,15 +187,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, PaymentUpdateResponse):
│ │ +        if not isinstance(other, PlanUpdateRequest):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/payment_update_transaction_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_update_transaction_data.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payments_list.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payments_list.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payout_callback.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payout_callback.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payout_creation_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payout_creation_response.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payout_payment_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payout_payment_data.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payout_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payout_request.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payout_request_card.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payout_request_card.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payout_request_card_account.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_request_card_account.py
│ │┄ Files 19% similar despite different names
│ │ @@ -13,159 +13,121 @@
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │  from cardpay.model.billing_address import BillingAddress  # noqa: F401,E501
│ │ -from cardpay.model.payout_request_card import PayoutRequestCard  # noqa: F401,E501
│ │ +from cardpay.model.payment_request_card import PaymentRequestCard  # noqa: F401,E501
│ │  
│ │  
│ │ -class PayoutRequestCardAccount(object):
│ │ +class PaymentRequestCardAccount(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │          "billing_address": "BillingAddress",
│ │ -        "card": "PayoutRequestCard",
│ │ -        "recipient_info": "str",
│ │ +        "card": "PaymentRequestCard",
│ │          "token": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │          "billing_address": "billing_address",
│ │          "card": "card",
│ │ -        "recipient_info": "recipient_info",
│ │          "token": "token",
│ │      }
│ │  
│ │ -    def __init__(
│ │ -        self, billing_address=None, card=None, recipient_info=None, token=None
│ │ -    ):  # noqa: E501
│ │ -        """PayoutRequestCardAccount - a model defined in Swagger"""  # noqa: E501
│ │ +    def __init__(self, billing_address=None, card=None, token=None):  # noqa: E501
│ │ +        """PaymentRequestCardAccount - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._billing_address = None
│ │          self._card = None
│ │ -        self._recipient_info = None
│ │          self._token = None
│ │          self.discriminator = None
│ │  
│ │          if billing_address is not None:
│ │              self.billing_address = billing_address
│ │          if card is not None:
│ │              self.card = card
│ │ -        if recipient_info is not None:
│ │ -            self.recipient_info = recipient_info
│ │          if token is not None:
│ │              self.token = token
│ │  
│ │      @property
│ │      def billing_address(self):
│ │ -        """Gets the billing_address of this PayoutRequestCardAccount.  # noqa: E501
│ │ +        """Gets the billing_address of this PaymentRequestCardAccount.  # noqa: E501
│ │  
│ │ -        Address for billing  # noqa: E501
│ │ +        Billing Address  # noqa: E501
│ │  
│ │ -        :return: The billing_address of this PayoutRequestCardAccount.  # noqa: E501
│ │ +        :return: The billing_address of this PaymentRequestCardAccount.  # noqa: E501
│ │          :rtype: BillingAddress
│ │          """
│ │          return self._billing_address
│ │  
│ │      @billing_address.setter
│ │      def billing_address(self, billing_address):
│ │ -        """Sets the billing_address of this PayoutRequestCardAccount.
│ │ +        """Sets the billing_address of this PaymentRequestCardAccount.
│ │  
│ │ -        Address for billing  # noqa: E501
│ │ +        Billing Address  # noqa: E501
│ │  
│ │ -        :param billing_address: The billing_address of this PayoutRequestCardAccount.  # noqa: E501
│ │ +        :param billing_address: The billing_address of this PaymentRequestCardAccount.  # noqa: E501
│ │          :type: BillingAddress
│ │          """
│ │  
│ │          self._billing_address = billing_address
│ │  
│ │      @property
│ │      def card(self):
│ │ -        """Gets the card of this PayoutRequestCardAccount.  # noqa: E501
│ │ +        """Gets the card of this PaymentRequestCardAccount.  # noqa: E501
│ │  
│ │ -        Represents a payout card data. Card section shouldn't be present if element `token` was presented.  # noqa: E501
│ │ +        Represents a payment card data. Card section shouldn't be present if element 'token' was presented. Shouldn't be used in Payment Page mode. For recurring: all card elements should presented only for first recurring payment.  # noqa: E501
│ │  
│ │ -        :return: The card of this PayoutRequestCardAccount.  # noqa: E501
│ │ -        :rtype: PayoutRequestCard
│ │ +        :return: The card of this PaymentRequestCardAccount.  # noqa: E501
│ │ +        :rtype: PaymentRequestCard
│ │          """
│ │          return self._card
│ │  
│ │      @card.setter
│ │      def card(self, card):
│ │ -        """Sets the card of this PayoutRequestCardAccount.
│ │ +        """Sets the card of this PaymentRequestCardAccount.
│ │  
│ │ -        Represents a payout card data. Card section shouldn't be present if element `token` was presented.  # noqa: E501
│ │ +        Represents a payment card data. Card section shouldn't be present if element 'token' was presented. Shouldn't be used in Payment Page mode. For recurring: all card elements should presented only for first recurring payment.  # noqa: E501
│ │  
│ │ -        :param card: The card of this PayoutRequestCardAccount.  # noqa: E501
│ │ -        :type: PayoutRequestCard
│ │ +        :param card: The card of this PaymentRequestCardAccount.  # noqa: E501
│ │ +        :type: PaymentRequestCard
│ │          """
│ │  
│ │          self._card = card
│ │  
│ │      @property
│ │ -    def recipient_info(self):
│ │ -        """Gets the recipient_info of this PayoutRequestCardAccount.  # noqa: E501
│ │ -
│ │ -        Property `recipient_info` may be required by Bank. In most cases it's Cardholder's name, contact CardPay manager for requirements. It must be omitted when property `token` is presented  # noqa: E501
│ │ -
│ │ -        :return: The recipient_info of this PayoutRequestCardAccount.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._recipient_info
│ │ -
│ │ -    @recipient_info.setter
│ │ -    def recipient_info(self, recipient_info):
│ │ -        """Sets the recipient_info of this PayoutRequestCardAccount.
│ │ -
│ │ -        Property `recipient_info` may be required by Bank. In most cases it's Cardholder's name, contact CardPay manager for requirements. It must be omitted when property `token` is presented  # noqa: E501
│ │ -
│ │ -        :param recipient_info: The recipient_info of this PayoutRequestCardAccount.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -        if recipient_info is not None and len(recipient_info) > 500:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `recipient_info`, length must be less than or equal to `500`"
│ │ -            )  # noqa: E501
│ │ -        if recipient_info is not None and len(recipient_info) < 0:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `recipient_info`, length must be greater than or equal to `0`"
│ │ -            )  # noqa: E501
│ │ -
│ │ -        self._recipient_info = recipient_info
│ │ -
│ │ -    @property
│ │      def token(self):
│ │ -        """Gets the token of this PayoutRequestCardAccount.  # noqa: E501
│ │ +        """Gets the token of this PaymentRequestCardAccount.  # noqa: E501
│ │  
│ │ -        Card token value, used instead of a card data  # noqa: E501
│ │ +        Card token value used instead of card information, except 'card.security_code' (it's mandatory). For payment: see PaymentRequestPaymentData for token generation. For recurring: this attribute is valid only for first recurring payment. It isn't valid for continue recurring payments (with filing id), see RecurringRequestRecurringData for token generation.  # noqa: E501
│ │  
│ │ -        :return: The token of this PayoutRequestCardAccount.  # noqa: E501
│ │ +        :return: The token of this PaymentRequestCardAccount.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._token
│ │  
│ │      @token.setter
│ │      def token(self, token):
│ │ -        """Sets the token of this PayoutRequestCardAccount.
│ │ +        """Sets the token of this PaymentRequestCardAccount.
│ │  
│ │ -        Card token value, used instead of a card data  # noqa: E501
│ │ +        Card token value used instead of card information, except 'card.security_code' (it's mandatory). For payment: see PaymentRequestPaymentData for token generation. For recurring: this attribute is valid only for first recurring payment. It isn't valid for continue recurring payments (with filing id), see RecurringRequestRecurringData for token generation.  # noqa: E501
│ │  
│ │ -        :param token: The token of this PayoutRequestCardAccount.  # noqa: E501
│ │ +        :param token: The token of this PaymentRequestCardAccount.  # noqa: E501
│ │          :type: str
│ │          """
│ │          if token is not None and len(token) > 36:
│ │              raise ValueError(
│ │                  "Invalid value for `token`, length must be less than or equal to `36`"
│ │              )  # noqa: E501
│ │          if token is not None and len(token) < 0:
│ │ @@ -195,15 +157,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(PayoutRequestCardAccount, dict):
│ │ +        if issubclass(PaymentRequestCardAccount, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -211,15 +173,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, PayoutRequestCardAccount):
│ │ +        if not isinstance(other, PaymentRequestCardAccount):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/payout_request_cryptocurrency_account.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payout_request_cryptocurrency_account.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payout_request_customer.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payout_request_customer.py
│ │┄ Files 8% similar despite different names
│ │ @@ -40,55 +40,51 @@
│ │          "first_name": "str",
│ │          "full_name": "str",
│ │          "id": "str",
│ │          "identity": "str",
│ │          "last_name": "str",
│ │          "living_address": "PayoutRequestLivingAddress",
│ │          "phone": "str",
│ │ -        "tax_reason_code": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │          "document_type": "document_type",
│ │          "email": "email",
│ │          "first_name": "first_name",
│ │          "full_name": "full_name",
│ │          "id": "id",
│ │          "identity": "identity",
│ │          "last_name": "last_name",
│ │          "living_address": "living_address",
│ │          "phone": "phone",
│ │ -        "tax_reason_code": "tax_reason_code",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │          document_type=None,
│ │          email=None,
│ │          first_name=None,
│ │          full_name=None,
│ │          id=None,
│ │          identity=None,
│ │          last_name=None,
│ │          living_address=None,
│ │          phone=None,
│ │ -        tax_reason_code=None,
│ │      ):  # noqa: E501
│ │          """PayoutRequestCustomer - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._document_type = None
│ │          self._email = None
│ │          self._first_name = None
│ │          self._full_name = None
│ │          self._id = None
│ │          self._identity = None
│ │          self._last_name = None
│ │          self._living_address = None
│ │          self._phone = None
│ │ -        self._tax_reason_code = None
│ │          self.discriminator = None
│ │  
│ │          if document_type is not None:
│ │              self.document_type = document_type
│ │          if email is not None:
│ │              self.email = email
│ │          if first_name is not None:
│ │ @@ -101,16 +97,14 @@
│ │              self.identity = identity
│ │          if last_name is not None:
│ │              self.last_name = last_name
│ │          if living_address is not None:
│ │              self.living_address = living_address
│ │          if phone is not None:
│ │              self.phone = phone
│ │ -        if tax_reason_code is not None:
│ │ -            self.tax_reason_code = tax_reason_code
│ │  
│ │      @property
│ │      def document_type(self):
│ │          """Gets the document_type of this PayoutRequestCustomer.  # noqa: E501
│ │  
│ │          Customer document type *(mandatory for 'Latin America' methods only)* For 'Latin America' is required for methods where country = CO, PE  # noqa: E501
│ │  
│ │ @@ -159,17 +153,17 @@
│ │          :param email: The email of this PayoutRequestCustomer.  # noqa: E501
│ │          :type: str
│ │          """
│ │          if email is not None and len(email) > 256:
│ │              raise ValueError(
│ │                  "Invalid value for `email`, length must be less than or equal to `256`"
│ │              )  # noqa: E501
│ │ -        if email is not None and len(email) < 3:
│ │ +        if email is not None and len(email) < 0:
│ │              raise ValueError(
│ │ -                "Invalid value for `email`, length must be greater than or equal to `3`"
│ │ +                "Invalid value for `email`, length must be greater than or equal to `0`"
│ │              )  # noqa: E501
│ │  
│ │          self._email = email
│ │  
│ │      @property
│ │      def first_name(self):
│ │          """Gets the first_name of this PayoutRequestCustomer.  # noqa: E501
│ │ @@ -367,43 +361,14 @@
│ │          if phone is not None and len(phone) < 5:
│ │              raise ValueError(
│ │                  "Invalid value for `phone`, length must be greater than or equal to `5`"
│ │              )  # noqa: E501
│ │  
│ │          self._phone = phone
│ │  
│ │ -    @property
│ │ -    def tax_reason_code(self):
│ │ -        """Gets the tax_reason_code of this PayoutRequestCustomer.  # noqa: E501
│ │ -
│ │ -        Customer's tax reason codeFor 'BANK131 back account mode' is required for methods where country = RU  # noqa: E501
│ │ -
│ │ -        :return: The tax_reason_code of this PayoutRequestCustomer.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._tax_reason_code
│ │ -
│ │ -    @tax_reason_code.setter
│ │ -    def tax_reason_code(self, tax_reason_code):
│ │ -        """Sets the tax_reason_code of this PayoutRequestCustomer.
│ │ -
│ │ -        Customer's tax reason codeFor 'BANK131 back account mode' is required for methods where country = RU  # noqa: E501
│ │ -
│ │ -        :param tax_reason_code: The tax_reason_code of this PayoutRequestCustomer.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -        if tax_reason_code is not None and not re.search(
│ │ -            r"^[0-9]{9}$", tax_reason_code
│ │ -        ):  # noqa: E501
│ │ -            raise ValueError(
│ │ -                r"Invalid value for `tax_reason_code`, must be a follow pattern or equal to `/^[0-9]{9}$/`"
│ │ -            )  # noqa: E501
│ │ -
│ │ -        self._tax_reason_code = tax_reason_code
│ │ -
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │              if isinstance(value, list):
│ │   --- cardpay-3.45.8/cardpay/model/payout_request_e_wallet_account.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payout_request_e_wallet_account.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payout_request_living_address.py
│ ├── +++ cardpay-3.6.21/cardpay/model/shipping_address.py
│ │┄ Files 18% similar despite different names
│ │ @@ -13,218 +13,269 @@
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │  
│ │ -class PayoutRequestLivingAddress(object):
│ │ +class ShippingAddress(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │ -        "address": "str",
│ │ +        "addr_line_1": "str",
│ │ +        "addr_line_2": "str",
│ │          "city": "str",
│ │          "country": "str",
│ │ +        "phone": "str",
│ │          "state": "str",
│ │          "zip": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │ -        "address": "address",
│ │ +        "addr_line_1": "addr_line_1",
│ │ +        "addr_line_2": "addr_line_2",
│ │          "city": "city",
│ │          "country": "country",
│ │ +        "phone": "phone",
│ │          "state": "state",
│ │          "zip": "zip",
│ │      }
│ │  
│ │      def __init__(
│ │ -        self, address=None, city=None, country=None, state=None, zip=None
│ │ +        self,
│ │ +        addr_line_1=None,
│ │ +        addr_line_2=None,
│ │ +        city=None,
│ │ +        country=None,
│ │ +        phone=None,
│ │ +        state=None,
│ │ +        zip=None,
│ │      ):  # noqa: E501
│ │ -        """PayoutRequestLivingAddress - a model defined in Swagger"""  # noqa: E501
│ │ +        """ShippingAddress - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._address = None
│ │ +        self._addr_line_1 = None
│ │ +        self._addr_line_2 = None
│ │          self._city = None
│ │          self._country = None
│ │ +        self._phone = None
│ │          self._state = None
│ │          self._zip = None
│ │          self.discriminator = None
│ │  
│ │ -        if address is not None:
│ │ -            self.address = address
│ │ +        if addr_line_1 is not None:
│ │ +            self.addr_line_1 = addr_line_1
│ │ +        if addr_line_2 is not None:
│ │ +            self.addr_line_2 = addr_line_2
│ │          if city is not None:
│ │              self.city = city
│ │          if country is not None:
│ │              self.country = country
│ │ +        if phone is not None:
│ │ +            self.phone = phone
│ │          if state is not None:
│ │              self.state = state
│ │          if zip is not None:
│ │              self.zip = zip
│ │  
│ │      @property
│ │ -    def address(self):
│ │ -        """Gets the address of this PayoutRequestLivingAddress.  # noqa: E501
│ │ +    def addr_line_1(self):
│ │ +        """Gets the addr_line_1 of this ShippingAddress.  # noqa: E501
│ │  
│ │ -        Customer address *(mandatory for 'Latin America' methods only)* For 'Latin America' is required for methods where country = CO  # noqa: E501
│ │ +        First line of the street address or equivalent local portion of the Cardholder shipping address associated with the card used for this purchase. Can include street and house number. *Length: 0 - 50*  # noqa: E501
│ │  
│ │ -        :return: The address of this PayoutRequestLivingAddress.  # noqa: E501
│ │ +        :return: The addr_line_1 of this ShippingAddress.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._address
│ │ +        return self._addr_line_1
│ │  
│ │ -    @address.setter
│ │ -    def address(self, address):
│ │ -        """Sets the address of this PayoutRequestLivingAddress.
│ │ +    @addr_line_1.setter
│ │ +    def addr_line_1(self, addr_line_1):
│ │ +        """Sets the addr_line_1 of this ShippingAddress.
│ │  
│ │ -        Customer address *(mandatory for 'Latin America' methods only)* For 'Latin America' is required for methods where country = CO  # noqa: E501
│ │ +        First line of the street address or equivalent local portion of the Cardholder shipping address associated with the card used for this purchase. Can include street and house number. *Length: 0 - 50*  # noqa: E501
│ │  
│ │ -        :param address: The address of this PayoutRequestLivingAddress.  # noqa: E501
│ │ +        :param addr_line_1: The addr_line_1 of this ShippingAddress.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if address is not None and len(address) > 100:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `address`, length must be less than or equal to `100`"
│ │ -            )  # noqa: E501
│ │ -        if address is not None and len(address) < 0:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `address`, length must be greater than or equal to `0`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._address = address
│ │ +        self._addr_line_1 = addr_line_1
│ │ +
│ │ +    @property
│ │ +    def addr_line_2(self):
│ │ +        """Gets the addr_line_2 of this ShippingAddress.  # noqa: E501
│ │ +
│ │ +        Second line of the street address or equivalent local portion of the Cardholder shipping address associated with the card used for this purchase. *Length: 0 - 50*  # noqa: E501
│ │ +
│ │ +        :return: The addr_line_2 of this ShippingAddress.  # noqa: E501
│ │ +        :rtype: str
│ │ +        """
│ │ +        return self._addr_line_2
│ │ +
│ │ +    @addr_line_2.setter
│ │ +    def addr_line_2(self, addr_line_2):
│ │ +        """Sets the addr_line_2 of this ShippingAddress.
│ │ +
│ │ +        Second line of the street address or equivalent local portion of the Cardholder shipping address associated with the card used for this purchase. *Length: 0 - 50*  # noqa: E501
│ │ +
│ │ +        :param addr_line_2: The addr_line_2 of this ShippingAddress.  # noqa: E501
│ │ +        :type: str
│ │ +        """
│ │ +
│ │ +        self._addr_line_2 = addr_line_2
│ │  
│ │      @property
│ │      def city(self):
│ │ -        """Gets the city of this PayoutRequestLivingAddress.  # noqa: E501
│ │ +        """Gets the city of this ShippingAddress.  # noqa: E501
│ │  
│ │ -        Customer city.  # noqa: E501
│ │ +        Delivery city. May include whitespaces, hyphens, apostrophes, commas and dots  # noqa: E501
│ │  
│ │ -        :return: The city of this PayoutRequestLivingAddress.  # noqa: E501
│ │ +        :return: The city of this ShippingAddress.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._city
│ │  
│ │      @city.setter
│ │      def city(self, city):
│ │ -        """Sets the city of this PayoutRequestLivingAddress.
│ │ +        """Sets the city of this ShippingAddress.
│ │  
│ │ -        Customer city.  # noqa: E501
│ │ +        Delivery city. May include whitespaces, hyphens, apostrophes, commas and dots  # noqa: E501
│ │  
│ │ -        :param city: The city of this PayoutRequestLivingAddress.  # noqa: E501
│ │ +        :param city: The city of this ShippingAddress.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if city is not None and len(city) > 20:
│ │ +        if city is not None and len(city) > 50:
│ │              raise ValueError(
│ │ -                "Invalid value for `city`, length must be less than or equal to `20`"
│ │ +                "Invalid value for `city`, length must be less than or equal to `50`"
│ │              )  # noqa: E501
│ │          if city is not None and len(city) < 0:
│ │              raise ValueError(
│ │                  "Invalid value for `city`, length must be greater than or equal to `0`"
│ │              )  # noqa: E501
│ │  
│ │          self._city = city
│ │  
│ │      @property
│ │      def country(self):
│ │ -        """Gets the country of this PayoutRequestLivingAddress.  # noqa: E501
│ │ +        """Gets the country of this ShippingAddress.  # noqa: E501
│ │  
│ │ -        ISO 3166-1 code of country: 2 or 3 latin letters or numeric code.  # noqa: E501
│ │ +        [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) code of delivery country: 2 or 3 latin letters or numeric code. Required for BANKCARD payment method if 'shipping_address' is presented.  # noqa: E501
│ │  
│ │ -        :return: The country of this PayoutRequestLivingAddress.  # noqa: E501
│ │ +        :return: The country of this ShippingAddress.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._country
│ │  
│ │      @country.setter
│ │      def country(self, country):
│ │ -        """Sets the country of this PayoutRequestLivingAddress.
│ │ +        """Sets the country of this ShippingAddress.
│ │ +
│ │ +        [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) code of delivery country: 2 or 3 latin letters or numeric code. Required for BANKCARD payment method if 'shipping_address' is presented.  # noqa: E501
│ │ +
│ │ +        :param country: The country of this ShippingAddress.  # noqa: E501
│ │ +        :type: str
│ │ +        """
│ │ +
│ │ +        self._country = country
│ │ +
│ │ +    @property
│ │ +    def phone(self):
│ │ +        """Gets the phone of this ShippingAddress.  # noqa: E501
│ │ +
│ │ +        Valid customer phone number  # noqa: E501
│ │ +
│ │ +        :return: The phone of this ShippingAddress.  # noqa: E501
│ │ +        :rtype: str
│ │ +        """
│ │ +        return self._phone
│ │ +
│ │ +    @phone.setter
│ │ +    def phone(self, phone):
│ │ +        """Sets the phone of this ShippingAddress.
│ │  
│ │ -        ISO 3166-1 code of country: 2 or 3 latin letters or numeric code.  # noqa: E501
│ │ +        Valid customer phone number  # noqa: E501
│ │  
│ │ -        :param country: The country of this PayoutRequestLivingAddress.  # noqa: E501
│ │ +        :param phone: The phone of this ShippingAddress.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if country is not None and len(country) > 3:
│ │ +        if phone is not None and len(phone) > 20:
│ │              raise ValueError(
│ │ -                "Invalid value for `country`, length must be less than or equal to `3`"
│ │ +                "Invalid value for `phone`, length must be less than or equal to `20`"
│ │              )  # noqa: E501
│ │ -        if country is not None and len(country) < 2:
│ │ +        if phone is not None and len(phone) < 5:
│ │              raise ValueError(
│ │ -                "Invalid value for `country`, length must be greater than or equal to `2`"
│ │ +                "Invalid value for `phone`, length must be greater than or equal to `5`"
│ │ +            )  # noqa: E501
│ │ +        if phone is not None and not re.search(r"[-+\\d()wp\\s]+", phone):  # noqa: E501
│ │ +            raise ValueError(
│ │ +                r"Invalid value for `phone`, must be a follow pattern or equal to `/[-+\\d()wp\\s]+/`"
│ │              )  # noqa: E501
│ │  
│ │ -        self._country = country
│ │ +        self._phone = phone
│ │  
│ │      @property
│ │      def state(self):
│ │ -        """Gets the state of this PayoutRequestLivingAddress.  # noqa: E501
│ │ +        """Gets the state of this ShippingAddress.  # noqa: E501
│ │  
│ │ -        Living state or province.  # noqa: E501
│ │ +        The state or province of the shipping address associated with the card being used for this purchase. It's recommended to send in following format: the country subdivision code defined in [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). May include whitespaces, hyphens, apostrophes, commas and dots.  # noqa: E501
│ │  
│ │ -        :return: The state of this PayoutRequestLivingAddress.  # noqa: E501
│ │ +        :return: The state of this ShippingAddress.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._state
│ │  
│ │      @state.setter
│ │      def state(self, state):
│ │ -        """Sets the state of this PayoutRequestLivingAddress.
│ │ +        """Sets the state of this ShippingAddress.
│ │  
│ │ -        Living state or province.  # noqa: E501
│ │ +        The state or province of the shipping address associated with the card being used for this purchase. It's recommended to send in following format: the country subdivision code defined in [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). May include whitespaces, hyphens, apostrophes, commas and dots.  # noqa: E501
│ │  
│ │ -        :param state: The state of this PayoutRequestLivingAddress.  # noqa: E501
│ │ +        :param state: The state of this ShippingAddress.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if state is not None and len(state) > 20:
│ │ +        if state is not None and len(state) > 40:
│ │              raise ValueError(
│ │ -                "Invalid value for `state`, length must be less than or equal to `20`"
│ │ +                "Invalid value for `state`, length must be less than or equal to `40`"
│ │              )  # noqa: E501
│ │          if state is not None and len(state) < 0:
│ │              raise ValueError(
│ │                  "Invalid value for `state`, length must be greater than or equal to `0`"
│ │              )  # noqa: E501
│ │  
│ │          self._state = state
│ │  
│ │      @property
│ │      def zip(self):
│ │ -        """Gets the zip of this PayoutRequestLivingAddress.  # noqa: E501
│ │ +        """Gets the zip of this ShippingAddress.  # noqa: E501
│ │  
│ │ -        Customer postal code  # noqa: E501
│ │ +        Delivery postal code. For BANKCARD payment method max length: 12 Mandatory for BOLETO and LOTERICA payment methods only.  # noqa: E501
│ │  
│ │ -        :return: The zip of this PayoutRequestLivingAddress.  # noqa: E501
│ │ +        :return: The zip of this ShippingAddress.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._zip
│ │  
│ │      @zip.setter
│ │      def zip(self, zip):
│ │ -        """Sets the zip of this PayoutRequestLivingAddress.
│ │ +        """Sets the zip of this ShippingAddress.
│ │  
│ │ -        Customer postal code  # noqa: E501
│ │ +        Delivery postal code. For BANKCARD payment method max length: 12 Mandatory for BOLETO and LOTERICA payment methods only.  # noqa: E501
│ │  
│ │ -        :param zip: The zip of this PayoutRequestLivingAddress.  # noqa: E501
│ │ +        :param zip: The zip of this ShippingAddress.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if zip is not None and len(zip) > 17:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `zip`, length must be less than or equal to `17`"
│ │ -            )  # noqa: E501
│ │ -        if zip is not None and len(zip) < 0:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `zip`, length must be greater than or equal to `0`"
│ │ -            )  # noqa: E501
│ │  
│ │          self._zip = zip
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │ @@ -244,15 +295,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(PayoutRequestLivingAddress, dict):
│ │ +        if issubclass(ShippingAddress, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -260,15 +311,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, PayoutRequestLivingAddress):
│ │ +        if not isinstance(other, ShippingAddress):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/payout_request_merchant_order.py
│ ├── +++ cardpay-3.6.21/cardpay/model/recurring_request_merchant_order.py
│ │┄ Files 22% similar despite different names
│ │ @@ -12,16 +12,19 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ +from cardpay.model.item import Item  # noqa: F401,E501
│ │ +from cardpay.model.shipping_address import ShippingAddress  # noqa: F401,E501
│ │  
│ │ -class PayoutRequestMerchantOrder(object):
│ │ +
│ │ +class RecurringRequestMerchantOrder(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │ @@ -30,117 +33,189 @@
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │          "cryptocurrency_indicator": "bool",
│ │          "description": "str",
│ │          "id": "str",
│ │ +        "items": "list[Item]",
│ │ +        "shipping_address": "ShippingAddress",
│ │      }
│ │  
│ │      attribute_map = {
│ │          "cryptocurrency_indicator": "cryptocurrency_indicator",
│ │          "description": "description",
│ │          "id": "id",
│ │ +        "items": "items",
│ │ +        "shipping_address": "shipping_address",
│ │      }
│ │  
│ │      def __init__(
│ │ -        self, cryptocurrency_indicator=None, description=None, id=None
│ │ +        self,
│ │ +        cryptocurrency_indicator=None,
│ │ +        description=None,
│ │ +        id=None,
│ │ +        items=None,
│ │ +        shipping_address=None,
│ │      ):  # noqa: E501
│ │ -        """PayoutRequestMerchantOrder - a model defined in Swagger"""  # noqa: E501
│ │ +        """RecurringRequestMerchantOrder - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._cryptocurrency_indicator = None
│ │          self._description = None
│ │          self._id = None
│ │ +        self._items = None
│ │ +        self._shipping_address = None
│ │          self.discriminator = None
│ │  
│ │          if cryptocurrency_indicator is not None:
│ │              self.cryptocurrency_indicator = cryptocurrency_indicator
│ │ -        if description is not None:
│ │ -            self.description = description
│ │ +        self.description = description
│ │          self.id = id
│ │ +        if items is not None:
│ │ +            self.items = items
│ │ +        if shipping_address is not None:
│ │ +            self.shipping_address = shipping_address
│ │  
│ │      @property
│ │      def cryptocurrency_indicator(self):
│ │ -        """Gets the cryptocurrency_indicator of this PayoutRequestMerchantOrder.  # noqa: E501
│ │ +        """Gets the cryptocurrency_indicator of this RecurringRequestMerchantOrder.  # noqa: E501
│ │  
│ │ -        Indicator should be added if there will be cryptocurrency in transaction  # noqa: E501
│ │ +        Indicator should be added if there will be cryptocurrency purchase in transaction  # noqa: E501
│ │  
│ │ -        :return: The cryptocurrency_indicator of this PayoutRequestMerchantOrder.  # noqa: E501
│ │ +        :return: The cryptocurrency_indicator of this RecurringRequestMerchantOrder.  # noqa: E501
│ │          :rtype: bool
│ │          """
│ │          return self._cryptocurrency_indicator
│ │  
│ │      @cryptocurrency_indicator.setter
│ │      def cryptocurrency_indicator(self, cryptocurrency_indicator):
│ │ -        """Sets the cryptocurrency_indicator of this PayoutRequestMerchantOrder.
│ │ +        """Sets the cryptocurrency_indicator of this RecurringRequestMerchantOrder.
│ │  
│ │ -        Indicator should be added if there will be cryptocurrency in transaction  # noqa: E501
│ │ +        Indicator should be added if there will be cryptocurrency purchase in transaction  # noqa: E501
│ │  
│ │ -        :param cryptocurrency_indicator: The cryptocurrency_indicator of this PayoutRequestMerchantOrder.  # noqa: E501
│ │ +        :param cryptocurrency_indicator: The cryptocurrency_indicator of this RecurringRequestMerchantOrder.  # noqa: E501
│ │          :type: bool
│ │          """
│ │  
│ │          self._cryptocurrency_indicator = cryptocurrency_indicator
│ │  
│ │      @property
│ │      def description(self):
│ │ -        """Gets the description of this PayoutRequestMerchantOrder.  # noqa: E501
│ │ +        """Gets the description of this RecurringRequestMerchantOrder.  # noqa: E501
│ │  
│ │ -        Payout description  # noqa: E501
│ │ +        Description of product/service being sold  # noqa: E501
│ │  
│ │ -        :return: The description of this PayoutRequestMerchantOrder.  # noqa: E501
│ │ +        :return: The description of this RecurringRequestMerchantOrder.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._description
│ │  
│ │      @description.setter
│ │      def description(self, description):
│ │ -        """Sets the description of this PayoutRequestMerchantOrder.
│ │ +        """Sets the description of this RecurringRequestMerchantOrder.
│ │  
│ │ -        Payout description  # noqa: E501
│ │ +        Description of product/service being sold  # noqa: E501
│ │  
│ │ -        :param description: The description of this PayoutRequestMerchantOrder.  # noqa: E501
│ │ +        :param description: The description of this RecurringRequestMerchantOrder.  # noqa: E501
│ │          :type: str
│ │          """
│ │ +        if description is None:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `description`, must not be `None`"
│ │ +            )  # noqa: E501
│ │ +        if description is not None and len(description) > 200:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `description`, length must be less than or equal to `200`"
│ │ +            )  # noqa: E501
│ │ +        if description is not None and len(description) < 1:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `description`, length must be greater than or equal to `1`"
│ │ +            )  # noqa: E501
│ │  
│ │          self._description = description
│ │  
│ │      @property
│ │      def id(self):
│ │ -        """Gets the id of this PayoutRequestMerchantOrder.  # noqa: E501
│ │ +        """Gets the id of this RecurringRequestMerchantOrder.  # noqa: E501
│ │  
│ │ -        Order ID used by Merchant in Merchant's system  # noqa: E501
│ │ +        Order ID used by Merchant's shopping cart  # noqa: E501
│ │  
│ │ -        :return: The id of this PayoutRequestMerchantOrder.  # noqa: E501
│ │ +        :return: The id of this RecurringRequestMerchantOrder.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._id
│ │  
│ │      @id.setter
│ │      def id(self, id):
│ │ -        """Sets the id of this PayoutRequestMerchantOrder.
│ │ +        """Sets the id of this RecurringRequestMerchantOrder.
│ │  
│ │ -        Order ID used by Merchant in Merchant's system  # noqa: E501
│ │ +        Order ID used by Merchant's shopping cart  # noqa: E501
│ │  
│ │ -        :param id: The id of this PayoutRequestMerchantOrder.  # noqa: E501
│ │ +        :param id: The id of this RecurringRequestMerchantOrder.  # noqa: E501
│ │          :type: str
│ │          """
│ │          if id is None:
│ │              raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
│ │          if id is not None and len(id) > 50:
│ │              raise ValueError(
│ │                  "Invalid value for `id`, length must be less than or equal to `50`"
│ │              )  # noqa: E501
│ │ -        if id is not None and len(id) < 0:
│ │ +        if id is not None and len(id) < 1:
│ │              raise ValueError(
│ │ -                "Invalid value for `id`, length must be greater than or equal to `0`"
│ │ +                "Invalid value for `id`, length must be greater than or equal to `1`"
│ │              )  # noqa: E501
│ │  
│ │          self._id = id
│ │  
│ │ +    @property
│ │ +    def items(self):
│ │ +        """Gets the items of this RecurringRequestMerchantOrder.  # noqa: E501
│ │ +
│ │ +        Array of items (in the shopping cart)  # noqa: E501
│ │ +
│ │ +        :return: The items of this RecurringRequestMerchantOrder.  # noqa: E501
│ │ +        :rtype: list[Item]
│ │ +        """
│ │ +        return self._items
│ │ +
│ │ +    @items.setter
│ │ +    def items(self, items):
│ │ +        """Sets the items of this RecurringRequestMerchantOrder.
│ │ +
│ │ +        Array of items (in the shopping cart)  # noqa: E501
│ │ +
│ │ +        :param items: The items of this RecurringRequestMerchantOrder.  # noqa: E501
│ │ +        :type: list[Item]
│ │ +        """
│ │ +
│ │ +        self._items = items
│ │ +
│ │ +    @property
│ │ +    def shipping_address(self):
│ │ +        """Gets the shipping_address of this RecurringRequestMerchantOrder.  # noqa: E501
│ │ +
│ │ +        Shipping Address  # noqa: E501
│ │ +
│ │ +        :return: The shipping_address of this RecurringRequestMerchantOrder.  # noqa: E501
│ │ +        :rtype: ShippingAddress
│ │ +        """
│ │ +        return self._shipping_address
│ │ +
│ │ +    @shipping_address.setter
│ │ +    def shipping_address(self, shipping_address):
│ │ +        """Sets the shipping_address of this RecurringRequestMerchantOrder.
│ │ +
│ │ +        Shipping Address  # noqa: E501
│ │ +
│ │ +        :param shipping_address: The shipping_address of this RecurringRequestMerchantOrder.  # noqa: E501
│ │ +        :type: ShippingAddress
│ │ +        """
│ │ +
│ │ +        self._shipping_address = shipping_address
│ │ +
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │              if isinstance(value, list):
│ │ @@ -157,15 +232,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(PayoutRequestMerchantOrder, dict):
│ │ +        if issubclass(RecurringRequestMerchantOrder, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -173,15 +248,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, PayoutRequestMerchantOrder):
│ │ +        if not isinstance(other, RecurringRequestMerchantOrder):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/payout_request_payout_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payout_request_payout_data.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payout_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payout_response.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payout_response_card.py
│ ├── +++ cardpay-3.6.21/cardpay/model/mobile_card_account_response.py
│ │┄ Files 18% similar despite different names
│ │ @@ -13,264 +13,213 @@
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │  
│ │ -class PayoutResponseCard(object):
│ │ +class MobileCardAccountResponse(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │ -        "card_brand": "str",
│ │ -        "card_type": "str",
│ │ +        "acct_type": "str",
│ │          "expiration": "str",
│ │          "holder": "str",
│ │ -        "issuer": "str",
│ │          "issuing_country_code": "str",
│ │          "masked_pan": "str",
│ │ +        "token": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │ -        "card_brand": "card_brand",
│ │ -        "card_type": "card_type",
│ │ +        "acct_type": "acct_type",
│ │          "expiration": "expiration",
│ │          "holder": "holder",
│ │ -        "issuer": "issuer",
│ │ -        "issuing_country_code": "issuing_country_code",
│ │ -        "masked_pan": "masked_pan",
│ │ +        "issuing_country_code": "issuingCountryCode",
│ │ +        "masked_pan": "maskedPan",
│ │ +        "token": "token",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │ -        card_brand=None,
│ │ -        card_type=None,
│ │ +        acct_type=None,
│ │          expiration=None,
│ │          holder=None,
│ │ -        issuer=None,
│ │          issuing_country_code=None,
│ │          masked_pan=None,
│ │ +        token=None,
│ │      ):  # noqa: E501
│ │ -        """PayoutResponseCard - a model defined in Swagger"""  # noqa: E501
│ │ +        """MobileCardAccountResponse - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._card_brand = None
│ │ -        self._card_type = None
│ │ +        self._acct_type = None
│ │          self._expiration = None
│ │          self._holder = None
│ │ -        self._issuer = None
│ │          self._issuing_country_code = None
│ │          self._masked_pan = None
│ │ +        self._token = None
│ │          self.discriminator = None
│ │  
│ │ -        if card_brand is not None:
│ │ -            self.card_brand = card_brand
│ │ -        if card_type is not None:
│ │ -            self.card_type = card_type
│ │ +        if acct_type is not None:
│ │ +            self.acct_type = acct_type
│ │          if expiration is not None:
│ │              self.expiration = expiration
│ │          if holder is not None:
│ │              self.holder = holder
│ │ -        if issuer is not None:
│ │ -            self.issuer = issuer
│ │          if issuing_country_code is not None:
│ │              self.issuing_country_code = issuing_country_code
│ │          if masked_pan is not None:
│ │              self.masked_pan = masked_pan
│ │ +        if token is not None:
│ │ +            self.token = token
│ │  
│ │      @property
│ │ -    def card_brand(self):
│ │ -        """Gets the card_brand of this PayoutResponseCard.  # noqa: E501
│ │ +    def acct_type(self):
│ │ +        """Gets the acct_type of this MobileCardAccountResponse.  # noqa: E501
│ │  
│ │ -        Card brand  # noqa: E501
│ │  
│ │ -        :return: The card_brand of this PayoutResponseCard.  # noqa: E501
│ │ +        :return: The acct_type of this MobileCardAccountResponse.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._card_brand
│ │ +        return self._acct_type
│ │  
│ │ -    @card_brand.setter
│ │ -    def card_brand(self, card_brand):
│ │ -        """Sets the card_brand of this PayoutResponseCard.
│ │ +    @acct_type.setter
│ │ +    def acct_type(self, acct_type):
│ │ +        """Sets the acct_type of this MobileCardAccountResponse.
│ │  
│ │ -        Card brand  # noqa: E501
│ │  
│ │ -        :param card_brand: The card_brand of this PayoutResponseCard.  # noqa: E501
│ │ +        :param acct_type: The acct_type of this MobileCardAccountResponse.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │ -        self._card_brand = card_brand
│ │ -
│ │ -    class CardType(object):
│ │ -        DEBIT = "DEBIT"
│ │ -        CREDIT = "CREDIT"
│ │ -        PREPAID = "PREPAID"
│ │ -        OTHER = "OTHER"
│ │ -        UNKNOWN = "UNKNOWN"
│ │ -
│ │ -    @property
│ │ -    def card_type(self):
│ │ -        """Gets the card_type of this PayoutResponseCard.  # noqa: E501
│ │ -
│ │ -        Card type  # noqa: E501
│ │ -
│ │ -        :return: The card_type of this PayoutResponseCard.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._card_type
│ │ -
│ │ -    @card_type.setter
│ │ -    def card_type(self, card_type):
│ │ -        """Sets the card_type of this PayoutResponseCard.
│ │ -
│ │ -        Card type  # noqa: E501
│ │ -
│ │ -        :param card_type: The card_type of this PayoutResponseCard.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -        allowed_values = [
│ │ -            "DEBIT",
│ │ -            "CREDIT",
│ │ -            "PREPAID",
│ │ -            "OTHER",
│ │ -            "UNKNOWN",
│ │ -        ]  # noqa: E501
│ │ -        if card_type not in allowed_values:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `card_type` ({0}), must be one of {1}".format(  # noqa: E501
│ │ -                    card_type, allowed_values
│ │ -                )
│ │ -            )
│ │ -
│ │ -        self._card_type = card_type
│ │ +        self._acct_type = acct_type
│ │  
│ │      @property
│ │      def expiration(self):
│ │ -        """Gets the expiration of this PayoutResponseCard.  # noqa: E501
│ │ +        """Gets the expiration of this MobileCardAccountResponse.  # noqa: E501
│ │  
│ │          Customer’s card expiration date. Format: `mm/yyyy`  # noqa: E501
│ │  
│ │ -        :return: The expiration of this PayoutResponseCard.  # noqa: E501
│ │ +        :return: The expiration of this MobileCardAccountResponse.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._expiration
│ │  
│ │      @expiration.setter
│ │      def expiration(self, expiration):
│ │ -        """Sets the expiration of this PayoutResponseCard.
│ │ +        """Sets the expiration of this MobileCardAccountResponse.
│ │  
│ │          Customer’s card expiration date. Format: `mm/yyyy`  # noqa: E501
│ │  
│ │ -        :param expiration: The expiration of this PayoutResponseCard.  # noqa: E501
│ │ +        :param expiration: The expiration of this MobileCardAccountResponse.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._expiration = expiration
│ │  
│ │      @property
│ │      def holder(self):
│ │ -        """Gets the holder of this PayoutResponseCard.  # noqa: E501
│ │ +        """Gets the holder of this MobileCardAccountResponse.  # noqa: E501
│ │  
│ │          Customer's cardholder name. Any valid cardholder name. Not present by default, ask CardPay manager to enable it if needed.  # noqa: E501
│ │  
│ │ -        :return: The holder of this PayoutResponseCard.  # noqa: E501
│ │ +        :return: The holder of this MobileCardAccountResponse.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._holder
│ │  
│ │      @holder.setter
│ │      def holder(self, holder):
│ │ -        """Sets the holder of this PayoutResponseCard.
│ │ +        """Sets the holder of this MobileCardAccountResponse.
│ │  
│ │          Customer's cardholder name. Any valid cardholder name. Not present by default, ask CardPay manager to enable it if needed.  # noqa: E501
│ │  
│ │ -        :param holder: The holder of this PayoutResponseCard.  # noqa: E501
│ │ +        :param holder: The holder of this MobileCardAccountResponse.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._holder = holder
│ │  
│ │      @property
│ │ -    def issuer(self):
│ │ -        """Gets the issuer of this PayoutResponseCard.  # noqa: E501
│ │ -
│ │ -        Card issuer  # noqa: E501
│ │ -
│ │ -        :return: The issuer of this PayoutResponseCard.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._issuer
│ │ -
│ │ -    @issuer.setter
│ │ -    def issuer(self, issuer):
│ │ -        """Sets the issuer of this PayoutResponseCard.
│ │ -
│ │ -        Card issuer  # noqa: E501
│ │ -
│ │ -        :param issuer: The issuer of this PayoutResponseCard.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._issuer = issuer
│ │ -
│ │ -    @property
│ │      def issuing_country_code(self):
│ │ -        """Gets the issuing_country_code of this PayoutResponseCard.  # noqa: E501
│ │ +        """Gets the issuing_country_code of this MobileCardAccountResponse.  # noqa: E501
│ │  
│ │          Country code of issuing card country  # noqa: E501
│ │  
│ │ -        :return: The issuing_country_code of this PayoutResponseCard.  # noqa: E501
│ │ +        :return: The issuing_country_code of this MobileCardAccountResponse.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._issuing_country_code
│ │  
│ │      @issuing_country_code.setter
│ │      def issuing_country_code(self, issuing_country_code):
│ │ -        """Sets the issuing_country_code of this PayoutResponseCard.
│ │ +        """Sets the issuing_country_code of this MobileCardAccountResponse.
│ │  
│ │          Country code of issuing card country  # noqa: E501
│ │  
│ │ -        :param issuing_country_code: The issuing_country_code of this PayoutResponseCard.  # noqa: E501
│ │ +        :param issuing_country_code: The issuing_country_code of this MobileCardAccountResponse.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._issuing_country_code = issuing_country_code
│ │  
│ │      @property
│ │      def masked_pan(self):
│ │ -        """Gets the masked_pan of this PayoutResponseCard.  # noqa: E501
│ │ +        """Gets the masked_pan of this MobileCardAccountResponse.  # noqa: E501
│ │  
│ │ -        Masked PAN (shows first 6 digits and 4 last digits of the PAN)  # noqa: E501
│ │ +        Masked PAN (shows first 6 digits and 4 last digits)  # noqa: E501
│ │  
│ │ -        :return: The masked_pan of this PayoutResponseCard.  # noqa: E501
│ │ +        :return: The masked_pan of this MobileCardAccountResponse.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._masked_pan
│ │  
│ │      @masked_pan.setter
│ │      def masked_pan(self, masked_pan):
│ │ -        """Sets the masked_pan of this PayoutResponseCard.
│ │ +        """Sets the masked_pan of this MobileCardAccountResponse.
│ │  
│ │ -        Masked PAN (shows first 6 digits and 4 last digits of the PAN)  # noqa: E501
│ │ +        Masked PAN (shows first 6 digits and 4 last digits)  # noqa: E501
│ │  
│ │ -        :param masked_pan: The masked_pan of this PayoutResponseCard.  # noqa: E501
│ │ +        :param masked_pan: The masked_pan of this MobileCardAccountResponse.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._masked_pan = masked_pan
│ │  
│ │ +    @property
│ │ +    def token(self):
│ │ +        """Gets the token of this MobileCardAccountResponse.  # noqa: E501
│ │ +
│ │ +        Generated card token value. Token can be returned only for successful transactions (not for declined transactions). For payment: PaymentResponsePaymentData, for recurring: RecurringResponseRecurringData.   # noqa: E501
│ │ +
│ │ +        :return: The token of this MobileCardAccountResponse.  # noqa: E501
│ │ +        :rtype: str
│ │ +        """
│ │ +        return self._token
│ │ +
│ │ +    @token.setter
│ │ +    def token(self, token):
│ │ +        """Sets the token of this MobileCardAccountResponse.
│ │ +
│ │ +        Generated card token value. Token can be returned only for successful transactions (not for declined transactions). For payment: PaymentResponsePaymentData, for recurring: RecurringResponseRecurringData.   # noqa: E501
│ │ +
│ │ +        :param token: The token of this MobileCardAccountResponse.  # noqa: E501
│ │ +        :type: str
│ │ +        """
│ │ +
│ │ +        self._token = token
│ │ +
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │              if isinstance(value, list):
│ │ @@ -287,15 +236,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(PayoutResponseCard, dict):
│ │ +        if issubclass(MobileCardAccountResponse, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -303,15 +252,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, PayoutResponseCard):
│ │ +        if not isinstance(other, MobileCardAccountResponse):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/payout_response_card_account.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payout_response_card_account.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payout_response_cryptocurrency_account.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payout_response_cryptocurrency_account.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payout_response_customer.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payout_response_customer.py
│ │┄ Files 20% similar despite different names
│ │ @@ -26,52 +26,32 @@
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │ -    swagger_types = {
│ │ -        "email": "str",
│ │ -        "id": "str",
│ │ -        "ip_country": "str",
│ │ -        "phone": "str",
│ │ -        "user_agent": "str",
│ │ -    }
│ │ -
│ │ -    attribute_map = {
│ │ -        "email": "email",
│ │ -        "id": "id",
│ │ -        "ip_country": "ip_country",
│ │ -        "phone": "phone",
│ │ -        "user_agent": "user_agent",
│ │ -    }
│ │ -
│ │ -    def __init__(
│ │ -        self, email=None, id=None, ip_country=None, phone=None, user_agent=None
│ │ -    ):  # noqa: E501
│ │ +    swagger_types = {"email": "str", "id": "str", "phone": "str"}
│ │ +
│ │ +    attribute_map = {"email": "email", "id": "id", "phone": "phone"}
│ │ +
│ │ +    def __init__(self, email=None, id=None, phone=None):  # noqa: E501
│ │          """PayoutResponseCustomer - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._email = None
│ │          self._id = None
│ │ -        self._ip_country = None
│ │          self._phone = None
│ │ -        self._user_agent = None
│ │          self.discriminator = None
│ │  
│ │          if email is not None:
│ │              self.email = email
│ │          if id is not None:
│ │              self.id = id
│ │ -        if ip_country is not None:
│ │ -            self.ip_country = ip_country
│ │          if phone is not None:
│ │              self.phone = phone
│ │ -        if user_agent is not None:
│ │ -            self.user_agent = user_agent
│ │  
│ │      @property
│ │      def email(self):
│ │          """Gets the email of this PayoutResponseCustomer.  # noqa: E501
│ │  
│ │          Customer's e-mail address, here can be value returned from payment method - in case then in Merchant request `customer.email` wasn't presented  # noqa: E501
│ │  
│ │ @@ -112,37 +92,14 @@
│ │          :param id: The id of this PayoutResponseCustomer.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._id = id
│ │  
│ │      @property
│ │ -    def ip_country(self):
│ │ -        """Gets the ip_country of this PayoutResponseCustomer.  # noqa: E501
│ │ -
│ │ -        Customer country by IP  # noqa: E501
│ │ -
│ │ -        :return: The ip_country of this PayoutResponseCustomer.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._ip_country
│ │ -
│ │ -    @ip_country.setter
│ │ -    def ip_country(self, ip_country):
│ │ -        """Sets the ip_country of this PayoutResponseCustomer.
│ │ -
│ │ -        Customer country by IP  # noqa: E501
│ │ -
│ │ -        :param ip_country: The ip_country of this PayoutResponseCustomer.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._ip_country = ip_country
│ │ -
│ │ -    @property
│ │      def phone(self):
│ │          """Gets the phone of this PayoutResponseCustomer.  # noqa: E501
│ │  
│ │          Customer's phone  # noqa: E501
│ │  
│ │          :return: The phone of this PayoutResponseCustomer.  # noqa: E501
│ │          :rtype: str
│ │ @@ -157,37 +114,14 @@
│ │  
│ │          :param phone: The phone of this PayoutResponseCustomer.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._phone = phone
│ │  
│ │ -    @property
│ │ -    def user_agent(self):
│ │ -        """Gets the user_agent of this PayoutResponseCustomer.  # noqa: E501
│ │ -
│ │ -        User agent  # noqa: E501
│ │ -
│ │ -        :return: The user_agent of this PayoutResponseCustomer.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._user_agent
│ │ -
│ │ -    @user_agent.setter
│ │ -    def user_agent(self, user_agent):
│ │ -        """Sets the user_agent of this PayoutResponseCustomer.
│ │ -
│ │ -        User agent  # noqa: E501
│ │ -
│ │ -        :param user_agent: The user_agent of this PayoutResponseCustomer.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._user_agent = user_agent
│ │ -
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │              if isinstance(value, list):
│ │   --- cardpay-3.45.8/cardpay/model/payout_response_e_wallet_account.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payout_response_e_wallet_account.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payout_response_payout_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payout_response_payout_data.py
│ │┄ Files 5% similar despite different names
│ │ @@ -33,58 +33,54 @@
│ │      swagger_types = {
│ │          "amount": "float",
│ │          "arn": "str",
│ │          "created": "str",
│ │          "currency": "str",
│ │          "decline_code": "str",
│ │          "decline_reason": "str",
│ │ -        "extended_decline_reason": "str",
│ │          "id": "str",
│ │          "note": "str",
│ │          "rrn": "str",
│ │          "status": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │          "amount": "amount",
│ │          "arn": "arn",
│ │          "created": "created",
│ │          "currency": "currency",
│ │          "decline_code": "decline_code",
│ │          "decline_reason": "decline_reason",
│ │ -        "extended_decline_reason": "extended_decline_reason",
│ │          "id": "id",
│ │          "note": "note",
│ │          "rrn": "rrn",
│ │          "status": "status",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │          amount=None,
│ │          arn=None,
│ │          created=None,
│ │          currency=None,
│ │          decline_code=None,
│ │          decline_reason=None,
│ │ -        extended_decline_reason=None,
│ │          id=None,
│ │          note=None,
│ │          rrn=None,
│ │          status=None,
│ │      ):  # noqa: E501
│ │          """PayoutResponsePayoutData - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._amount = None
│ │          self._arn = None
│ │          self._created = None
│ │          self._currency = None
│ │          self._decline_code = None
│ │          self._decline_reason = None
│ │ -        self._extended_decline_reason = None
│ │          self._id = None
│ │          self._note = None
│ │          self._rrn = None
│ │          self._status = None
│ │          self.discriminator = None
│ │  
│ │          if amount is not None:
│ │ @@ -95,16 +91,14 @@
│ │              self.created = created
│ │          if currency is not None:
│ │              self.currency = currency
│ │          if decline_code is not None:
│ │              self.decline_code = decline_code
│ │          if decline_reason is not None:
│ │              self.decline_reason = decline_reason
│ │ -        if extended_decline_reason is not None:
│ │ -            self.extended_decline_reason = extended_decline_reason
│ │          if id is not None:
│ │              self.id = id
│ │          if note is not None:
│ │              self.note = note
│ │          if rrn is not None:
│ │              self.rrn = rrn
│ │          if status is not None:
│ │ @@ -245,37 +239,14 @@
│ │          :param decline_reason: The decline_reason of this PayoutResponsePayoutData.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._decline_reason = decline_reason
│ │  
│ │      @property
│ │ -    def extended_decline_reason(self):
│ │ -        """Gets the extended_decline_reason of this PayoutResponsePayoutData.  # noqa: E501
│ │ -
│ │ -        Original decline reason. Can be presented in responses if original network response code is presented and option is enabled for Merchant. Not presented by default, ask Unlimint manager to enable it if needed.  # noqa: E501
│ │ -
│ │ -        :return: The extended_decline_reason of this PayoutResponsePayoutData.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._extended_decline_reason
│ │ -
│ │ -    @extended_decline_reason.setter
│ │ -    def extended_decline_reason(self, extended_decline_reason):
│ │ -        """Sets the extended_decline_reason of this PayoutResponsePayoutData.
│ │ -
│ │ -        Original decline reason. Can be presented in responses if original network response code is presented and option is enabled for Merchant. Not presented by default, ask Unlimint manager to enable it if needed.  # noqa: E501
│ │ -
│ │ -        :param extended_decline_reason: The extended_decline_reason of this PayoutResponsePayoutData.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._extended_decline_reason = extended_decline_reason
│ │ -
│ │ -    @property
│ │      def id(self):
│ │          """Gets the id of this PayoutResponsePayoutData.  # noqa: E501
│ │  
│ │          CardPay's payout id  # noqa: E501
│ │  
│ │          :return: The id of this PayoutResponsePayoutData.  # noqa: E501
│ │          :rtype: str
│ │   --- cardpay-3.45.8/cardpay/model/payout_update_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payout_update_request.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payout_update_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payout_update_response.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/payouts_list.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payouts_list.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/pix_account_details_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/recurring_response_filing.py
│ │┄ Files 17% similar despite different names
│ │ @@ -13,65 +13,62 @@
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │  
│ │ -class PixAccountDetailsRequest(object):
│ │ +class RecurringResponseFiling(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │ -    swagger_types = {"customer_identity": "str"}
│ │ +    swagger_types = {"id": "str"}
│ │  
│ │ -    attribute_map = {"customer_identity": "customer_identity"}
│ │ +    attribute_map = {"id": "id"}
│ │  
│ │ -    def __init__(self, customer_identity=None):  # noqa: E501
│ │ -        """PixAccountDetailsRequest - a model defined in Swagger"""  # noqa: E501
│ │ +    def __init__(self, id=None):  # noqa: E501
│ │ +        """RecurringResponseFiling - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._customer_identity = None
│ │ +        self._id = None
│ │          self.discriminator = None
│ │  
│ │ -        self.customer_identity = customer_identity
│ │ +        if id is not None:
│ │ +            self.id = id
│ │  
│ │      @property
│ │ -    def customer_identity(self):
│ │ -        """Gets the customer_identity of this PixAccountDetailsRequest.  # noqa: E501
│ │ +    def id(self):
│ │ +        """Gets the id of this RecurringResponseFiling.  # noqa: E501
│ │  
│ │ -        Customer identity  # noqa: E501
│ │ +        CardPay's Card filing id (token format). For *UpdatedSubscriptionData*: filing id that replaced the previous one. Mandatory for `CHANGE_FILING` operation only.  # noqa: E501
│ │  
│ │ -        :return: The customer_identity of this PixAccountDetailsRequest.  # noqa: E501
│ │ +        :return: The id of this RecurringResponseFiling.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._customer_identity
│ │ +        return self._id
│ │  
│ │ -    @customer_identity.setter
│ │ -    def customer_identity(self, customer_identity):
│ │ -        """Sets the customer_identity of this PixAccountDetailsRequest.
│ │ +    @id.setter
│ │ +    def id(self, id):
│ │ +        """Sets the id of this RecurringResponseFiling.
│ │  
│ │ -        Customer identity  # noqa: E501
│ │ +        CardPay's Card filing id (token format). For *UpdatedSubscriptionData*: filing id that replaced the previous one. Mandatory for `CHANGE_FILING` operation only.  # noqa: E501
│ │  
│ │ -        :param customer_identity: The customer_identity of this PixAccountDetailsRequest.  # noqa: E501
│ │ +        :param id: The id of this RecurringResponseFiling.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if customer_identity is None:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `customer_identity`, must not be `None`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._customer_identity = customer_identity
│ │ +        self._id = id
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -89,15 +86,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(PixAccountDetailsRequest, dict):
│ │ +        if issubclass(RecurringResponseFiling, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -105,15 +102,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, PixAccountDetailsRequest):
│ │ +        if not isinstance(other, RecurringResponseFiling):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/pix_account_details_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/transaction_request.py
│ │┄ Files 17% similar despite different names
│ │ @@ -12,65 +12,68 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ -from cardpay.model.ewallet_account import EwalletAccount  # noqa: F401,E501
│ │ +from cardpay.model.request import Request  # noqa: F401,E501
│ │  
│ │  
│ │ -class PixAccountDetailsResponse(object):
│ │ +class TransactionRequest(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │ -    swagger_types = {"ewallet_account": "EwalletAccount"}
│ │ +    swagger_types = {"request": "Request"}
│ │  
│ │ -    attribute_map = {"ewallet_account": "ewallet_account"}
│ │ +    attribute_map = {"request": "request"}
│ │  
│ │ -    def __init__(self, ewallet_account=None):  # noqa: E501
│ │ -        """PixAccountDetailsResponse - a model defined in Swagger"""  # noqa: E501
│ │ +    def __init__(self, request=None):  # noqa: E501
│ │ +        """TransactionRequest - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._ewallet_account = None
│ │ +        self._request = None
│ │          self.discriminator = None
│ │  
│ │ -        if ewallet_account is not None:
│ │ -            self.ewallet_account = ewallet_account
│ │ +        self.request = request
│ │  
│ │      @property
│ │ -    def ewallet_account(self):
│ │ -        """Gets the ewallet_account of this PixAccountDetailsResponse.  # noqa: E501
│ │ +    def request(self):
│ │ +        """Gets the request of this TransactionRequest.  # noqa: E501
│ │  
│ │ -        An object containing customer account details  # noqa: E501
│ │ +        Request  # noqa: E501
│ │  
│ │ -        :return: The ewallet_account of this PixAccountDetailsResponse.  # noqa: E501
│ │ -        :rtype: EwalletAccount
│ │ +        :return: The request of this TransactionRequest.  # noqa: E501
│ │ +        :rtype: Request
│ │          """
│ │ -        return self._ewallet_account
│ │ +        return self._request
│ │  
│ │ -    @ewallet_account.setter
│ │ -    def ewallet_account(self, ewallet_account):
│ │ -        """Sets the ewallet_account of this PixAccountDetailsResponse.
│ │ +    @request.setter
│ │ +    def request(self, request):
│ │ +        """Sets the request of this TransactionRequest.
│ │  
│ │ -        An object containing customer account details  # noqa: E501
│ │ +        Request  # noqa: E501
│ │  
│ │ -        :param ewallet_account: The ewallet_account of this PixAccountDetailsResponse.  # noqa: E501
│ │ -        :type: EwalletAccount
│ │ +        :param request: The request of this TransactionRequest.  # noqa: E501
│ │ +        :type: Request
│ │          """
│ │ +        if request is None:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `request`, must not be `None`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._ewallet_account = ewallet_account
│ │ +        self._request = request
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -88,15 +91,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(PixAccountDetailsResponse, dict):
│ │ +        if issubclass(TransactionRequest, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -104,15 +107,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, PixAccountDetailsResponse):
│ │ +        if not isinstance(other, TransactionRequest):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/plan.py
│ ├── +++ cardpay-3.6.21/cardpay/model/plan.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/plan_data_list.py
│ ├── +++ cardpay-3.6.21/cardpay/model/plan_data_list.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/report.py
│ ├── +++ cardpay-3.6.21/cardpay/model/response_plan_data.py
│ │┄ Files 20% similar despite different names
│ │ @@ -13,342 +13,326 @@
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │  
│ │ -class Report(object):
│ │ +class ResponsePlanData(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │ -        "download_url": "str",
│ │ -        "file_id": "str",
│ │ -        "file_name": "str",
│ │ -        "hash_sum": "str",
│ │ -        "report_type": "str",
│ │ -        "settlement_date": "str",
│ │ -        "settlement_id": "int",
│ │ -        "size": "int",
│ │ +        "id": "str",
│ │ +        "name": "str",
│ │ +        "created": "datetime",
│ │          "status": "str",
│ │ -        "website_name": "str",
│ │ +        "period": "str",
│ │ +        "interval": "int",
│ │ +        "currency": "str",
│ │ +        "amount": "float",
│ │ +        "retries": "int",
│ │      }
│ │  
│ │      attribute_map = {
│ │ -        "download_url": "download_url",
│ │ -        "file_id": "file_id",
│ │ -        "file_name": "file_name",
│ │ -        "hash_sum": "hash_sum",
│ │ -        "report_type": "report_type",
│ │ -        "settlement_date": "settlement_date",
│ │ -        "settlement_id": "settlement_id",
│ │ -        "size": "size",
│ │ +        "id": "id",
│ │ +        "name": "name",
│ │ +        "created": "created",
│ │          "status": "status",
│ │ -        "website_name": "website_name",
│ │ +        "period": "period",
│ │ +        "interval": "interval",
│ │ +        "currency": "currency",
│ │ +        "amount": "amount",
│ │ +        "retries": "retries",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │ -        download_url=None,
│ │ -        file_id=None,
│ │ -        file_name=None,
│ │ -        hash_sum=None,
│ │ -        report_type=None,
│ │ -        settlement_date=None,
│ │ -        settlement_id=None,
│ │ -        size=None,
│ │ +        id=None,
│ │ +        name=None,
│ │ +        created=None,
│ │          status=None,
│ │ -        website_name=None,
│ │ +        period=None,
│ │ +        interval=None,
│ │ +        currency=None,
│ │ +        amount=None,
│ │ +        retries=None,
│ │      ):  # noqa: E501
│ │ -        """Report - a model defined in Swagger"""  # noqa: E501
│ │ +        """ResponsePlanData - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._download_url = None
│ │ -        self._file_id = None
│ │ -        self._file_name = None
│ │ -        self._hash_sum = None
│ │ -        self._report_type = None
│ │ -        self._settlement_date = None
│ │ -        self._settlement_id = None
│ │ -        self._size = None
│ │ +        self._id = None
│ │ +        self._name = None
│ │ +        self._created = None
│ │          self._status = None
│ │ -        self._website_name = None
│ │ +        self._period = None
│ │ +        self._interval = None
│ │ +        self._currency = None
│ │ +        self._amount = None
│ │ +        self._retries = None
│ │          self.discriminator = None
│ │  
│ │ -        if download_url is not None:
│ │ -            self.download_url = download_url
│ │ -        if file_id is not None:
│ │ -            self.file_id = file_id
│ │ -        if file_name is not None:
│ │ -            self.file_name = file_name
│ │ -        if hash_sum is not None:
│ │ -            self.hash_sum = hash_sum
│ │ -        if report_type is not None:
│ │ -            self.report_type = report_type
│ │ -        if settlement_date is not None:
│ │ -            self.settlement_date = settlement_date
│ │ -        if settlement_id is not None:
│ │ -            self.settlement_id = settlement_id
│ │ -        if size is not None:
│ │ -            self.size = size
│ │ +        if id is not None:
│ │ +            self.id = id
│ │ +        if name is not None:
│ │ +            self.name = name
│ │ +        if created is not None:
│ │ +            self.created = created
│ │          if status is not None:
│ │              self.status = status
│ │ -        if website_name is not None:
│ │ -            self.website_name = website_name
│ │ +        if period is not None:
│ │ +            self.period = period
│ │ +        if interval is not None:
│ │ +            self.interval = interval
│ │ +        if currency is not None:
│ │ +            self.currency = currency
│ │ +        if amount is not None:
│ │ +            self.amount = amount
│ │ +        if retries is not None:
│ │ +            self.retries = retries
│ │  
│ │      @property
│ │ -    def download_url(self):
│ │ -        """Gets the download_url of this Report.  # noqa: E501
│ │ +    def id(self):
│ │ +        """Gets the id of this ResponsePlanData.  # noqa: E501
│ │  
│ │ -        Link to archive downloading. Link is available for 24 hours  # noqa: E501
│ │ +        ID of created plan  # noqa: E501
│ │  
│ │ -        :return: The download_url of this Report.  # noqa: E501
│ │ +        :return: The id of this ResponsePlanData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._download_url
│ │ +        return self._id
│ │  
│ │ -    @download_url.setter
│ │ -    def download_url(self, download_url):
│ │ -        """Sets the download_url of this Report.
│ │ +    @id.setter
│ │ +    def id(self, id):
│ │ +        """Sets the id of this ResponsePlanData.
│ │  
│ │ -        Link to archive downloading. Link is available for 24 hours  # noqa: E501
│ │ +        ID of created plan  # noqa: E501
│ │  
│ │ -        :param download_url: The download_url of this Report.  # noqa: E501
│ │ +        :param id: The id of this ResponsePlanData.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │ -        self._download_url = download_url
│ │ +        self._id = id
│ │  
│ │      @property
│ │ -    def file_id(self):
│ │ -        """Gets the file_id of this Report.  # noqa: E501
│ │ +    def name(self):
│ │ +        """Gets the name of this ResponsePlanData.  # noqa: E501
│ │  
│ │ -        The identifier of report's file  # noqa: E501
│ │ +        Name of created plan  # noqa: E501
│ │  
│ │ -        :return: The file_id of this Report.  # noqa: E501
│ │ +        :return: The name of this ResponsePlanData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._file_id
│ │ +        return self._name
│ │  
│ │ -    @file_id.setter
│ │ -    def file_id(self, file_id):
│ │ -        """Sets the file_id of this Report.
│ │ +    @name.setter
│ │ +    def name(self, name):
│ │ +        """Sets the name of this ResponsePlanData.
│ │  
│ │ -        The identifier of report's file  # noqa: E501
│ │ +        Name of created plan  # noqa: E501
│ │  
│ │ -        :param file_id: The file_id of this Report.  # noqa: E501
│ │ +        :param name: The name of this ResponsePlanData.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │ -        self._file_id = file_id
│ │ +        self._name = name
│ │  
│ │      @property
│ │ -    def file_name(self):
│ │ -        """Gets the file_name of this Report.  # noqa: E501
│ │ +    def created(self):
│ │ +        """Gets the created of this ResponsePlanData.  # noqa: E501
│ │  
│ │ -        The file name  # noqa: E501
│ │ +        Creation time, [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format  # noqa: E501
│ │  
│ │ -        :return: The file_name of this Report.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The created of this ResponsePlanData.  # noqa: E501
│ │ +        :rtype: datetime
│ │          """
│ │ -        return self._file_name
│ │ +        return self._created
│ │  
│ │ -    @file_name.setter
│ │ -    def file_name(self, file_name):
│ │ -        """Sets the file_name of this Report.
│ │ +    @created.setter
│ │ +    def created(self, created):
│ │ +        """Sets the created of this ResponsePlanData.
│ │  
│ │ -        The file name  # noqa: E501
│ │ +        Creation time, [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format  # noqa: E501
│ │  
│ │ -        :param file_name: The file_name of this Report.  # noqa: E501
│ │ -        :type: str
│ │ +        :param created: The created of this ResponsePlanData.  # noqa: E501
│ │ +        :type: datetime
│ │          """
│ │  
│ │ -        self._file_name = file_name
│ │ -
│ │ -    @property
│ │ -    def hash_sum(self):
│ │ -        """Gets the hash_sum of this Report.  # noqa: E501
│ │ -
│ │ -        Hash sum of file (sha256)  # noqa: E501
│ │ -
│ │ -        :return: The hash_sum of this Report.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._hash_sum
│ │ -
│ │ -    @hash_sum.setter
│ │ -    def hash_sum(self, hash_sum):
│ │ -        """Sets the hash_sum of this Report.
│ │ -
│ │ -        Hash sum of file (sha256)  # noqa: E501
│ │ -
│ │ -        :param hash_sum: The hash_sum of this Report.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ +        self._created = created
│ │  
│ │ -        self._hash_sum = hash_sum
│ │ +    class Status(object):
│ │ +        ACTIVE = "ACTIVE"
│ │ +        INACTIVE = "INACTIVE"
│ │  
│ │      @property
│ │ -    def report_type(self):
│ │ -        """Gets the report_type of this Report.  # noqa: E501
│ │ +    def status(self):
│ │ +        """Gets the status of this ResponsePlanData.  # noqa: E501
│ │  
│ │ -        Specific report type, one of: \"regular_settlement\", \"icpp_settlement\"  # noqa: E501
│ │ +        Status of created plan: 'ACTIVE' or 'INACTIVE'  # noqa: E501
│ │  
│ │ -        :return: The report_type of this Report.  # noqa: E501
│ │ +        :return: The status of this ResponsePlanData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._report_type
│ │ +        return self._status
│ │  
│ │ -    @report_type.setter
│ │ -    def report_type(self, report_type):
│ │ -        """Sets the report_type of this Report.
│ │ +    @status.setter
│ │ +    def status(self, status):
│ │ +        """Sets the status of this ResponsePlanData.
│ │  
│ │ -        Specific report type, one of: \"regular_settlement\", \"icpp_settlement\"  # noqa: E501
│ │ +        Status of created plan: 'ACTIVE' or 'INACTIVE'  # noqa: E501
│ │  
│ │ -        :param report_type: The report_type of this Report.  # noqa: E501
│ │ +        :param status: The status of this ResponsePlanData.  # noqa: E501
│ │          :type: str
│ │          """
│ │ +        allowed_values = ["ACTIVE", "INACTIVE"]  # noqa: E501
│ │ +        if status not in allowed_values:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `status` ({0}), must be one of {1}".format(  # noqa: E501
│ │ +                    status, allowed_values
│ │ +                )
│ │ +            )
│ │ +
│ │ +        self._status = status
│ │  
│ │ -        self._report_type = report_type
│ │ +    class Period(object):
│ │ +        MINUTE = "minute"
│ │ +        DAY = "day"
│ │ +        WEEK = "week"
│ │ +        MONTH = "month"
│ │ +        YEAR = "year"
│ │  
│ │      @property
│ │ -    def settlement_date(self):
│ │ -        """Gets the settlement_date of this Report.  # noqa: E501
│ │ +    def period(self):
│ │ +        """Gets the period of this ResponsePlanData.  # noqa: E501
│ │  
│ │ -        Date of settlement. The format is yyyy-MM-dd  # noqa: E501
│ │ +        Period of created plan  # noqa: E501
│ │  
│ │ -        :return: The settlement_date of this Report.  # noqa: E501
│ │ +        :return: The period of this ResponsePlanData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._settlement_date
│ │ +        return self._period
│ │  
│ │ -    @settlement_date.setter
│ │ -    def settlement_date(self, settlement_date):
│ │ -        """Sets the settlement_date of this Report.
│ │ +    @period.setter
│ │ +    def period(self, period):
│ │ +        """Sets the period of this ResponsePlanData.
│ │  
│ │ -        Date of settlement. The format is yyyy-MM-dd  # noqa: E501
│ │ +        Period of created plan  # noqa: E501
│ │  
│ │ -        :param settlement_date: The settlement_date of this Report.  # noqa: E501
│ │ +        :param period: The period of this ResponsePlanData.  # noqa: E501
│ │          :type: str
│ │          """
│ │ +        allowed_values = ["minute", "day", "week", "month", "year"]  # noqa: E501
│ │ +        if period not in allowed_values:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `period` ({0}), must be one of {1}".format(  # noqa: E501
│ │ +                    period, allowed_values
│ │ +                )
│ │ +            )
│ │  
│ │ -        self._settlement_date = settlement_date
│ │ +        self._period = period
│ │  
│ │      @property
│ │ -    def settlement_id(self):
│ │ -        """Gets the settlement_id of this Report.  # noqa: E501
│ │ +    def interval(self):
│ │ +        """Gets the interval of this ResponsePlanData.  # noqa: E501
│ │  
│ │ -        The identifier of settlement. Can be the same for several objects in sample  # noqa: E501
│ │ +        Interval of plan  # noqa: E501
│ │  
│ │ -        :return: The settlement_id of this Report.  # noqa: E501
│ │ +        :return: The interval of this ResponsePlanData.  # noqa: E501
│ │          :rtype: int
│ │          """
│ │ -        return self._settlement_id
│ │ +        return self._interval
│ │  
│ │ -    @settlement_id.setter
│ │ -    def settlement_id(self, settlement_id):
│ │ -        """Sets the settlement_id of this Report.
│ │ +    @interval.setter
│ │ +    def interval(self, interval):
│ │ +        """Sets the interval of this ResponsePlanData.
│ │  
│ │ -        The identifier of settlement. Can be the same for several objects in sample  # noqa: E501
│ │ +        Interval of plan  # noqa: E501
│ │  
│ │ -        :param settlement_id: The settlement_id of this Report.  # noqa: E501
│ │ +        :param interval: The interval of this ResponsePlanData.  # noqa: E501
│ │          :type: int
│ │          """
│ │  
│ │ -        self._settlement_id = settlement_id
│ │ +        self._interval = interval
│ │  
│ │      @property
│ │ -    def size(self):
│ │ -        """Gets the size of this Report.  # noqa: E501
│ │ +    def currency(self):
│ │ +        """Gets the currency of this ResponsePlanData.  # noqa: E501
│ │  
│ │ -        Size of file in bytes  # noqa: E501
│ │ +        [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of created plan  # noqa: E501
│ │  
│ │ -        :return: The size of this Report.  # noqa: E501
│ │ -        :rtype: int
│ │ +        :return: The currency of this ResponsePlanData.  # noqa: E501
│ │ +        :rtype: str
│ │          """
│ │ -        return self._size
│ │ +        return self._currency
│ │  
│ │ -    @size.setter
│ │ -    def size(self, size):
│ │ -        """Sets the size of this Report.
│ │ +    @currency.setter
│ │ +    def currency(self, currency):
│ │ +        """Sets the currency of this ResponsePlanData.
│ │  
│ │ -        Size of file in bytes  # noqa: E501
│ │ +        [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of created plan  # noqa: E501
│ │  
│ │ -        :param size: The size of this Report.  # noqa: E501
│ │ -        :type: int
│ │ +        :param currency: The currency of this ResponsePlanData.  # noqa: E501
│ │ +        :type: str
│ │          """
│ │  
│ │ -        self._size = size
│ │ -
│ │ -    class Status(object):
│ │ -        IN_PROGRESS = "IN_PROGRESS"
│ │ -        COMPLETED = "COMPLETED"
│ │ -        FAILED = "FAILED"
│ │ +        self._currency = currency
│ │  
│ │      @property
│ │ -    def status(self):
│ │ -        """Gets the status of this Report.  # noqa: E501
│ │ +    def amount(self):
│ │ +        """Gets the amount of this ResponsePlanData.  # noqa: E501
│ │  
│ │ -        One of statuses:  \"IN_PROGRESS\"  \"COMPLETED\"  \"FAILED\"  # noqa: E501
│ │ +        The total amount of created plan  # noqa: E501
│ │  
│ │ -        :return: The status of this Report.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The amount of this ResponsePlanData.  # noqa: E501
│ │ +        :rtype: float
│ │          """
│ │ -        return self._status
│ │ +        return self._amount
│ │  
│ │ -    @status.setter
│ │ -    def status(self, status):
│ │ -        """Sets the status of this Report.
│ │ +    @amount.setter
│ │ +    def amount(self, amount):
│ │ +        """Sets the amount of this ResponsePlanData.
│ │  
│ │ -        One of statuses:  \"IN_PROGRESS\"  \"COMPLETED\"  \"FAILED\"  # noqa: E501
│ │ +        The total amount of created plan  # noqa: E501
│ │  
│ │ -        :param status: The status of this Report.  # noqa: E501
│ │ -        :type: str
│ │ +        :param amount: The amount of this ResponsePlanData.  # noqa: E501
│ │ +        :type: float
│ │          """
│ │ -        allowed_values = ["IN_PROGRESS", "COMPLETED", "FAILED"]  # noqa: E501
│ │ -        if status not in allowed_values:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `status` ({0}), must be one of {1}".format(  # noqa: E501
│ │ -                    status, allowed_values
│ │ -                )
│ │ -            )
│ │  
│ │ -        self._status = status
│ │ +        self._amount = amount
│ │  
│ │      @property
│ │ -    def website_name(self):
│ │ -        """Gets the website_name of this Report.  # noqa: E501
│ │ +    def retries(self):
│ │ +        """Gets the retries of this ResponsePlanData.  # noqa: E501
│ │  
│ │ -        Name of website  # noqa: E501
│ │ +        Number of daily basis retry attempts in case of payment has not been captured successfully, from 1 to 15 attempts  # noqa: E501
│ │  
│ │ -        :return: The website_name of this Report.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The retries of this ResponsePlanData.  # noqa: E501
│ │ +        :rtype: int
│ │          """
│ │ -        return self._website_name
│ │ +        return self._retries
│ │  
│ │ -    @website_name.setter
│ │ -    def website_name(self, website_name):
│ │ -        """Sets the website_name of this Report.
│ │ +    @retries.setter
│ │ +    def retries(self, retries):
│ │ +        """Sets the retries of this ResponsePlanData.
│ │  
│ │ -        Name of website  # noqa: E501
│ │ +        Number of daily basis retry attempts in case of payment has not been captured successfully, from 1 to 15 attempts  # noqa: E501
│ │  
│ │ -        :param website_name: The website_name of this Report.  # noqa: E501
│ │ -        :type: str
│ │ +        :param retries: The retries of this ResponsePlanData.  # noqa: E501
│ │ +        :type: int
│ │          """
│ │  
│ │ -        self._website_name = website_name
│ │ +        self._retries = retries
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -366,15 +350,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(Report, dict):
│ │ +        if issubclass(ResponsePlanData, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -382,15 +366,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, Report):
│ │ +        if not isinstance(other, ResponsePlanData):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/plan_update_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/subscription_update_request.py
│ │┄ Files 12% similar despite different names
│ │ @@ -12,21 +12,21 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ -from cardpay.model.plan_update_request_plan_data import (
│ │ -    PlanUpdateRequestPlanData,
│ │ -)  # noqa: F401,E501
│ │  from cardpay.model.request import Request  # noqa: F401,E501
│ │ +from cardpay.model.subscription_update_request_subscription_data import (
│ │ +    SubscriptionUpdateRequestSubscriptionData,
│ │ +)  # noqa: F401,E501
│ │  
│ │  
│ │ -class PlanUpdateRequest(object):
│ │ +class SubscriptionUpdateRequest(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │ @@ -34,126 +34,129 @@
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │          "request": "Request",
│ │          "operation": "str",
│ │ -        "plan_data": "PlanUpdateRequestPlanData",
│ │ +        "subscription_data": "SubscriptionUpdateRequestSubscriptionData",
│ │      }
│ │  
│ │      attribute_map = {
│ │          "request": "request",
│ │          "operation": "operation",
│ │ -        "plan_data": "plan_data",
│ │ +        "subscription_data": "subscription_data",
│ │      }
│ │  
│ │ -    def __init__(self, request=None, operation=None, plan_data=None):  # noqa: E501
│ │ -        """PlanUpdateRequest - a model defined in Swagger"""  # noqa: E501
│ │ +    def __init__(
│ │ +        self, request=None, operation=None, subscription_data=None
│ │ +    ):  # noqa: E501
│ │ +        """SubscriptionUpdateRequest - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._request = None
│ │          self._operation = None
│ │ -        self._plan_data = None
│ │ +        self._subscription_data = None
│ │          self.discriminator = None
│ │  
│ │          self.request = request
│ │          self.operation = operation
│ │ -        self.plan_data = plan_data
│ │ +        self.subscription_data = subscription_data
│ │  
│ │      @property
│ │      def request(self):
│ │ -        """Gets the request of this PlanUpdateRequest.  # noqa: E501
│ │ +        """Gets the request of this SubscriptionUpdateRequest.  # noqa: E501
│ │  
│ │          Request  # noqa: E501
│ │  
│ │ -        :return: The request of this PlanUpdateRequest.  # noqa: E501
│ │ +        :return: The request of this SubscriptionUpdateRequest.  # noqa: E501
│ │          :rtype: Request
│ │          """
│ │          return self._request
│ │  
│ │      @request.setter
│ │      def request(self, request):
│ │ -        """Sets the request of this PlanUpdateRequest.
│ │ +        """Sets the request of this SubscriptionUpdateRequest.
│ │  
│ │          Request  # noqa: E501
│ │  
│ │ -        :param request: The request of this PlanUpdateRequest.  # noqa: E501
│ │ +        :param request: The request of this SubscriptionUpdateRequest.  # noqa: E501
│ │          :type: Request
│ │          """
│ │          if request is None:
│ │              raise ValueError(
│ │                  "Invalid value for `request`, must not be `None`"
│ │              )  # noqa: E501
│ │  
│ │          self._request = request
│ │  
│ │      class Operation(object):
│ │          CHANGE_STATUS = "CHANGE_STATUS"
│ │ -        RENAME = "RENAME"
│ │ +        REPAYMENT = "REPAYMENT"
│ │ +        CHANGE_FILING = "CHANGE_FILING"
│ │  
│ │      @property
│ │      def operation(self):
│ │ -        """Gets the operation of this PlanUpdateRequest.  # noqa: E501
│ │ +        """Gets the operation of this SubscriptionUpdateRequest.  # noqa: E501
│ │  
│ │ -        `CHANGE_STATUS` value to initiate operation for status changing. `RENAME` value to initiate operation for plan renaming.  # noqa: E501
│ │ +        Set operation on subscription: `CHANGE_STATUS` - initiates status changing `REPAYMENT` - **for installment only**; makes repayment in advance `CHANGE_FILING` - replaces card binding via new filing id.  # noqa: E501
│ │  
│ │ -        :return: The operation of this PlanUpdateRequest.  # noqa: E501
│ │ +        :return: The operation of this SubscriptionUpdateRequest.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._operation
│ │  
│ │      @operation.setter
│ │      def operation(self, operation):
│ │ -        """Sets the operation of this PlanUpdateRequest.
│ │ +        """Sets the operation of this SubscriptionUpdateRequest.
│ │  
│ │ -        `CHANGE_STATUS` value to initiate operation for status changing. `RENAME` value to initiate operation for plan renaming.  # noqa: E501
│ │ +        Set operation on subscription: `CHANGE_STATUS` - initiates status changing `REPAYMENT` - **for installment only**; makes repayment in advance `CHANGE_FILING` - replaces card binding via new filing id.  # noqa: E501
│ │  
│ │ -        :param operation: The operation of this PlanUpdateRequest.  # noqa: E501
│ │ +        :param operation: The operation of this SubscriptionUpdateRequest.  # noqa: E501
│ │          :type: str
│ │          """
│ │          if operation is None:
│ │              raise ValueError(
│ │                  "Invalid value for `operation`, must not be `None`"
│ │              )  # noqa: E501
│ │ -        allowed_values = ["CHANGE_STATUS", "RENAME"]  # noqa: E501
│ │ +        allowed_values = ["CHANGE_STATUS", "REPAYMENT", "CHANGE_FILING"]  # noqa: E501
│ │          if operation not in allowed_values:
│ │              raise ValueError(
│ │                  "Invalid value for `operation` ({0}), must be one of {1}".format(  # noqa: E501
│ │                      operation, allowed_values
│ │                  )
│ │              )
│ │  
│ │          self._operation = operation
│ │  
│ │      @property
│ │ -    def plan_data(self):
│ │ -        """Gets the plan_data of this PlanUpdateRequest.  # noqa: E501
│ │ +    def subscription_data(self):
│ │ +        """Gets the subscription_data of this SubscriptionUpdateRequest.  # noqa: E501
│ │  
│ │ -        Plan data  # noqa: E501
│ │ +        Subscription data  # noqa: E501
│ │  
│ │ -        :return: The plan_data of this PlanUpdateRequest.  # noqa: E501
│ │ -        :rtype: PlanUpdateRequestPlanData
│ │ +        :return: The subscription_data of this SubscriptionUpdateRequest.  # noqa: E501
│ │ +        :rtype: SubscriptionUpdateRequestSubscriptionData
│ │          """
│ │ -        return self._plan_data
│ │ +        return self._subscription_data
│ │  
│ │ -    @plan_data.setter
│ │ -    def plan_data(self, plan_data):
│ │ -        """Sets the plan_data of this PlanUpdateRequest.
│ │ +    @subscription_data.setter
│ │ +    def subscription_data(self, subscription_data):
│ │ +        """Sets the subscription_data of this SubscriptionUpdateRequest.
│ │  
│ │ -        Plan data  # noqa: E501
│ │ +        Subscription data  # noqa: E501
│ │  
│ │ -        :param plan_data: The plan_data of this PlanUpdateRequest.  # noqa: E501
│ │ -        :type: PlanUpdateRequestPlanData
│ │ +        :param subscription_data: The subscription_data of this SubscriptionUpdateRequest.  # noqa: E501
│ │ +        :type: SubscriptionUpdateRequestSubscriptionData
│ │          """
│ │ -        if plan_data is None:
│ │ +        if subscription_data is None:
│ │              raise ValueError(
│ │ -                "Invalid value for `plan_data`, must not be `None`"
│ │ +                "Invalid value for `subscription_data`, must not be `None`"
│ │              )  # noqa: E501
│ │  
│ │ -        self._plan_data = plan_data
│ │ +        self._subscription_data = subscription_data
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -171,15 +174,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(PlanUpdateRequest, dict):
│ │ +        if issubclass(SubscriptionUpdateRequest, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -187,15 +190,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, PlanUpdateRequest):
│ │ +        if not isinstance(other, SubscriptionUpdateRequest):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/plan_update_request_plan_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/plan_update_request_plan_data.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/plan_update_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/plan_update_response.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/recurring_callback.py
│ ├── +++ cardpay-3.6.21/cardpay/model/recurring_callback.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/recurring_confirm3ds_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/recurring_confirm3ds_request.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/recurring_creation_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/recurring_creation_request.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/recurring_customer.py
│ ├── +++ cardpay-3.6.21/cardpay/model/recurring_customer.py
│ │┄ Files 5% similar despite different names
│ │ @@ -32,77 +32,65 @@
│ │      """
│ │      swagger_types = {
│ │          "email": "str",
│ │          "home_phone": "str",
│ │          "id": "str",
│ │          "identity": "str",
│ │          "ip": "str",
│ │ -        "ip_country": "str",
│ │          "locale": "str",
│ │          "phone": "str",
│ │ -        "user_agent": "str",
│ │          "work_phone": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │          "email": "email",
│ │          "home_phone": "home_phone",
│ │          "id": "id",
│ │          "identity": "identity",
│ │          "ip": "ip",
│ │ -        "ip_country": "ip_country",
│ │          "locale": "locale",
│ │          "phone": "phone",
│ │ -        "user_agent": "user_agent",
│ │          "work_phone": "work_phone",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │          email=None,
│ │          home_phone=None,
│ │          id=None,
│ │          identity=None,
│ │          ip=None,
│ │ -        ip_country=None,
│ │          locale=None,
│ │          phone=None,
│ │ -        user_agent=None,
│ │          work_phone=None,
│ │      ):  # noqa: E501
│ │          """RecurringCustomer - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._email = None
│ │          self._home_phone = None
│ │          self._id = None
│ │          self._identity = None
│ │          self._ip = None
│ │ -        self._ip_country = None
│ │          self._locale = None
│ │          self._phone = None
│ │ -        self._user_agent = None
│ │          self._work_phone = None
│ │          self.discriminator = None
│ │  
│ │          self.email = email
│ │          if home_phone is not None:
│ │              self.home_phone = home_phone
│ │          self.id = id
│ │          if identity is not None:
│ │              self.identity = identity
│ │          if ip is not None:
│ │              self.ip = ip
│ │ -        if ip_country is not None:
│ │ -            self.ip_country = ip_country
│ │          if locale is not None:
│ │              self.locale = locale
│ │          if phone is not None:
│ │              self.phone = phone
│ │ -        if user_agent is not None:
│ │ -            self.user_agent = user_agent
│ │          if work_phone is not None:
│ │              self.work_phone = work_phone
│ │  
│ │      @property
│ │      def email(self):
│ │          """Gets the email of this RecurringCustomer.  # noqa: E501
│ │  
│ │ @@ -126,17 +114,17 @@
│ │              raise ValueError(
│ │                  "Invalid value for `email`, must not be `None`"
│ │              )  # noqa: E501
│ │          if email is not None and len(email) > 256:
│ │              raise ValueError(
│ │                  "Invalid value for `email`, length must be less than or equal to `256`"
│ │              )  # noqa: E501
│ │ -        if email is not None and len(email) < 3:
│ │ +        if email is not None and len(email) < 1:
│ │              raise ValueError(
│ │ -                "Invalid value for `email`, length must be greater than or equal to `3`"
│ │ +                "Invalid value for `email`, length must be greater than or equal to `1`"
│ │              )  # noqa: E501
│ │  
│ │          self._email = email
│ │  
│ │      @property
│ │      def home_phone(self):
│ │          """Gets the home_phone of this RecurringCustomer.  # noqa: E501
│ │ @@ -251,37 +239,14 @@
│ │  
│ │          :param ip: The ip of this RecurringCustomer.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._ip = ip
│ │  
│ │ -    @property
│ │ -    def ip_country(self):
│ │ -        """Gets the ip_country of this RecurringCustomer.  # noqa: E501
│ │ -
│ │ -        Customer country by IP  # noqa: E501
│ │ -
│ │ -        :return: The ip_country of this RecurringCustomer.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._ip_country
│ │ -
│ │ -    @ip_country.setter
│ │ -    def ip_country(self, ip_country):
│ │ -        """Sets the ip_country of this RecurringCustomer.
│ │ -
│ │ -        Customer country by IP  # noqa: E501
│ │ -
│ │ -        :param ip_country: The ip_country of this RecurringCustomer.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._ip_country = ip_country
│ │ -
│ │      class Locale(object):
│ │          RU = "ru"
│ │          EN = "en"
│ │          ZH = "zh"
│ │          JA = "ja"
│ │  
│ │      @property
│ │ @@ -342,37 +307,14 @@
│ │              raise ValueError(
│ │                  "Invalid value for `phone`, length must be greater than or equal to `8`"
│ │              )  # noqa: E501
│ │  
│ │          self._phone = phone
│ │  
│ │      @property
│ │ -    def user_agent(self):
│ │ -        """Gets the user_agent of this RecurringCustomer.  # noqa: E501
│ │ -
│ │ -        User agent  # noqa: E501
│ │ -
│ │ -        :return: The user_agent of this RecurringCustomer.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._user_agent
│ │ -
│ │ -    @user_agent.setter
│ │ -    def user_agent(self, user_agent):
│ │ -        """Sets the user_agent of this RecurringCustomer.
│ │ -
│ │ -        User agent  # noqa: E501
│ │ -
│ │ -        :param user_agent: The user_agent of this RecurringCustomer.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._user_agent = user_agent
│ │ -
│ │ -    @property
│ │      def work_phone(self):
│ │          """Gets the work_phone of this RecurringCustomer.  # noqa: E501
│ │  
│ │          The home phone number provided by the Cardholder. Required (if available) unless market or regional mandate restricts sending this information. Characters Format: string (10-18 symbols) country code + Subscriber number. Refer to ITU-E.164 for additional information on format and length.  # noqa: E501
│ │  
│ │          :return: The work_phone of this RecurringCustomer.  # noqa: E501
│ │          :rtype: str
│ │   --- cardpay-3.45.8/cardpay/model/recurring_execute_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/recurring_execute_request.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/recurring_filter_parameters.py
│ ├── +++ cardpay-3.6.21/cardpay/model/recurring_filter_parameters.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/recurring_gateway_creation_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/recurring_gateway_creation_response.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/recurring_gateway_response_recurring_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/recurring_gateway_response_recurring_data.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/recurring_patch_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/recurring_patch_request.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/recurring_plan_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/recurring_plan_request.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/recurring_plan_request_plan_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/recurring_plan_request_plan_data.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/recurring_plan_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/recurring_plan_response.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/recurring_request_filing.py
│ ├── +++ cardpay-3.6.21/cardpay/model/refund_request_payment_data.py
│ │┄ Files 14% similar despite different names
│ │ @@ -13,15 +13,15 @@
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │  
│ │ -class RecurringRequestFiling(object):
│ │ +class RefundRequestPaymentData(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │ @@ -31,50 +31,43 @@
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {"id": "str"}
│ │  
│ │      attribute_map = {"id": "id"}
│ │  
│ │      def __init__(self, id=None):  # noqa: E501
│ │ -        """RecurringRequestFiling - a model defined in Swagger"""  # noqa: E501
│ │ +        """RefundRequestPaymentData - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._id = None
│ │          self.discriminator = None
│ │  
│ │ -        if id is not None:
│ │ -            self.id = id
│ │ +        self.id = id
│ │  
│ │      @property
│ │      def id(self):
│ │ -        """Gets the id of this RecurringRequestFiling.  # noqa: E501
│ │ +        """Gets the id of this RefundRequestPaymentData.  # noqa: E501
│ │  
│ │ -        Filing id. For recurring: repeating 'filing.id' was sent before, should be sent in all recurring requests besides first recurring request. First recurring request should be sent without 'filing.id' attribute. Mandatory only for recurring continue (not first) request.  # noqa: E501
│ │ +        ID of captured payment id (or recurring id - for BANKCARD payment method only) to be refunded  # noqa: E501
│ │  
│ │ -        :return: The id of this RecurringRequestFiling.  # noqa: E501
│ │ +        :return: The id of this RefundRequestPaymentData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._id
│ │  
│ │      @id.setter
│ │      def id(self, id):
│ │ -        """Sets the id of this RecurringRequestFiling.
│ │ +        """Sets the id of this RefundRequestPaymentData.
│ │  
│ │ -        Filing id. For recurring: repeating 'filing.id' was sent before, should be sent in all recurring requests besides first recurring request. First recurring request should be sent without 'filing.id' attribute. Mandatory only for recurring continue (not first) request.  # noqa: E501
│ │ +        ID of captured payment id (or recurring id - for BANKCARD payment method only) to be refunded  # noqa: E501
│ │  
│ │ -        :param id: The id of this RecurringRequestFiling.  # noqa: E501
│ │ +        :param id: The id of this RefundRequestPaymentData.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if id is not None and len(id) > 32:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `id`, length must be less than or equal to `32`"
│ │ -            )  # noqa: E501
│ │ -        if id is not None and len(id) < 0:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `id`, length must be greater than or equal to `0`"
│ │ -            )  # noqa: E501
│ │ +        if id is None:
│ │ +            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
│ │  
│ │          self._id = id
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │ @@ -94,15 +87,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(RecurringRequestFiling, dict):
│ │ +        if issubclass(RefundRequestPaymentData, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -110,15 +103,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, RecurringRequestFiling):
│ │ +        if not isinstance(other, RefundRequestPaymentData):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/recurring_request_recurring_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_request_payment_data.py
│ │┄ Files 25% similar despite different names
│ │ @@ -12,506 +12,341 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ -from cardpay.model.plan import Plan  # noqa: F401,E501
│ │ -from cardpay.model.recurring_request_filing import (
│ │ -    RecurringRequestFiling,
│ │ -)  # noqa: F401,E501
│ │  
│ │ -
│ │ -class RecurringRequestRecurringData(object):
│ │ +class PaymentRequestPaymentData(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │          "amount": "float",
│ │ +        "authentication_request": "bool",
│ │          "currency": "str",
│ │          "dynamic_descriptor": "str",
│ │ -        "filing": "RecurringRequestFiling",
│ │ +        "encrypted_data": "str",
│ │          "generate_token": "bool",
│ │ -        "initiator": "str",
│ │ -        "interval": "int",
│ │          "note": "str",
│ │ -        "payments": "int",
│ │ -        "period": "str",
│ │ -        "plan": "Plan",
│ │          "preauth": "bool",
│ │ -        "retries": "int",
│ │ -        "subscription_start": "datetime",
│ │ +        "trans_type": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │          "amount": "amount",
│ │ +        "authentication_request": "authentication_request",
│ │          "currency": "currency",
│ │          "dynamic_descriptor": "dynamic_descriptor",
│ │ -        "filing": "filing",
│ │ +        "encrypted_data": "encrypted_data",
│ │          "generate_token": "generate_token",
│ │ -        "initiator": "initiator",
│ │ -        "interval": "interval",
│ │          "note": "note",
│ │ -        "payments": "payments",
│ │ -        "period": "period",
│ │ -        "plan": "plan",
│ │          "preauth": "preauth",
│ │ -        "retries": "retries",
│ │ -        "subscription_start": "subscription_start",
│ │ +        "trans_type": "trans_type",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │          amount=None,
│ │ +        authentication_request=None,
│ │          currency=None,
│ │          dynamic_descriptor=None,
│ │ -        filing=None,
│ │ +        encrypted_data=None,
│ │          generate_token=None,
│ │ -        initiator=None,
│ │ -        interval=None,
│ │          note=None,
│ │ -        payments=None,
│ │ -        period=None,
│ │ -        plan=None,
│ │          preauth=None,
│ │ -        retries=None,
│ │ -        subscription_start=None,
│ │ +        trans_type=None,
│ │      ):  # noqa: E501
│ │ -        """RecurringRequestRecurringData - a model defined in Swagger"""  # noqa: E501
│ │ +        """PaymentRequestPaymentData - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._amount = None
│ │ +        self._authentication_request = None
│ │          self._currency = None
│ │          self._dynamic_descriptor = None
│ │ -        self._filing = None
│ │ +        self._encrypted_data = None
│ │          self._generate_token = None
│ │ -        self._initiator = None
│ │ -        self._interval = None
│ │          self._note = None
│ │ -        self._payments = None
│ │ -        self._period = None
│ │ -        self._plan = None
│ │          self._preauth = None
│ │ -        self._retries = None
│ │ -        self._subscription_start = None
│ │ +        self._trans_type = None
│ │          self.discriminator = None
│ │  
│ │          if amount is not None:
│ │              self.amount = amount
│ │ -        if currency is not None:
│ │ -            self.currency = currency
│ │ +        if authentication_request is not None:
│ │ +            self.authentication_request = authentication_request
│ │ +        self.currency = currency
│ │          if dynamic_descriptor is not None:
│ │              self.dynamic_descriptor = dynamic_descriptor
│ │ -        if filing is not None:
│ │ -            self.filing = filing
│ │ +        if encrypted_data is not None:
│ │ +            self.encrypted_data = encrypted_data
│ │          if generate_token is not None:
│ │              self.generate_token = generate_token
│ │ -        if initiator is not None:
│ │ -            self.initiator = initiator
│ │ -        if interval is not None:
│ │ -            self.interval = interval
│ │          if note is not None:
│ │              self.note = note
│ │ -        if payments is not None:
│ │ -            self.payments = payments
│ │ -        if period is not None:
│ │ -            self.period = period
│ │ -        if plan is not None:
│ │ -            self.plan = plan
│ │          if preauth is not None:
│ │              self.preauth = preauth
│ │ -        if retries is not None:
│ │ -            self.retries = retries
│ │ -        if subscription_start is not None:
│ │ -            self.subscription_start = subscription_start
│ │ +        if trans_type is not None:
│ │ +            self.trans_type = trans_type
│ │  
│ │      @property
│ │      def amount(self):
│ │ -        """Gets the amount of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        """Gets the amount of this PaymentRequestPaymentData.  # noqa: E501
│ │  
│ │ -        The total transaction amount in selected currency with dot as a decimal separator, must be less than 100 millions  # noqa: E501
│ │ +        The total transaction amount in selected currency with dot as a decimal separator, must be less than 10 billion If 'payment_method' = `BITCOIN` then minimum order amount is approximately 0.003 bitcoins or its equivalent. The exact value should be provided by the account manager.  # noqa: E501
│ │  
│ │ -        :return: The amount of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :return: The amount of this PaymentRequestPaymentData.  # noqa: E501
│ │          :rtype: float
│ │          """
│ │          return self._amount
│ │  
│ │      @amount.setter
│ │      def amount(self, amount):
│ │ -        """Sets the amount of this RecurringRequestRecurringData.
│ │ +        """Sets the amount of this PaymentRequestPaymentData.
│ │  
│ │ -        The total transaction amount in selected currency with dot as a decimal separator, must be less than 100 millions  # noqa: E501
│ │ +        The total transaction amount in selected currency with dot as a decimal separator, must be less than 10 billion If 'payment_method' = `BITCOIN` then minimum order amount is approximately 0.003 bitcoins or its equivalent. The exact value should be provided by the account manager.  # noqa: E501
│ │  
│ │ -        :param amount: The amount of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :param amount: The amount of this PaymentRequestPaymentData.  # noqa: E501
│ │          :type: float
│ │          """
│ │  
│ │          self._amount = amount
│ │  
│ │      @property
│ │ +    def authentication_request(self):
│ │ +        """Gets the authentication_request of this PaymentRequestPaymentData.  # noqa: E501
│ │ +
│ │ +        If set to `true`, amount must not be presented in request, no payment will be made, only cardholder authentication will be performed. Also can be used to generate token. *(for BANKCARD payment method only)*  # noqa: E501
│ │ +
│ │ +        :return: The authentication_request of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :rtype: bool
│ │ +        """
│ │ +        return self._authentication_request
│ │ +
│ │ +    @authentication_request.setter
│ │ +    def authentication_request(self, authentication_request):
│ │ +        """Sets the authentication_request of this PaymentRequestPaymentData.
│ │ +
│ │ +        If set to `true`, amount must not be presented in request, no payment will be made, only cardholder authentication will be performed. Also can be used to generate token. *(for BANKCARD payment method only)*  # noqa: E501
│ │ +
│ │ +        :param authentication_request: The authentication_request of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :type: bool
│ │ +        """
│ │ +
│ │ +        self._authentication_request = authentication_request
│ │ +
│ │ +    @property
│ │      def currency(self):
│ │ -        """Gets the currency of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        """Gets the currency of this PaymentRequestPaymentData.  # noqa: E501
│ │  
│ │          [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code  # noqa: E501
│ │  
│ │ -        :return: The currency of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :return: The currency of this PaymentRequestPaymentData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._currency
│ │  
│ │      @currency.setter
│ │      def currency(self, currency):
│ │ -        """Sets the currency of this RecurringRequestRecurringData.
│ │ +        """Sets the currency of this PaymentRequestPaymentData.
│ │  
│ │          [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code  # noqa: E501
│ │  
│ │ -        :param currency: The currency of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :param currency: The currency of this PaymentRequestPaymentData.  # noqa: E501
│ │          :type: str
│ │          """
│ │ +        if currency is None:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `currency`, must not be `None`"
│ │ +            )  # noqa: E501
│ │  
│ │          self._currency = currency
│ │  
│ │      @property
│ │      def dynamic_descriptor(self):
│ │ -        """Gets the dynamic_descriptor of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        """Gets the dynamic_descriptor of this PaymentRequestPaymentData.  # noqa: E501
│ │  
│ │ -        Short description of the service or product, must be enabled by CardPay manager to be used.  # noqa: E501
│ │ +        Short description of the service or product, must be enabled by CardPay manager to be used *(for BANKCARD payment method only)*  # noqa: E501
│ │  
│ │ -        :return: The dynamic_descriptor of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :return: The dynamic_descriptor of this PaymentRequestPaymentData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._dynamic_descriptor
│ │  
│ │      @dynamic_descriptor.setter
│ │      def dynamic_descriptor(self, dynamic_descriptor):
│ │ -        """Sets the dynamic_descriptor of this RecurringRequestRecurringData.
│ │ +        """Sets the dynamic_descriptor of this PaymentRequestPaymentData.
│ │  
│ │ -        Short description of the service or product, must be enabled by CardPay manager to be used.  # noqa: E501
│ │ +        Short description of the service or product, must be enabled by CardPay manager to be used *(for BANKCARD payment method only)*  # noqa: E501
│ │  
│ │ -        :param dynamic_descriptor: The dynamic_descriptor of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :param dynamic_descriptor: The dynamic_descriptor of this PaymentRequestPaymentData.  # noqa: E501
│ │          :type: str
│ │          """
│ │          if dynamic_descriptor is not None and len(dynamic_descriptor) > 25:
│ │              raise ValueError(
│ │                  "Invalid value for `dynamic_descriptor`, length must be less than or equal to `25`"
│ │              )  # noqa: E501
│ │          if dynamic_descriptor is not None and len(dynamic_descriptor) < 0:
│ │              raise ValueError(
│ │                  "Invalid value for `dynamic_descriptor`, length must be greater than or equal to `0`"
│ │              )  # noqa: E501
│ │  
│ │          self._dynamic_descriptor = dynamic_descriptor
│ │  
│ │      @property
│ │ -    def filing(self):
│ │ -        """Gets the filing of this RecurringRequestRecurringData.  # noqa: E501
│ │ +    def encrypted_data(self):
│ │ +        """Gets the encrypted_data of this PaymentRequestPaymentData.  # noqa: E501
│ │  
│ │ -        Filing data, should be send in all recurring requests besides first recurring request First recurring request should be send without filing attribute  # noqa: E501
│ │ +        The encrypted payment credentials encoded in base64. *(for APPLEPAY payment method only)*  # noqa: E501
│ │  
│ │ -        :return: The filing of this RecurringRequestRecurringData.  # noqa: E501
│ │ -        :rtype: RecurringRequestFiling
│ │ +        :return: The encrypted_data of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :rtype: str
│ │          """
│ │ -        return self._filing
│ │ +        return self._encrypted_data
│ │  
│ │ -    @filing.setter
│ │ -    def filing(self, filing):
│ │ -        """Sets the filing of this RecurringRequestRecurringData.
│ │ +    @encrypted_data.setter
│ │ +    def encrypted_data(self, encrypted_data):
│ │ +        """Sets the encrypted_data of this PaymentRequestPaymentData.
│ │  
│ │ -        Filing data, should be send in all recurring requests besides first recurring request First recurring request should be send without filing attribute  # noqa: E501
│ │ +        The encrypted payment credentials encoded in base64. *(for APPLEPAY payment method only)*  # noqa: E501
│ │  
│ │ -        :param filing: The filing of this RecurringRequestRecurringData.  # noqa: E501
│ │ -        :type: RecurringRequestFiling
│ │ +        :param encrypted_data: The encrypted_data of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :type: str
│ │          """
│ │ +        if encrypted_data is not None and len(encrypted_data) > 10000:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `encrypted_data`, length must be less than or equal to `10000`"
│ │ +            )  # noqa: E501
│ │ +        if encrypted_data is not None and len(encrypted_data) < 0:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `encrypted_data`, length must be greater than or equal to `0`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._filing = filing
│ │ +        self._encrypted_data = encrypted_data
│ │  
│ │      @property
│ │      def generate_token(self):
│ │ -        """Gets the generate_token of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        """Gets the generate_token of this PaymentRequestPaymentData.  # noqa: E501
│ │  
│ │ -        This attribute can be received only in first recurring request. In all requests with recurring_id card.token can't be generated. If set to 'true', card token will be generated and returned in GET response. Will be generated only for successful transactions (not for declined).  # noqa: E501
│ │ +        If set to `true`, token will be generated and returned in the response. Token can be generated only for successful transactions (not for declined transactions) *(for BANKCARD payment method only)*  # noqa: E501
│ │  
│ │ -        :return: The generate_token of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :return: The generate_token of this PaymentRequestPaymentData.  # noqa: E501
│ │          :rtype: bool
│ │          """
│ │          return self._generate_token
│ │  
│ │      @generate_token.setter
│ │      def generate_token(self, generate_token):
│ │ -        """Sets the generate_token of this RecurringRequestRecurringData.
│ │ +        """Sets the generate_token of this PaymentRequestPaymentData.
│ │  
│ │ -        This attribute can be received only in first recurring request. In all requests with recurring_id card.token can't be generated. If set to 'true', card token will be generated and returned in GET response. Will be generated only for successful transactions (not for declined).  # noqa: E501
│ │ +        If set to `true`, token will be generated and returned in the response. Token can be generated only for successful transactions (not for declined transactions) *(for BANKCARD payment method only)*  # noqa: E501
│ │  
│ │ -        :param generate_token: The generate_token of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :param generate_token: The generate_token of this PaymentRequestPaymentData.  # noqa: E501
│ │          :type: bool
│ │          """
│ │  
│ │          self._generate_token = generate_token
│ │  
│ │      @property
│ │ -    def initiator(self):
│ │ -        """Gets the initiator of this RecurringRequestRecurringData.  # noqa: E501
│ │ -
│ │ -        Can be only 2 values: `mit` (merchant initiated transaction), `cit` (cardholder initiated transaction)  # noqa: E501
│ │ -
│ │ -        :return: The initiator of this RecurringRequestRecurringData.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._initiator
│ │ -
│ │ -    @initiator.setter
│ │ -    def initiator(self, initiator):
│ │ -        """Sets the initiator of this RecurringRequestRecurringData.
│ │ -
│ │ -        Can be only 2 values: `mit` (merchant initiated transaction), `cit` (cardholder initiated transaction)  # noqa: E501
│ │ -
│ │ -        :param initiator: The initiator of this RecurringRequestRecurringData.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -        if initiator is not None and not re.search(r"mit|cit", initiator):  # noqa: E501
│ │ -            raise ValueError(
│ │ -                r"Invalid value for `initiator`, must be a follow pattern or equal to `/mit|cit/`"
│ │ -            )  # noqa: E501
│ │ -
│ │ -        self._initiator = initiator
│ │ -
│ │ -    @property
│ │ -    def interval(self):
│ │ -        """Gets the interval of this RecurringRequestRecurringData.  # noqa: E501
│ │ -
│ │ -        Frequency interval of period, can be 1-365 depending on selected period value. Minimum value of period + interval can be 7 days / 1 week. Maximum value of period + interval plan can be 365 days / 52 weeks / 12 months / 1 year. 1-60 minutes - for **sandbox environment** and testing purpose only.  # noqa: E501
│ │ -
│ │ -        :return: The interval of this RecurringRequestRecurringData.  # noqa: E501
│ │ -        :rtype: int
│ │ -        """
│ │ -        return self._interval
│ │ -
│ │ -    @interval.setter
│ │ -    def interval(self, interval):
│ │ -        """Sets the interval of this RecurringRequestRecurringData.
│ │ -
│ │ -        Frequency interval of period, can be 1-365 depending on selected period value. Minimum value of period + interval can be 7 days / 1 week. Maximum value of period + interval plan can be 365 days / 52 weeks / 12 months / 1 year. 1-60 minutes - for **sandbox environment** and testing purpose only.  # noqa: E501
│ │ -
│ │ -        :param interval: The interval of this RecurringRequestRecurringData.  # noqa: E501
│ │ -        :type: int
│ │ -        """
│ │ -        if interval is not None and interval < 1:  # noqa: E501
│ │ -            raise ValueError(
│ │ -                "Invalid value for `interval`, must be a value greater than or equal to `1`"
│ │ -            )  # noqa: E501
│ │ -
│ │ -        self._interval = interval
│ │ -
│ │ -    @property
│ │      def note(self):
│ │ -        """Gets the note of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        """Gets the note of this PaymentRequestPaymentData.  # noqa: E501
│ │  
│ │ -        Note about the recurring that will not be displayed to customer.  # noqa: E501
│ │ +        Note about the transaction that will not be displayed to Customer  # noqa: E501
│ │  
│ │ -        :return: The note of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :return: The note of this PaymentRequestPaymentData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._note
│ │  
│ │      @note.setter
│ │      def note(self, note):
│ │ -        """Sets the note of this RecurringRequestRecurringData.
│ │ +        """Sets the note of this PaymentRequestPaymentData.
│ │  
│ │ -        Note about the recurring that will not be displayed to customer.  # noqa: E501
│ │ +        Note about the transaction that will not be displayed to Customer  # noqa: E501
│ │  
│ │ -        :param note: The note of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :param note: The note of this PaymentRequestPaymentData.  # noqa: E501
│ │          :type: str
│ │          """
│ │          if note is not None and len(note) > 100:
│ │              raise ValueError(
│ │                  "Invalid value for `note`, length must be less than or equal to `100`"
│ │              )  # noqa: E501
│ │          if note is not None and len(note) < 0:
│ │              raise ValueError(
│ │                  "Invalid value for `note`, length must be greater than or equal to `0`"
│ │              )  # noqa: E501
│ │  
│ │          self._note = note
│ │  
│ │      @property
│ │ -    def payments(self):
│ │ -        """Gets the payments of this RecurringRequestRecurringData.  # noqa: E501
│ │ -
│ │ -        Number of total payments to be charged per defined interval, can be 2-200.  # noqa: E501
│ │ -
│ │ -        :return: The payments of this RecurringRequestRecurringData.  # noqa: E501
│ │ -        :rtype: int
│ │ -        """
│ │ -        return self._payments
│ │ -
│ │ -    @payments.setter
│ │ -    def payments(self, payments):
│ │ -        """Sets the payments of this RecurringRequestRecurringData.
│ │ -
│ │ -        Number of total payments to be charged per defined interval, can be 2-200.  # noqa: E501
│ │ -
│ │ -        :param payments: The payments of this RecurringRequestRecurringData.  # noqa: E501
│ │ -        :type: int
│ │ -        """
│ │ -        if payments is not None and payments > 200:  # noqa: E501
│ │ -            raise ValueError(
│ │ -                "Invalid value for `payments`, must be a value less than or equal to `200`"
│ │ -            )  # noqa: E501
│ │ -        if payments is not None and payments < 2:  # noqa: E501
│ │ -            raise ValueError(
│ │ -                "Invalid value for `payments`, must be a value greater than or equal to `2`"
│ │ -            )  # noqa: E501
│ │ -
│ │ -        self._payments = payments
│ │ -
│ │ -    class Period(object):
│ │ -        MINUTE = "minute"
│ │ -        DAY = "day"
│ │ -        WEEK = "week"
│ │ -        MONTH = "month"
│ │ -        YEAR = "year"
│ │ -
│ │ -    @property
│ │ -    def period(self):
│ │ -        """Gets the period of this RecurringRequestRecurringData.  # noqa: E501
│ │ -
│ │ -        Initial period of recurring, can be `day`, `week`, `month`, `year`.  `minute` - for **sandbox environment** and testing purpose only.  # noqa: E501
│ │ -
│ │ -        :return: The period of this RecurringRequestRecurringData.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._period
│ │ -
│ │ -    @period.setter
│ │ -    def period(self, period):
│ │ -        """Sets the period of this RecurringRequestRecurringData.
│ │ -
│ │ -        Initial period of recurring, can be `day`, `week`, `month`, `year`.  `minute` - for **sandbox environment** and testing purpose only.  # noqa: E501
│ │ -
│ │ -        :param period: The period of this RecurringRequestRecurringData.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -        allowed_values = ["minute", "day", "week", "month", "year"]  # noqa: E501
│ │ -        if period not in allowed_values:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `period` ({0}), must be one of {1}".format(  # noqa: E501
│ │ -                    period, allowed_values
│ │ -                )
│ │ -            )
│ │ -
│ │ -        self._period = period
│ │ -
│ │ -    @property
│ │ -    def plan(self):
│ │ -        """Gets the plan of this RecurringRequestRecurringData.  # noqa: E501
│ │ -
│ │ -        Plan data  # noqa: E501
│ │ -
│ │ -        :return: The plan of this RecurringRequestRecurringData.  # noqa: E501
│ │ -        :rtype: Plan
│ │ -        """
│ │ -        return self._plan
│ │ -
│ │ -    @plan.setter
│ │ -    def plan(self, plan):
│ │ -        """Sets the plan of this RecurringRequestRecurringData.
│ │ -
│ │ -        Plan data  # noqa: E501
│ │ -
│ │ -        :param plan: The plan of this RecurringRequestRecurringData.  # noqa: E501
│ │ -        :type: Plan
│ │ -        """
│ │ -
│ │ -        self._plan = plan
│ │ -
│ │ -    @property
│ │      def preauth(self):
│ │ -        """Gets the preauth of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        """Gets the preauth of this PaymentRequestPaymentData.  # noqa: E501
│ │  
│ │ -        This parameter is allowed to be used only for first recurring payment. If set to `true`, the amount will not be captured but only blocked *(for BANKCARD payment method only)*.  # noqa: E501
│ │ +        If set to `true`, the amount will not be captured but only blocked. Payments with 'preauth' attribute will be captured automatically in 7 days from the time of creating the preauth transaction. *(for BANKCARD payment method only)*.  # noqa: E501
│ │  
│ │ -        :return: The preauth of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :return: The preauth of this PaymentRequestPaymentData.  # noqa: E501
│ │          :rtype: bool
│ │          """
│ │          return self._preauth
│ │  
│ │      @preauth.setter
│ │      def preauth(self, preauth):
│ │ -        """Sets the preauth of this RecurringRequestRecurringData.
│ │ +        """Sets the preauth of this PaymentRequestPaymentData.
│ │  
│ │ -        This parameter is allowed to be used only for first recurring payment. If set to `true`, the amount will not be captured but only blocked *(for BANKCARD payment method only)*.  # noqa: E501
│ │ +        If set to `true`, the amount will not be captured but only blocked. Payments with 'preauth' attribute will be captured automatically in 7 days from the time of creating the preauth transaction. *(for BANKCARD payment method only)*.  # noqa: E501
│ │  
│ │ -        :param preauth: The preauth of this RecurringRequestRecurringData.  # noqa: E501
│ │ +        :param preauth: The preauth of this PaymentRequestPaymentData.  # noqa: E501
│ │          :type: bool
│ │          """
│ │  
│ │          self._preauth = preauth
│ │  
│ │ -    @property
│ │ -    def retries(self):
│ │ -        """Gets the retries of this RecurringRequestRecurringData.  # noqa: E501
│ │ -
│ │ -        Number of daily basis retry attempts in case of payment has not been captured successfully, from 1 to 15 attempts can be specified.  # noqa: E501
│ │ -
│ │ -        :return: The retries of this RecurringRequestRecurringData.  # noqa: E501
│ │ -        :rtype: int
│ │ -        """
│ │ -        return self._retries
│ │ -
│ │ -    @retries.setter
│ │ -    def retries(self, retries):
│ │ -        """Sets the retries of this RecurringRequestRecurringData.
│ │ -
│ │ -        Number of daily basis retry attempts in case of payment has not been captured successfully, from 1 to 15 attempts can be specified.  # noqa: E501
│ │ -
│ │ -        :param retries: The retries of this RecurringRequestRecurringData.  # noqa: E501
│ │ -        :type: int
│ │ -        """
│ │ -        if retries is not None and retries > 15:  # noqa: E501
│ │ -            raise ValueError(
│ │ -                "Invalid value for `retries`, must be a value less than or equal to `15`"
│ │ -            )  # noqa: E501
│ │ -        if retries is not None and retries < 1:  # noqa: E501
│ │ -            raise ValueError(
│ │ -                "Invalid value for `retries`, must be a value greater than or equal to `1`"
│ │ -            )  # noqa: E501
│ │ -
│ │ -        self._retries = retries
│ │ +    class TransType(object):
│ │ +        _01 = "01"
│ │ +        _03 = "03"
│ │ +        _10 = "10"
│ │ +        _11 = "11"
│ │ +        _28 = "28"
│ │  
│ │      @property
│ │ -    def subscription_start(self):
│ │ -        """Gets the subscription_start of this RecurringRequestRecurringData.  # noqa: E501
│ │ +    def trans_type(self):
│ │ +        """Gets the trans_type of this PaymentRequestPaymentData.  # noqa: E501
│ │  
│ │ -        The date in yyyy-MM-dd format when subscription will actually become activated (grace period). Auth request will be created but Customer will be charged only when subscription start date comes. Leave it empty or specify the current date to activate subscription at once without any grace period applied.  # noqa: E501
│ │  
│ │ -        :return: The subscription_start of this RecurringRequestRecurringData.  # noqa: E501
│ │ -        :rtype: datetime
│ │ +        :return: The trans_type of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :rtype: str
│ │          """
│ │ -        return self._subscription_start
│ │ +        return self._trans_type
│ │  
│ │ -    @subscription_start.setter
│ │ -    def subscription_start(self, subscription_start):
│ │ -        """Sets the subscription_start of this RecurringRequestRecurringData.
│ │ +    @trans_type.setter
│ │ +    def trans_type(self, trans_type):
│ │ +        """Sets the trans_type of this PaymentRequestPaymentData.
│ │  
│ │ -        The date in yyyy-MM-dd format when subscription will actually become activated (grace period). Auth request will be created but Customer will be charged only when subscription start date comes. Leave it empty or specify the current date to activate subscription at once without any grace period applied.  # noqa: E501
│ │  
│ │ -        :param subscription_start: The subscription_start of this RecurringRequestRecurringData.  # noqa: E501
│ │ -        :type: datetime
│ │ +        :param trans_type: The trans_type of this PaymentRequestPaymentData.  # noqa: E501
│ │ +        :type: str
│ │          """
│ │ +        allowed_values = ["01", "03", "10", "11", "28"]  # noqa: E501
│ │ +        if trans_type not in allowed_values:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `trans_type` ({0}), must be one of {1}".format(  # noqa: E501
│ │ +                    trans_type, allowed_values
│ │ +                )
│ │ +            )
│ │  
│ │ -        self._subscription_start = subscription_start
│ │ +        self._trans_type = trans_type
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -529,15 +364,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(RecurringRequestRecurringData, dict):
│ │ +        if issubclass(PaymentRequestPaymentData, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -545,15 +380,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, RecurringRequestRecurringData):
│ │ +        if not isinstance(other, PaymentRequestPaymentData):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/recurring_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/mobile_payment_request.py
│ │┄ Files 26% similar despite different names
│ │ @@ -12,227 +12,279 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ -from cardpay.model.authentication_data import AuthenticationData  # noqa: F401,E501
│ │ -from cardpay.model.payment_response_card_account import (
│ │ -    PaymentResponseCardAccount,
│ │ +from cardpay.model.mobile_payment_merchant_order import (
│ │ +    MobilePaymentMerchantOrder,
│ │  )  # noqa: F401,E501
│ │ -from cardpay.model.recurring_customer import RecurringCustomer  # noqa: F401,E501
│ │ -from cardpay.model.recurring_response_merchant_order import (
│ │ -    RecurringResponseMerchantOrder,
│ │ +from cardpay.model.payment_request_card_account import (
│ │ +    PaymentRequestCardAccount,
│ │  )  # noqa: F401,E501
│ │ -from cardpay.model.recurring_response_recurring_data import (
│ │ -    RecurringResponseRecurringData,
│ │ +from cardpay.model.payment_request_customer import (
│ │ +    PaymentRequestCustomer,
│ │  )  # noqa: F401,E501
│ │ +from cardpay.model.payment_request_payment_data import (
│ │ +    PaymentRequestPaymentData,
│ │ +)  # noqa: F401,E501
│ │ +from cardpay.model.request import Request  # noqa: F401,E501
│ │ +from cardpay.model.return_urls import ReturnUrls  # noqa: F401,E501
│ │  
│ │  
│ │ -class RecurringResponse(object):
│ │ +class MobilePaymentRequest(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │ +        "request": "Request",
│ │ +        "card_account": "PaymentRequestCardAccount",
│ │ +        "customer": "PaymentRequestCustomer",
│ │ +        "merchant_order": "MobilePaymentMerchantOrder",
│ │ +        "payment_data": "PaymentRequestPaymentData",
│ │          "payment_method": "str",
│ │ -        "merchant_order": "RecurringResponseMerchantOrder",
│ │ -        "recurring_data": "RecurringResponseRecurringData",
│ │ -        "card_account": "PaymentResponseCardAccount",
│ │ -        "customer": "RecurringCustomer",
│ │ -        "authentication_data": "AuthenticationData",
│ │ +        "return_urls": "ReturnUrls",
│ │      }
│ │  
│ │      attribute_map = {
│ │ -        "payment_method": "payment_method",
│ │ -        "merchant_order": "merchant_order",
│ │ -        "recurring_data": "recurring_data",
│ │ +        "request": "request",
│ │          "card_account": "card_account",
│ │          "customer": "customer",
│ │ -        "authentication_data": "authentication_data",
│ │ +        "merchant_order": "merchant_order",
│ │ +        "payment_data": "payment_data",
│ │ +        "payment_method": "payment_method",
│ │ +        "return_urls": "return_urls",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │ -        payment_method=None,
│ │ -        merchant_order=None,
│ │ -        recurring_data=None,
│ │ +        request=None,
│ │          card_account=None,
│ │          customer=None,
│ │ -        authentication_data=None,
│ │ +        merchant_order=None,
│ │ +        payment_data=None,
│ │ +        payment_method=None,
│ │ +        return_urls=None,
│ │      ):  # noqa: E501
│ │ -        """RecurringResponse - a model defined in Swagger"""  # noqa: E501
│ │ +        """MobilePaymentRequest - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._payment_method = None
│ │ -        self._merchant_order = None
│ │ -        self._recurring_data = None
│ │ +        self._request = None
│ │          self._card_account = None
│ │          self._customer = None
│ │ -        self._authentication_data = None
│ │ +        self._merchant_order = None
│ │ +        self._payment_data = None
│ │ +        self._payment_method = None
│ │ +        self._return_urls = None
│ │          self.discriminator = None
│ │  
│ │ -        if payment_method is not None:
│ │ -            self.payment_method = payment_method
│ │ -        if merchant_order is not None:
│ │ -            self.merchant_order = merchant_order
│ │ -        if recurring_data is not None:
│ │ -            self.recurring_data = recurring_data
│ │ +        self.request = request
│ │          if card_account is not None:
│ │              self.card_account = card_account
│ │ -        if customer is not None:
│ │ -            self.customer = customer
│ │ -        if authentication_data is not None:
│ │ -            self.authentication_data = authentication_data
│ │ +        self.customer = customer
│ │ +        self.merchant_order = merchant_order
│ │ +        self.payment_data = payment_data
│ │ +        if payment_method is not None:
│ │ +            self.payment_method = payment_method
│ │ +        if return_urls is not None:
│ │ +            self.return_urls = return_urls
│ │  
│ │      @property
│ │ -    def payment_method(self):
│ │ -        """Gets the payment_method of this RecurringResponse.  # noqa: E501
│ │ +    def request(self):
│ │ +        """Gets the request of this MobilePaymentRequest.  # noqa: E501
│ │  
│ │ -        Used payment method type name from payment methods list  # noqa: E501
│ │ +        Request  # noqa: E501
│ │  
│ │ -        :return: The payment_method of this RecurringResponse.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The request of this MobilePaymentRequest.  # noqa: E501
│ │ +        :rtype: Request
│ │          """
│ │ -        return self._payment_method
│ │ +        return self._request
│ │  
│ │ -    @payment_method.setter
│ │ -    def payment_method(self, payment_method):
│ │ -        """Sets the payment_method of this RecurringResponse.
│ │ +    @request.setter
│ │ +    def request(self, request):
│ │ +        """Sets the request of this MobilePaymentRequest.
│ │  
│ │ -        Used payment method type name from payment methods list  # noqa: E501
│ │ +        Request  # noqa: E501
│ │  
│ │ -        :param payment_method: The payment_method of this RecurringResponse.  # noqa: E501
│ │ -        :type: str
│ │ +        :param request: The request of this MobilePaymentRequest.  # noqa: E501
│ │ +        :type: Request
│ │          """
│ │ +        if request is None:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `request`, must not be `None`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._payment_method = payment_method
│ │ +        self._request = request
│ │  
│ │      @property
│ │ -    def merchant_order(self):
│ │ -        """Gets the merchant_order of this RecurringResponse.  # noqa: E501
│ │ +    def card_account(self):
│ │ +        """Gets the card_account of this MobilePaymentRequest.  # noqa: E501
│ │  
│ │ -        Merchant order data  # noqa: E501
│ │ +        Information about card *(for BANKCARD payment method only)*  # noqa: E501
│ │  
│ │ -        :return: The merchant_order of this RecurringResponse.  # noqa: E501
│ │ -        :rtype: RecurringResponseMerchantOrder
│ │ +        :return: The card_account of this MobilePaymentRequest.  # noqa: E501
│ │ +        :rtype: PaymentRequestCardAccount
│ │          """
│ │ -        return self._merchant_order
│ │ +        return self._card_account
│ │  
│ │ -    @merchant_order.setter
│ │ -    def merchant_order(self, merchant_order):
│ │ -        """Sets the merchant_order of this RecurringResponse.
│ │ +    @card_account.setter
│ │ +    def card_account(self, card_account):
│ │ +        """Sets the card_account of this MobilePaymentRequest.
│ │  
│ │ -        Merchant order data  # noqa: E501
│ │ +        Information about card *(for BANKCARD payment method only)*  # noqa: E501
│ │  
│ │ -        :param merchant_order: The merchant_order of this RecurringResponse.  # noqa: E501
│ │ -        :type: RecurringResponseMerchantOrder
│ │ +        :param card_account: The card_account of this MobilePaymentRequest.  # noqa: E501
│ │ +        :type: PaymentRequestCardAccount
│ │          """
│ │  
│ │ -        self._merchant_order = merchant_order
│ │ +        self._card_account = card_account
│ │  
│ │      @property
│ │ -    def recurring_data(self):
│ │ -        """Gets the recurring_data of this RecurringResponse.  # noqa: E501
│ │ +    def customer(self):
│ │ +        """Gets the customer of this MobilePaymentRequest.  # noqa: E501
│ │  
│ │ -        Recurring data  # noqa: E501
│ │ +        Customer data  # noqa: E501
│ │  
│ │ -        :return: The recurring_data of this RecurringResponse.  # noqa: E501
│ │ -        :rtype: RecurringResponseRecurringData
│ │ +        :return: The customer of this MobilePaymentRequest.  # noqa: E501
│ │ +        :rtype: PaymentRequestCustomer
│ │          """
│ │ -        return self._recurring_data
│ │ +        return self._customer
│ │  
│ │ -    @recurring_data.setter
│ │ -    def recurring_data(self, recurring_data):
│ │ -        """Sets the recurring_data of this RecurringResponse.
│ │ +    @customer.setter
│ │ +    def customer(self, customer):
│ │ +        """Sets the customer of this MobilePaymentRequest.
│ │  
│ │ -        Recurring data  # noqa: E501
│ │ +        Customer data  # noqa: E501
│ │  
│ │ -        :param recurring_data: The recurring_data of this RecurringResponse.  # noqa: E501
│ │ -        :type: RecurringResponseRecurringData
│ │ +        :param customer: The customer of this MobilePaymentRequest.  # noqa: E501
│ │ +        :type: PaymentRequestCustomer
│ │          """
│ │ +        if customer is None:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `customer`, must not be `None`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._recurring_data = recurring_data
│ │ +        self._customer = customer
│ │  
│ │      @property
│ │ -    def card_account(self):
│ │ -        """Gets the card_account of this RecurringResponse.  # noqa: E501
│ │ +    def merchant_order(self):
│ │ +        """Gets the merchant_order of this MobilePaymentRequest.  # noqa: E501
│ │  
│ │ -        Card account data  # noqa: E501
│ │ +        Merchant order data  # noqa: E501
│ │  
│ │ -        :return: The card_account of this RecurringResponse.  # noqa: E501
│ │ -        :rtype: PaymentResponseCardAccount
│ │ +        :return: The merchant_order of this MobilePaymentRequest.  # noqa: E501
│ │ +        :rtype: MobilePaymentMerchantOrder
│ │          """
│ │ -        return self._card_account
│ │ +        return self._merchant_order
│ │  
│ │ -    @card_account.setter
│ │ -    def card_account(self, card_account):
│ │ -        """Sets the card_account of this RecurringResponse.
│ │ +    @merchant_order.setter
│ │ +    def merchant_order(self, merchant_order):
│ │ +        """Sets the merchant_order of this MobilePaymentRequest.
│ │  
│ │ -        Card account data  # noqa: E501
│ │ +        Merchant order data  # noqa: E501
│ │  
│ │ -        :param card_account: The card_account of this RecurringResponse.  # noqa: E501
│ │ -        :type: PaymentResponseCardAccount
│ │ +        :param merchant_order: The merchant_order of this MobilePaymentRequest.  # noqa: E501
│ │ +        :type: MobilePaymentMerchantOrder
│ │          """
│ │ +        if merchant_order is None:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `merchant_order`, must not be `None`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._card_account = card_account
│ │ +        self._merchant_order = merchant_order
│ │  
│ │      @property
│ │ -    def customer(self):
│ │ -        """Gets the customer of this RecurringResponse.  # noqa: E501
│ │ +    def payment_data(self):
│ │ +        """Gets the payment_data of this MobilePaymentRequest.  # noqa: E501
│ │  
│ │ -        Customer data  # noqa: E501
│ │ +        Payment data  # noqa: E501
│ │  
│ │ -        :return: The customer of this RecurringResponse.  # noqa: E501
│ │ -        :rtype: RecurringCustomer
│ │ +        :return: The payment_data of this MobilePaymentRequest.  # noqa: E501
│ │ +        :rtype: PaymentRequestPaymentData
│ │          """
│ │ -        return self._customer
│ │ +        return self._payment_data
│ │  
│ │ -    @customer.setter
│ │ -    def customer(self, customer):
│ │ -        """Sets the customer of this RecurringResponse.
│ │ +    @payment_data.setter
│ │ +    def payment_data(self, payment_data):
│ │ +        """Sets the payment_data of this MobilePaymentRequest.
│ │  
│ │ -        Customer data  # noqa: E501
│ │ +        Payment data  # noqa: E501
│ │  
│ │ -        :param customer: The customer of this RecurringResponse.  # noqa: E501
│ │ -        :type: RecurringCustomer
│ │ +        :param payment_data: The payment_data of this MobilePaymentRequest.  # noqa: E501
│ │ +        :type: PaymentRequestPaymentData
│ │          """
│ │ +        if payment_data is None:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `payment_data`, must not be `None`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._customer = customer
│ │ +        self._payment_data = payment_data
│ │ +
│ │ +    @property
│ │ +    def payment_method(self):
│ │ +        """Gets the payment_method of this MobilePaymentRequest.  # noqa: E501
│ │ +
│ │ +        Used payment method type name from payment methods list  # noqa: E501
│ │ +
│ │ +        :return: The payment_method of this MobilePaymentRequest.  # noqa: E501
│ │ +        :rtype: str
│ │ +        """
│ │ +        return self._payment_method
│ │ +
│ │ +    @payment_method.setter
│ │ +    def payment_method(self, payment_method):
│ │ +        """Sets the payment_method of this MobilePaymentRequest.
│ │ +
│ │ +        Used payment method type name from payment methods list  # noqa: E501
│ │ +
│ │ +        :param payment_method: The payment_method of this MobilePaymentRequest.  # noqa: E501
│ │ +        :type: str
│ │ +        """
│ │ +        if payment_method is not None and len(payment_method) > 50:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `payment_method`, length must be less than or equal to `50`"
│ │ +            )  # noqa: E501
│ │ +        if payment_method is not None and len(payment_method) < 1:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `payment_method`, length must be greater than or equal to `1`"
│ │ +            )  # noqa: E501
│ │ +
│ │ +        self._payment_method = payment_method
│ │  
│ │      @property
│ │ -    def authentication_data(self):
│ │ -        """Gets the authentication_data of this RecurringResponse.  # noqa: E501
│ │ +    def return_urls(self):
│ │ +        """Gets the return_urls of this MobilePaymentRequest.  # noqa: E501
│ │  
│ │ -        Authentication data  # noqa: E501
│ │ +        Return URLs are the URLs where Customer returns by pressing 'Back to the shop' or 'Cancel' button in Payment page mode and redirected automatically in Gateway mode  # noqa: E501
│ │  
│ │ -        :return: The authentication_data of this RecurringResponse.  # noqa: E501
│ │ -        :rtype: AuthenticationData
│ │ +        :return: The return_urls of this MobilePaymentRequest.  # noqa: E501
│ │ +        :rtype: ReturnUrls
│ │          """
│ │ -        return self._authentication_data
│ │ +        return self._return_urls
│ │  
│ │ -    @authentication_data.setter
│ │ -    def authentication_data(self, authentication_data):
│ │ -        """Sets the authentication_data of this RecurringResponse.
│ │ +    @return_urls.setter
│ │ +    def return_urls(self, return_urls):
│ │ +        """Sets the return_urls of this MobilePaymentRequest.
│ │  
│ │ -        Authentication data  # noqa: E501
│ │ +        Return URLs are the URLs where Customer returns by pressing 'Back to the shop' or 'Cancel' button in Payment page mode and redirected automatically in Gateway mode  # noqa: E501
│ │  
│ │ -        :param authentication_data: The authentication_data of this RecurringResponse.  # noqa: E501
│ │ -        :type: AuthenticationData
│ │ +        :param return_urls: The return_urls of this MobilePaymentRequest.  # noqa: E501
│ │ +        :type: ReturnUrls
│ │          """
│ │  
│ │ -        self._authentication_data = authentication_data
│ │ +        self._return_urls = return_urls
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -250,15 +302,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(RecurringResponse, dict):
│ │ +        if issubclass(MobilePaymentRequest, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -266,15 +318,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, RecurringResponse):
│ │ +        if not isinstance(other, MobilePaymentRequest):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/recurring_response_filing.py
│ ├── +++ cardpay-3.6.21/cardpay/model/subscription.py
│ │┄ Files 11% similar despite different names
│ │ @@ -13,15 +13,15 @@
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │  
│ │ -class RecurringResponseFiling(object):
│ │ +class Subscription(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │ @@ -31,40 +31,40 @@
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {"id": "str"}
│ │  
│ │      attribute_map = {"id": "id"}
│ │  
│ │      def __init__(self, id=None):  # noqa: E501
│ │ -        """RecurringResponseFiling - a model defined in Swagger"""  # noqa: E501
│ │ +        """Subscription - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._id = None
│ │          self.discriminator = None
│ │  
│ │          if id is not None:
│ │              self.id = id
│ │  
│ │      @property
│ │      def id(self):
│ │ -        """Gets the id of this RecurringResponseFiling.  # noqa: E501
│ │ +        """Gets the id of this Subscription.  # noqa: E501
│ │  
│ │ -        CardPay's Card filing id (token format). For *UpdatedSubscriptionData*: filing id that replaced the previous one. Mandatory for `CHANGE_FILING` operation only.  # noqa: E501
│ │ +        Subscription's identificator. Mandatory if scheduled payment is requested.  # noqa: E501
│ │  
│ │ -        :return: The id of this RecurringResponseFiling.  # noqa: E501
│ │ +        :return: The id of this Subscription.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._id
│ │  
│ │      @id.setter
│ │      def id(self, id):
│ │ -        """Sets the id of this RecurringResponseFiling.
│ │ +        """Sets the id of this Subscription.
│ │  
│ │ -        CardPay's Card filing id (token format). For *UpdatedSubscriptionData*: filing id that replaced the previous one. Mandatory for `CHANGE_FILING` operation only.  # noqa: E501
│ │ +        Subscription's identificator. Mandatory if scheduled payment is requested.  # noqa: E501
│ │  
│ │ -        :param id: The id of this RecurringResponseFiling.  # noqa: E501
│ │ +        :param id: The id of this Subscription.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._id = id
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │ @@ -86,15 +86,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(RecurringResponseFiling, dict):
│ │ +        if issubclass(Subscription, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -102,15 +102,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, RecurringResponseFiling):
│ │ +        if not isinstance(other, Subscription):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/recurring_response_merchant_order.py
│ ├── +++ cardpay-3.6.21/cardpay/model/recurring_response_merchant_order.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/recurring_update_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/recurring_update_request.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/recurring_update_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/recurring_update_response.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/recurrings_list.py
│ ├── +++ cardpay-3.6.21/cardpay/model/recurrings_list.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/redirect_url_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/redirect_url_response.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/refund_callback.py
│ ├── +++ cardpay-3.6.21/cardpay/model/refund_callback.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/refund_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/card_binding_request.py
│ │┄ Files 21% similar despite different names
│ │ @@ -12,238 +12,232 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ -from cardpay.model.refund_request_customer import (
│ │ -    RefundRequestCustomer,
│ │ +from cardpay.model.card_binding_card_account import (
│ │ +    CardBindingCardAccount,
│ │  )  # noqa: F401,E501
│ │ -from cardpay.model.refund_request_e_wallet_account import (
│ │ -    RefundRequestEWalletAccount,
│ │ -)  # noqa: F401,E501
│ │ -from cardpay.model.refund_request_merchant_order import (
│ │ -    RefundRequestMerchantOrder,
│ │ -)  # noqa: F401,E501
│ │ -from cardpay.model.refund_request_payment_data import (
│ │ -    RefundRequestPaymentData,
│ │ -)  # noqa: F401,E501
│ │ -from cardpay.model.refund_request_refund_data import (
│ │ -    RefundRequestRefundData,
│ │ +from cardpay.model.card_binding_data import CardBindingData  # noqa: F401,E501
│ │ +from cardpay.model.card_binding_merchant_order import (
│ │ +    CardBindingMerchantOrder,
│ │  )  # noqa: F401,E501
│ │ +from cardpay.model.recurring_customer import RecurringCustomer  # noqa: F401,E501
│ │  from cardpay.model.request import Request  # noqa: F401,E501
│ │ +from cardpay.model.return_urls import ReturnUrls  # noqa: F401,E501
│ │  
│ │  
│ │ -class RefundRequest(object):
│ │ +class CardBindingRequest(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │          "request": "Request",
│ │ -        "customer": "RefundRequestCustomer",
│ │ -        "ewallet_account": "RefundRequestEWalletAccount",
│ │ -        "merchant_order": "RefundRequestMerchantOrder",
│ │ -        "payment_data": "RefundRequestPaymentData",
│ │ -        "refund_data": "RefundRequestRefundData",
│ │ +        "card_account": "CardBindingCardAccount",
│ │ +        "customer": "RecurringCustomer",
│ │ +        "merchant_order": "CardBindingMerchantOrder",
│ │ +        "recurring_data": "CardBindingData",
│ │ +        "return_urls": "ReturnUrls",
│ │      }
│ │  
│ │      attribute_map = {
│ │          "request": "request",
│ │ +        "card_account": "card_account",
│ │          "customer": "customer",
│ │ -        "ewallet_account": "ewallet_account",
│ │          "merchant_order": "merchant_order",
│ │ -        "payment_data": "payment_data",
│ │ -        "refund_data": "refund_data",
│ │ +        "recurring_data": "recurring_data",
│ │ +        "return_urls": "return_urls",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │          request=None,
│ │ +        card_account=None,
│ │          customer=None,
│ │ -        ewallet_account=None,
│ │          merchant_order=None,
│ │ -        payment_data=None,
│ │ -        refund_data=None,
│ │ +        recurring_data=None,
│ │ +        return_urls=None,
│ │      ):  # noqa: E501
│ │ -        """RefundRequest - a model defined in Swagger"""  # noqa: E501
│ │ +        """CardBindingRequest - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._request = None
│ │ +        self._card_account = None
│ │          self._customer = None
│ │ -        self._ewallet_account = None
│ │          self._merchant_order = None
│ │ -        self._payment_data = None
│ │ -        self._refund_data = None
│ │ +        self._recurring_data = None
│ │ +        self._return_urls = None
│ │          self.discriminator = None
│ │  
│ │          self.request = request
│ │ +        self.card_account = card_account
│ │          if customer is not None:
│ │              self.customer = customer
│ │ -        if ewallet_account is not None:
│ │ -            self.ewallet_account = ewallet_account
│ │          if merchant_order is not None:
│ │              self.merchant_order = merchant_order
│ │ -        self.payment_data = payment_data
│ │ -        if refund_data is not None:
│ │ -            self.refund_data = refund_data
│ │ +        if recurring_data is not None:
│ │ +            self.recurring_data = recurring_data
│ │ +        if return_urls is not None:
│ │ +            self.return_urls = return_urls
│ │  
│ │      @property
│ │      def request(self):
│ │ -        """Gets the request of this RefundRequest.  # noqa: E501
│ │ +        """Gets the request of this CardBindingRequest.  # noqa: E501
│ │  
│ │          Request  # noqa: E501
│ │  
│ │ -        :return: The request of this RefundRequest.  # noqa: E501
│ │ +        :return: The request of this CardBindingRequest.  # noqa: E501
│ │          :rtype: Request
│ │          """
│ │          return self._request
│ │  
│ │      @request.setter
│ │      def request(self, request):
│ │ -        """Sets the request of this RefundRequest.
│ │ +        """Sets the request of this CardBindingRequest.
│ │  
│ │          Request  # noqa: E501
│ │  
│ │ -        :param request: The request of this RefundRequest.  # noqa: E501
│ │ +        :param request: The request of this CardBindingRequest.  # noqa: E501
│ │          :type: Request
│ │          """
│ │          if request is None:
│ │              raise ValueError(
│ │                  "Invalid value for `request`, must not be `None`"
│ │              )  # noqa: E501
│ │  
│ │          self._request = request
│ │  
│ │      @property
│ │ -    def customer(self):
│ │ -        """Gets the customer of this RefundRequest.  # noqa: E501
│ │ +    def card_account(self):
│ │ +        """Gets the card_account of this CardBindingRequest.  # noqa: E501
│ │  
│ │ -        Customer  # noqa: E501
│ │ +        Information about card  # noqa: E501
│ │  
│ │ -        :return: The customer of this RefundRequest.  # noqa: E501
│ │ -        :rtype: RefundRequestCustomer
│ │ +        :return: The card_account of this CardBindingRequest.  # noqa: E501
│ │ +        :rtype: CardBindingCardAccount
│ │          """
│ │ -        return self._customer
│ │ +        return self._card_account
│ │  
│ │ -    @customer.setter
│ │ -    def customer(self, customer):
│ │ -        """Sets the customer of this RefundRequest.
│ │ +    @card_account.setter
│ │ +    def card_account(self, card_account):
│ │ +        """Sets the card_account of this CardBindingRequest.
│ │  
│ │ -        Customer  # noqa: E501
│ │ +        Information about card  # noqa: E501
│ │  
│ │ -        :param customer: The customer of this RefundRequest.  # noqa: E501
│ │ -        :type: RefundRequestCustomer
│ │ +        :param card_account: The card_account of this CardBindingRequest.  # noqa: E501
│ │ +        :type: CardBindingCardAccount
│ │          """
│ │ +        if card_account is None:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `card_account`, must not be `None`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._customer = customer
│ │ +        self._card_account = card_account
│ │  
│ │      @property
│ │ -    def ewallet_account(self):
│ │ -        """Gets the ewallet_account of this RefundRequest.  # noqa: E501
│ │ +    def customer(self):
│ │ +        """Gets the customer of this CardBindingRequest.  # noqa: E501
│ │  
│ │ -        EWallet  # noqa: E501
│ │ +        Customer data  # noqa: E501
│ │  
│ │ -        :return: The ewallet_account of this RefundRequest.  # noqa: E501
│ │ -        :rtype: RefundRequestEWalletAccount
│ │ +        :return: The customer of this CardBindingRequest.  # noqa: E501
│ │ +        :rtype: RecurringCustomer
│ │          """
│ │ -        return self._ewallet_account
│ │ +        return self._customer
│ │  
│ │ -    @ewallet_account.setter
│ │ -    def ewallet_account(self, ewallet_account):
│ │ -        """Sets the ewallet_account of this RefundRequest.
│ │ +    @customer.setter
│ │ +    def customer(self, customer):
│ │ +        """Sets the customer of this CardBindingRequest.
│ │  
│ │ -        EWallet  # noqa: E501
│ │ +        Customer data  # noqa: E501
│ │  
│ │ -        :param ewallet_account: The ewallet_account of this RefundRequest.  # noqa: E501
│ │ -        :type: RefundRequestEWalletAccount
│ │ +        :param customer: The customer of this CardBindingRequest.  # noqa: E501
│ │ +        :type: RecurringCustomer
│ │          """
│ │  
│ │ -        self._ewallet_account = ewallet_account
│ │ +        self._customer = customer
│ │  
│ │      @property
│ │      def merchant_order(self):
│ │ -        """Gets the merchant_order of this RefundRequest.  # noqa: E501
│ │ +        """Gets the merchant_order of this CardBindingRequest.  # noqa: E501
│ │  
│ │          Merchant order data  # noqa: E501
│ │  
│ │ -        :return: The merchant_order of this RefundRequest.  # noqa: E501
│ │ -        :rtype: RefundRequestMerchantOrder
│ │ +        :return: The merchant_order of this CardBindingRequest.  # noqa: E501
│ │ +        :rtype: CardBindingMerchantOrder
│ │          """
│ │          return self._merchant_order
│ │  
│ │      @merchant_order.setter
│ │      def merchant_order(self, merchant_order):
│ │ -        """Sets the merchant_order of this RefundRequest.
│ │ +        """Sets the merchant_order of this CardBindingRequest.
│ │  
│ │          Merchant order data  # noqa: E501
│ │  
│ │ -        :param merchant_order: The merchant_order of this RefundRequest.  # noqa: E501
│ │ -        :type: RefundRequestMerchantOrder
│ │ +        :param merchant_order: The merchant_order of this CardBindingRequest.  # noqa: E501
│ │ +        :type: CardBindingMerchantOrder
│ │          """
│ │  
│ │          self._merchant_order = merchant_order
│ │  
│ │      @property
│ │ -    def payment_data(self):
│ │ -        """Gets the payment_data of this RefundRequest.  # noqa: E501
│ │ +    def recurring_data(self):
│ │ +        """Gets the recurring_data of this CardBindingRequest.  # noqa: E501
│ │  
│ │ -        Payment data  # noqa: E501
│ │ +        Data of recurring payment  # noqa: E501
│ │  
│ │ -        :return: The payment_data of this RefundRequest.  # noqa: E501
│ │ -        :rtype: RefundRequestPaymentData
│ │ +        :return: The recurring_data of this CardBindingRequest.  # noqa: E501
│ │ +        :rtype: CardBindingData
│ │          """
│ │ -        return self._payment_data
│ │ +        return self._recurring_data
│ │  
│ │ -    @payment_data.setter
│ │ -    def payment_data(self, payment_data):
│ │ -        """Sets the payment_data of this RefundRequest.
│ │ +    @recurring_data.setter
│ │ +    def recurring_data(self, recurring_data):
│ │ +        """Sets the recurring_data of this CardBindingRequest.
│ │  
│ │ -        Payment data  # noqa: E501
│ │ +        Data of recurring payment  # noqa: E501
│ │  
│ │ -        :param payment_data: The payment_data of this RefundRequest.  # noqa: E501
│ │ -        :type: RefundRequestPaymentData
│ │ +        :param recurring_data: The recurring_data of this CardBindingRequest.  # noqa: E501
│ │ +        :type: CardBindingData
│ │          """
│ │ -        if payment_data is None:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `payment_data`, must not be `None`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._payment_data = payment_data
│ │ +        self._recurring_data = recurring_data
│ │  
│ │      @property
│ │ -    def refund_data(self):
│ │ -        """Gets the refund_data of this RefundRequest.  # noqa: E501
│ │ +    def return_urls(self):
│ │ +        """Gets the return_urls of this CardBindingRequest.  # noqa: E501
│ │  
│ │ -        Refund data  # noqa: E501
│ │ +        Merchant Return URLs  # noqa: E501
│ │  
│ │ -        :return: The refund_data of this RefundRequest.  # noqa: E501
│ │ -        :rtype: RefundRequestRefundData
│ │ +        :return: The return_urls of this CardBindingRequest.  # noqa: E501
│ │ +        :rtype: ReturnUrls
│ │          """
│ │ -        return self._refund_data
│ │ +        return self._return_urls
│ │  
│ │ -    @refund_data.setter
│ │ -    def refund_data(self, refund_data):
│ │ -        """Sets the refund_data of this RefundRequest.
│ │ +    @return_urls.setter
│ │ +    def return_urls(self, return_urls):
│ │ +        """Sets the return_urls of this CardBindingRequest.
│ │  
│ │ -        Refund data  # noqa: E501
│ │ +        Merchant Return URLs  # noqa: E501
│ │  
│ │ -        :param refund_data: The refund_data of this RefundRequest.  # noqa: E501
│ │ -        :type: RefundRequestRefundData
│ │ +        :param return_urls: The return_urls of this CardBindingRequest.  # noqa: E501
│ │ +        :type: ReturnUrls
│ │          """
│ │  
│ │ -        self._refund_data = refund_data
│ │ +        self._return_urls = return_urls
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -261,15 +255,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(RefundRequest, dict):
│ │ +        if issubclass(CardBindingRequest, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -277,15 +271,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, RefundRequest):
│ │ +        if not isinstance(other, CardBindingRequest):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/refund_request_customer.py
│ ├── +++ cardpay-3.6.21/cardpay/model/refund_request_customer.py
│ │┄ Files 0% similar despite different names
│ │ @@ -69,17 +69,17 @@
│ │          :param email: The email of this RefundRequestCustomer.  # noqa: E501
│ │          :type: str
│ │          """
│ │          if email is not None and len(email) > 256:
│ │              raise ValueError(
│ │                  "Invalid value for `email`, length must be less than or equal to `256`"
│ │              )  # noqa: E501
│ │ -        if email is not None and len(email) < 3:
│ │ +        if email is not None and len(email) < 1:
│ │              raise ValueError(
│ │ -                "Invalid value for `email`, length must be greater than or equal to `3`"
│ │ +                "Invalid value for `email`, length must be greater than or equal to `1`"
│ │              )  # noqa: E501
│ │  
│ │          self._email = email
│ │  
│ │      @property
│ │      def full_name(self):
│ │          """Gets the full_name of this RefundRequestCustomer.  # noqa: E501
│ │   --- cardpay-3.45.8/cardpay/model/refund_request_merchant_order.py
│ ├── +++ cardpay-3.6.21/cardpay/model/refund_request_merchant_order.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/refund_request_payment_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/transaction_response_merchant_order.py
│ │┄ Files 14% similar despite different names
│ │ @@ -13,15 +13,15 @@
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │  
│ │ -class RefundRequestPaymentData(object):
│ │ +class TransactionResponseMerchantOrder(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │ @@ -31,43 +31,51 @@
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {"id": "str"}
│ │  
│ │      attribute_map = {"id": "id"}
│ │  
│ │      def __init__(self, id=None):  # noqa: E501
│ │ -        """RefundRequestPaymentData - a model defined in Swagger"""  # noqa: E501
│ │ +        """TransactionResponseMerchantOrder - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._id = None
│ │          self.discriminator = None
│ │  
│ │          self.id = id
│ │  
│ │      @property
│ │      def id(self):
│ │ -        """Gets the id of this RefundRequestPaymentData.  # noqa: E501
│ │ +        """Gets the id of this TransactionResponseMerchantOrder.  # noqa: E501
│ │  
│ │ -        ID of captured payment id (or recurring id - for BANKCARD payment method only) to be refunded  # noqa: E501
│ │ +        Merchant's ID of the order  # noqa: E501
│ │  
│ │ -        :return: The id of this RefundRequestPaymentData.  # noqa: E501
│ │ +        :return: The id of this TransactionResponseMerchantOrder.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._id
│ │  
│ │      @id.setter
│ │      def id(self, id):
│ │ -        """Sets the id of this RefundRequestPaymentData.
│ │ +        """Sets the id of this TransactionResponseMerchantOrder.
│ │  
│ │ -        ID of captured payment id (or recurring id - for BANKCARD payment method only) to be refunded  # noqa: E501
│ │ +        Merchant's ID of the order  # noqa: E501
│ │  
│ │ -        :param id: The id of this RefundRequestPaymentData.  # noqa: E501
│ │ +        :param id: The id of this TransactionResponseMerchantOrder.  # noqa: E501
│ │          :type: str
│ │          """
│ │          if id is None:
│ │              raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
│ │ +        if id is not None and len(id) > 50:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `id`, length must be less than or equal to `50`"
│ │ +            )  # noqa: E501
│ │ +        if id is not None and len(id) < 1:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `id`, length must be greater than or equal to `1`"
│ │ +            )  # noqa: E501
│ │  
│ │          self._id = id
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │ @@ -87,15 +95,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(RefundRequestPaymentData, dict):
│ │ +        if issubclass(TransactionResponseMerchantOrder, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -103,15 +111,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, RefundRequestPaymentData):
│ │ +        if not isinstance(other, TransactionResponseMerchantOrder):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/refund_request_refund_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/refund_request_refund_data.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/refund_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/refund_response.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/refund_response_card_account.py
│ ├── +++ cardpay-3.6.21/cardpay/model/refund_response_card_account.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/refund_response_customer.py
│ ├── +++ cardpay-3.6.21/cardpay/model/refund_response_payment_data.py
│ │┄ Files 27% similar despite different names
│ │ @@ -13,152 +13,88 @@
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │  
│ │ -class RefundResponseCustomer(object):
│ │ +class RefundResponsePaymentData(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │ -    swagger_types = {
│ │ -        "email": "str",
│ │ -        "id": "str",
│ │ -        "ip_country": "str",
│ │ -        "user_agent": "str",
│ │ -    }
│ │ -
│ │ -    attribute_map = {
│ │ -        "email": "email",
│ │ -        "id": "id",
│ │ -        "ip_country": "ip_country",
│ │ -        "user_agent": "user_agent",
│ │ -    }
│ │ -
│ │ -    def __init__(
│ │ -        self, email=None, id=None, ip_country=None, user_agent=None
│ │ -    ):  # noqa: E501
│ │ -        """RefundResponseCustomer - a model defined in Swagger"""  # noqa: E501
│ │ +    swagger_types = {"id": "str", "remaining_amount": "float"}
│ │ +
│ │ +    attribute_map = {"id": "id", "remaining_amount": "remaining_amount"}
│ │ +
│ │ +    def __init__(self, id=None, remaining_amount=None):  # noqa: E501
│ │ +        """RefundResponsePaymentData - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._email = None
│ │          self._id = None
│ │ -        self._ip_country = None
│ │ -        self._user_agent = None
│ │ +        self._remaining_amount = None
│ │          self.discriminator = None
│ │  
│ │ -        if email is not None:
│ │ -            self.email = email
│ │          if id is not None:
│ │              self.id = id
│ │ -        if ip_country is not None:
│ │ -            self.ip_country = ip_country
│ │ -        if user_agent is not None:
│ │ -            self.user_agent = user_agent
│ │ -
│ │ -    @property
│ │ -    def email(self):
│ │ -        """Gets the email of this RefundResponseCustomer.  # noqa: E501
│ │ -
│ │ -        Customer's e-mail address, here can be value returned from payment method - in case then in Merchant request `customer.email` wasn't presented  # noqa: E501
│ │ -
│ │ -        :return: The email of this RefundResponseCustomer.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._email
│ │ -
│ │ -    @email.setter
│ │ -    def email(self, email):
│ │ -        """Sets the email of this RefundResponseCustomer.
│ │ -
│ │ -        Customer's e-mail address, here can be value returned from payment method - in case then in Merchant request `customer.email` wasn't presented  # noqa: E501
│ │ -
│ │ -        :param email: The email of this RefundResponseCustomer.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._email = email
│ │ +        if remaining_amount is not None:
│ │ +            self.remaining_amount = remaining_amount
│ │  
│ │      @property
│ │      def id(self):
│ │ -        """Gets the id of this RefundResponseCustomer.  # noqa: E501
│ │ +        """Gets the id of this RefundResponsePaymentData.  # noqa: E501
│ │  
│ │ -        Customer's ID in Merchant's system  # noqa: E501
│ │ +        Id of refunded or partial refunded payment  # noqa: E501
│ │  
│ │ -        :return: The id of this RefundResponseCustomer.  # noqa: E501
│ │ +        :return: The id of this RefundResponsePaymentData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._id
│ │  
│ │      @id.setter
│ │      def id(self, id):
│ │ -        """Sets the id of this RefundResponseCustomer.
│ │ +        """Sets the id of this RefundResponsePaymentData.
│ │  
│ │ -        Customer's ID in Merchant's system  # noqa: E501
│ │ +        Id of refunded or partial refunded payment  # noqa: E501
│ │  
│ │ -        :param id: The id of this RefundResponseCustomer.  # noqa: E501
│ │ +        :param id: The id of this RefundResponsePaymentData.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._id = id
│ │  
│ │      @property
│ │ -    def ip_country(self):
│ │ -        """Gets the ip_country of this RefundResponseCustomer.  # noqa: E501
│ │ +    def remaining_amount(self):
│ │ +        """Gets the remaining_amount of this RefundResponsePaymentData.  # noqa: E501
│ │  
│ │ -        Customer country by IP  # noqa: E501
│ │ +        Payment amount left after refund was made  # noqa: E501
│ │  
│ │ -        :return: The ip_country of this RefundResponseCustomer.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._ip_country
│ │ -
│ │ -    @ip_country.setter
│ │ -    def ip_country(self, ip_country):
│ │ -        """Sets the ip_country of this RefundResponseCustomer.
│ │ -
│ │ -        Customer country by IP  # noqa: E501
│ │ -
│ │ -        :param ip_country: The ip_country of this RefundResponseCustomer.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._ip_country = ip_country
│ │ -
│ │ -    @property
│ │ -    def user_agent(self):
│ │ -        """Gets the user_agent of this RefundResponseCustomer.  # noqa: E501
│ │ -
│ │ -        User agent  # noqa: E501
│ │ -
│ │ -        :return: The user_agent of this RefundResponseCustomer.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The remaining_amount of this RefundResponsePaymentData.  # noqa: E501
│ │ +        :rtype: float
│ │          """
│ │ -        return self._user_agent
│ │ +        return self._remaining_amount
│ │  
│ │ -    @user_agent.setter
│ │ -    def user_agent(self, user_agent):
│ │ -        """Sets the user_agent of this RefundResponseCustomer.
│ │ +    @remaining_amount.setter
│ │ +    def remaining_amount(self, remaining_amount):
│ │ +        """Sets the remaining_amount of this RefundResponsePaymentData.
│ │  
│ │ -        User agent  # noqa: E501
│ │ +        Payment amount left after refund was made  # noqa: E501
│ │  
│ │ -        :param user_agent: The user_agent of this RefundResponseCustomer.  # noqa: E501
│ │ -        :type: str
│ │ +        :param remaining_amount: The remaining_amount of this RefundResponsePaymentData.  # noqa: E501
│ │ +        :type: float
│ │          """
│ │  
│ │ -        self._user_agent = user_agent
│ │ +        self._remaining_amount = remaining_amount
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -176,15 +112,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(RefundResponseCustomer, dict):
│ │ +        if issubclass(RefundResponsePaymentData, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -192,15 +128,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, RefundResponseCustomer):
│ │ +        if not isinstance(other, RefundResponsePaymentData):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/refund_response_e_wallet_account.py
│ ├── +++ cardpay-3.6.21/cardpay/model/refund_response_e_wallet_account.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/refund_response_payment_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/card_binding_merchant_order.py
│ │┄ Files 25% similar despite different names
│ │ @@ -13,88 +13,108 @@
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │  
│ │ -class RefundResponsePaymentData(object):
│ │ +class CardBindingMerchantOrder(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │ -    swagger_types = {"id": "str", "remaining_amount": "float"}
│ │ +    swagger_types = {"description": "str", "id": "str"}
│ │  
│ │ -    attribute_map = {"id": "id", "remaining_amount": "remaining_amount"}
│ │ +    attribute_map = {"description": "description", "id": "id"}
│ │  
│ │ -    def __init__(self, id=None, remaining_amount=None):  # noqa: E501
│ │ -        """RefundResponsePaymentData - a model defined in Swagger"""  # noqa: E501
│ │ +    def __init__(self, description=None, id=None):  # noqa: E501
│ │ +        """CardBindingMerchantOrder - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ +        self._description = None
│ │          self._id = None
│ │ -        self._remaining_amount = None
│ │          self.discriminator = None
│ │  
│ │ -        if id is not None:
│ │ -            self.id = id
│ │ -        if remaining_amount is not None:
│ │ -            self.remaining_amount = remaining_amount
│ │ +        self.description = description
│ │ +        self.id = id
│ │  
│ │      @property
│ │ -    def id(self):
│ │ -        """Gets the id of this RefundResponsePaymentData.  # noqa: E501
│ │ +    def description(self):
│ │ +        """Gets the description of this CardBindingMerchantOrder.  # noqa: E501
│ │  
│ │ -        Id of refunded or partial refunded payment  # noqa: E501
│ │ +        Description of product/service being sold  # noqa: E501
│ │  
│ │ -        :return: The id of this RefundResponsePaymentData.  # noqa: E501
│ │ +        :return: The description of this CardBindingMerchantOrder.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._id
│ │ +        return self._description
│ │  
│ │ -    @id.setter
│ │ -    def id(self, id):
│ │ -        """Sets the id of this RefundResponsePaymentData.
│ │ +    @description.setter
│ │ +    def description(self, description):
│ │ +        """Sets the description of this CardBindingMerchantOrder.
│ │  
│ │ -        Id of refunded or partial refunded payment  # noqa: E501
│ │ +        Description of product/service being sold  # noqa: E501
│ │  
│ │ -        :param id: The id of this RefundResponsePaymentData.  # noqa: E501
│ │ +        :param description: The description of this CardBindingMerchantOrder.  # noqa: E501
│ │          :type: str
│ │          """
│ │ +        if description is None:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `description`, must not be `None`"
│ │ +            )  # noqa: E501
│ │ +        if description is not None and len(description) > 200:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `description`, length must be less than or equal to `200`"
│ │ +            )  # noqa: E501
│ │ +        if description is not None and len(description) < 1:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `description`, length must be greater than or equal to `1`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._id = id
│ │ +        self._description = description
│ │  
│ │      @property
│ │ -    def remaining_amount(self):
│ │ -        """Gets the remaining_amount of this RefundResponsePaymentData.  # noqa: E501
│ │ +    def id(self):
│ │ +        """Gets the id of this CardBindingMerchantOrder.  # noqa: E501
│ │  
│ │ -        Payment amount left after refund was made  # noqa: E501
│ │ +        Merchant's ID of the order  # noqa: E501
│ │  
│ │ -        :return: The remaining_amount of this RefundResponsePaymentData.  # noqa: E501
│ │ -        :rtype: float
│ │ +        :return: The id of this CardBindingMerchantOrder.  # noqa: E501
│ │ +        :rtype: str
│ │          """
│ │ -        return self._remaining_amount
│ │ +        return self._id
│ │  
│ │ -    @remaining_amount.setter
│ │ -    def remaining_amount(self, remaining_amount):
│ │ -        """Sets the remaining_amount of this RefundResponsePaymentData.
│ │ +    @id.setter
│ │ +    def id(self, id):
│ │ +        """Sets the id of this CardBindingMerchantOrder.
│ │  
│ │ -        Payment amount left after refund was made  # noqa: E501
│ │ +        Merchant's ID of the order  # noqa: E501
│ │  
│ │ -        :param remaining_amount: The remaining_amount of this RefundResponsePaymentData.  # noqa: E501
│ │ -        :type: float
│ │ +        :param id: The id of this CardBindingMerchantOrder.  # noqa: E501
│ │ +        :type: str
│ │          """
│ │ +        if id is None:
│ │ +            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
│ │ +        if id is not None and len(id) > 50:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `id`, length must be less than or equal to `50`"
│ │ +            )  # noqa: E501
│ │ +        if id is not None and len(id) < 1:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `id`, length must be greater than or equal to `1`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._remaining_amount = remaining_amount
│ │ +        self._id = id
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -112,15 +132,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(RefundResponsePaymentData, dict):
│ │ +        if issubclass(CardBindingMerchantOrder, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -128,15 +148,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, RefundResponsePaymentData):
│ │ +        if not isinstance(other, CardBindingMerchantOrder):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/refund_response_refund_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/refund_response_refund_data.py
│ │┄ Files 9% similar despite different names
│ │ @@ -34,30 +34,28 @@
│ │          "amount": "float",
│ │          "arn": "str",
│ │          "auth_code": "str",
│ │          "created": "str",
│ │          "currency": "str",
│ │          "decline_code": "str",
│ │          "decline_reason": "str",
│ │ -        "extended_decline_reason": "str",
│ │          "id": "str",
│ │          "is_3d": "bool",
│ │          "rrn": "str",
│ │          "status": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │          "amount": "amount",
│ │          "arn": "arn",
│ │          "auth_code": "auth_code",
│ │          "created": "created",
│ │          "currency": "currency",
│ │          "decline_code": "decline_code",
│ │          "decline_reason": "decline_reason",
│ │ -        "extended_decline_reason": "extended_decline_reason",
│ │          "id": "id",
│ │          "is_3d": "is_3d",
│ │          "rrn": "rrn",
│ │          "status": "status",
│ │      }
│ │  
│ │      def __init__(
│ │ @@ -65,30 +63,28 @@
│ │          amount=None,
│ │          arn=None,
│ │          auth_code=None,
│ │          created=None,
│ │          currency=None,
│ │          decline_code=None,
│ │          decline_reason=None,
│ │ -        extended_decline_reason=None,
│ │          id=None,
│ │          is_3d=None,
│ │          rrn=None,
│ │          status=None,
│ │      ):  # noqa: E501
│ │          """RefundResponseRefundData - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._amount = None
│ │          self._arn = None
│ │          self._auth_code = None
│ │          self._created = None
│ │          self._currency = None
│ │          self._decline_code = None
│ │          self._decline_reason = None
│ │ -        self._extended_decline_reason = None
│ │          self._id = None
│ │          self._is_3d = None
│ │          self._rrn = None
│ │          self._status = None
│ │          self.discriminator = None
│ │  
│ │          if amount is not None:
│ │ @@ -101,16 +97,14 @@
│ │              self.created = created
│ │          if currency is not None:
│ │              self.currency = currency
│ │          if decline_code is not None:
│ │              self.decline_code = decline_code
│ │          if decline_reason is not None:
│ │              self.decline_reason = decline_reason
│ │ -        if extended_decline_reason is not None:
│ │ -            self.extended_decline_reason = extended_decline_reason
│ │          if id is not None:
│ │              self.id = id
│ │          if is_3d is not None:
│ │              self.is_3d = is_3d
│ │          if rrn is not None:
│ │              self.rrn = rrn
│ │          if status is not None:
│ │ @@ -274,37 +268,14 @@
│ │          :param decline_reason: The decline_reason of this RefundResponseRefundData.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._decline_reason = decline_reason
│ │  
│ │      @property
│ │ -    def extended_decline_reason(self):
│ │ -        """Gets the extended_decline_reason of this RefundResponseRefundData.  # noqa: E501
│ │ -
│ │ -        Original decline reason. Can be presented in responses if original network response code is presented and option is enabled for Merchant. Not presented by default, ask Unlimint manager to enable it if needed.  # noqa: E501
│ │ -
│ │ -        :return: The extended_decline_reason of this RefundResponseRefundData.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._extended_decline_reason
│ │ -
│ │ -    @extended_decline_reason.setter
│ │ -    def extended_decline_reason(self, extended_decline_reason):
│ │ -        """Sets the extended_decline_reason of this RefundResponseRefundData.
│ │ -
│ │ -        Original decline reason. Can be presented in responses if original network response code is presented and option is enabled for Merchant. Not presented by default, ask Unlimint manager to enable it if needed.  # noqa: E501
│ │ -
│ │ -        :param extended_decline_reason: The extended_decline_reason of this RefundResponseRefundData.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._extended_decline_reason = extended_decline_reason
│ │ -
│ │ -    @property
│ │      def id(self):
│ │          """Gets the id of this RefundResponseRefundData.  # noqa: E501
│ │  
│ │          ID of the newly created refund in CardPay system  # noqa: E501
│ │  
│ │          :return: The id of this RefundResponseRefundData.  # noqa: E501
│ │          :rtype: str
│ │   --- cardpay-3.45.8/cardpay/model/refund_update_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/refund_update_request.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/refund_update_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/refund_update_response.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/refunds_list.py
│ ├── +++ cardpay-3.6.21/cardpay/model/refunds_list.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/renamed_plan_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/renamed_plan_data.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/reports_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/payment_methods_response.py
│ │┄ Files 23% similar despite different names
│ │ @@ -13,125 +13,114 @@
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │  
│ │ -class ReportsData(object):
│ │ +class PaymentMethodsResponse(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │ -    swagger_types = {
│ │ -        "end_date": "date",
│ │ -        "report_type": "list[str]",
│ │ -        "start_date": "date",
│ │ -    }
│ │ -
│ │ -    attribute_map = {
│ │ -        "end_date": "end_date",
│ │ -        "report_type": "report_type",
│ │ -        "start_date": "start_date",
│ │ -    }
│ │ -
│ │ -    def __init__(self, end_date=None, report_type=None, start_date=None):  # noqa: E501
│ │ -        """ReportsData - a model defined in Swagger"""  # noqa: E501
│ │ -
│ │ -        self._end_date = None
│ │ -        self._report_type = None
│ │ -        self._start_date = None
│ │ +    swagger_types = {"brands": "list[str]", "category": "str", "name": "str"}
│ │ +
│ │ +    attribute_map = {"brands": "brands", "category": "category", "name": "name"}
│ │ +
│ │ +    def __init__(self, brands=None, category=None, name=None):  # noqa: E501
│ │ +        """PaymentMethodsResponse - a model defined in Swagger"""  # noqa: E501
│ │ +
│ │ +        self._brands = None
│ │ +        self._category = None
│ │ +        self._name = None
│ │          self.discriminator = None
│ │  
│ │ -        if end_date is not None:
│ │ -            self.end_date = end_date
│ │ -        if report_type is not None:
│ │ -            self.report_type = report_type
│ │ -        self.start_date = start_date
│ │ +        if brands is not None:
│ │ +            self.brands = brands
│ │ +        if category is not None:
│ │ +            self.category = category
│ │ +        if name is not None:
│ │ +            self.name = name
│ │  
│ │      @property
│ │ -    def end_date(self):
│ │ -        """Gets the end_date of this ReportsData.  # noqa: E501
│ │ +    def brands(self):
│ │ +        """Gets the brands of this PaymentMethodsResponse.  # noqa: E501
│ │  
│ │ -        End date of period on which the reports were generated. Period between dates is no more than 7 days.  The format is yyyy-MM-dd  If ‘end_date’ is skipped then default value is used: ‘start_date’ + 7 days  # noqa: E501
│ │ +        Available Card Brands, is presented only for 'BANKCARD' payment method  # noqa: E501
│ │  
│ │ -        :return: The end_date of this ReportsData.  # noqa: E501
│ │ -        :rtype: date
│ │ +        :return: The brands of this PaymentMethodsResponse.  # noqa: E501
│ │ +        :rtype: list[str]
│ │          """
│ │ -        return self._end_date
│ │ +        return self._brands
│ │  
│ │ -    @end_date.setter
│ │ -    def end_date(self, end_date):
│ │ -        """Sets the end_date of this ReportsData.
│ │ +    @brands.setter
│ │ +    def brands(self, brands):
│ │ +        """Sets the brands of this PaymentMethodsResponse.
│ │  
│ │ -        End date of period on which the reports were generated. Period between dates is no more than 7 days.  The format is yyyy-MM-dd  If ‘end_date’ is skipped then default value is used: ‘start_date’ + 7 days  # noqa: E501
│ │ +        Available Card Brands, is presented only for 'BANKCARD' payment method  # noqa: E501
│ │  
│ │ -        :param end_date: The end_date of this ReportsData.  # noqa: E501
│ │ -        :type: date
│ │ +        :param brands: The brands of this PaymentMethodsResponse.  # noqa: E501
│ │ +        :type: list[str]
│ │          """
│ │  
│ │ -        self._end_date = end_date
│ │ +        self._brands = brands
│ │  
│ │      @property
│ │ -    def report_type(self):
│ │ -        """Gets the report_type of this ReportsData.  # noqa: E501
│ │ +    def category(self):
│ │ +        """Gets the category of this PaymentMethodsResponse.  # noqa: E501
│ │  
│ │ -        Specific report type. Now are available: \"regular_settlement\", \"icpp_settlement\"  # noqa: E501
│ │ +        Payment method category  # noqa: E501
│ │  
│ │ -        :return: The report_type of this ReportsData.  # noqa: E501
│ │ -        :rtype: list[str]
│ │ +        :return: The category of this PaymentMethodsResponse.  # noqa: E501
│ │ +        :rtype: str
│ │          """
│ │ -        return self._report_type
│ │ +        return self._category
│ │  
│ │ -    @report_type.setter
│ │ -    def report_type(self, report_type):
│ │ -        """Sets the report_type of this ReportsData.
│ │ +    @category.setter
│ │ +    def category(self, category):
│ │ +        """Sets the category of this PaymentMethodsResponse.
│ │  
│ │ -        Specific report type. Now are available: \"regular_settlement\", \"icpp_settlement\"  # noqa: E501
│ │ +        Payment method category  # noqa: E501
│ │  
│ │ -        :param report_type: The report_type of this ReportsData.  # noqa: E501
│ │ -        :type: list[str]
│ │ +        :param category: The category of this PaymentMethodsResponse.  # noqa: E501
│ │ +        :type: str
│ │          """
│ │  
│ │ -        self._report_type = report_type
│ │ +        self._category = category
│ │  
│ │      @property
│ │ -    def start_date(self):
│ │ -        """Gets the start_date of this ReportsData.  # noqa: E501
│ │ +    def name(self):
│ │ +        """Gets the name of this PaymentMethodsResponse.  # noqa: E501
│ │  
│ │ -        Start date of period on which the reports were generated. The format is yyyy-MM-dd  # noqa: E501
│ │ +        Payment method name  # noqa: E501
│ │  
│ │ -        :return: The start_date of this ReportsData.  # noqa: E501
│ │ -        :rtype: date
│ │ +        :return: The name of this PaymentMethodsResponse.  # noqa: E501
│ │ +        :rtype: str
│ │          """
│ │ -        return self._start_date
│ │ +        return self._name
│ │  
│ │ -    @start_date.setter
│ │ -    def start_date(self, start_date):
│ │ -        """Sets the start_date of this ReportsData.
│ │ +    @name.setter
│ │ +    def name(self, name):
│ │ +        """Sets the name of this PaymentMethodsResponse.
│ │  
│ │ -        Start date of period on which the reports were generated. The format is yyyy-MM-dd  # noqa: E501
│ │ +        Payment method name  # noqa: E501
│ │  
│ │ -        :param start_date: The start_date of this ReportsData.  # noqa: E501
│ │ -        :type: date
│ │ +        :param name: The name of this PaymentMethodsResponse.  # noqa: E501
│ │ +        :type: str
│ │          """
│ │ -        if start_date is None:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `start_date`, must not be `None`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._start_date = start_date
│ │ +        self._name = name
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -149,15 +138,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(ReportsData, dict):
│ │ +        if issubclass(PaymentMethodsResponse, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -165,15 +154,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, ReportsData):
│ │ +        if not isinstance(other, PaymentMethodsResponse):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │ ├── encoding
│ │ │ @@ -1 +1 @@
│ │ │ -utf-8
│ │ │ +us-ascii
│ │   --- cardpay-3.45.8/cardpay/model/request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/request.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/request_updated_transaction_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/request_updated_transaction_data.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/response_updated_transaction_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/response_updated_transaction_data.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/return_urls.py
│ ├── +++ cardpay-3.6.21/cardpay/model/return_urls.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/scheduled_by_merchant_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/scheduled_by_merchant_data.py
│ │┄ Files 18% similar despite different names
│ │ @@ -32,91 +32,73 @@
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │          "amount": "float",
│ │ -        "contract_number": "str",
│ │          "currency": "str",
│ │          "dynamic_descriptor": "str",
│ │          "filing": "RecurringResponseFiling",
│ │          "generate_token": "bool",
│ │          "initiator": "str",
│ │ -        "network_trans_id": "str",
│ │          "note": "str",
│ │          "scheduled_type": "str",
│ │ -        "three_ds_challenge_indicator": "str",
│ │          "trans_type": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │          "amount": "amount",
│ │ -        "contract_number": "contract_number",
│ │          "currency": "currency",
│ │          "dynamic_descriptor": "dynamic_descriptor",
│ │          "filing": "filing",
│ │          "generate_token": "generate_token",
│ │          "initiator": "initiator",
│ │ -        "network_trans_id": "network_trans_id",
│ │          "note": "note",
│ │          "scheduled_type": "scheduled_type",
│ │ -        "three_ds_challenge_indicator": "three_ds_challenge_indicator",
│ │          "trans_type": "trans_type",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │          amount=None,
│ │ -        contract_number=None,
│ │          currency=None,
│ │          dynamic_descriptor=None,
│ │          filing=None,
│ │          generate_token=None,
│ │          initiator=None,
│ │ -        network_trans_id=None,
│ │          note=None,
│ │          scheduled_type=None,
│ │ -        three_ds_challenge_indicator=None,
│ │          trans_type=None,
│ │      ):  # noqa: E501
│ │          """ScheduledByMerchantData - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._amount = None
│ │ -        self._contract_number = None
│ │          self._currency = None
│ │          self._dynamic_descriptor = None
│ │          self._filing = None
│ │          self._generate_token = None
│ │          self._initiator = None
│ │ -        self._network_trans_id = None
│ │          self._note = None
│ │          self._scheduled_type = None
│ │ -        self._three_ds_challenge_indicator = None
│ │          self._trans_type = None
│ │          self.discriminator = None
│ │  
│ │          self.amount = amount
│ │ -        if contract_number is not None:
│ │ -            self.contract_number = contract_number
│ │          self.currency = currency
│ │          if dynamic_descriptor is not None:
│ │              self.dynamic_descriptor = dynamic_descriptor
│ │          if filing is not None:
│ │              self.filing = filing
│ │          if generate_token is not None:
│ │              self.generate_token = generate_token
│ │          self.initiator = initiator
│ │ -        if network_trans_id is not None:
│ │ -            self.network_trans_id = network_trans_id
│ │          if note is not None:
│ │              self.note = note
│ │          self.scheduled_type = scheduled_type
│ │ -        if three_ds_challenge_indicator is not None:
│ │ -            self.three_ds_challenge_indicator = three_ds_challenge_indicator
│ │          if trans_type is not None:
│ │              self.trans_type = trans_type
│ │  
│ │      @property
│ │      def amount(self):
│ │          """Gets the amount of this ScheduledByMerchantData.  # noqa: E501
│ │  
│ │ @@ -140,37 +122,14 @@
│ │              raise ValueError(
│ │                  "Invalid value for `amount`, must not be `None`"
│ │              )  # noqa: E501
│ │  
│ │          self._amount = amount
│ │  
│ │      @property
│ │ -    def contract_number(self):
│ │ -        """Gets the contract_number of this ScheduledByMerchantData.  # noqa: E501
│ │ -
│ │ -        Contract number between customer and merchant. Required for Mexican merchants for scheduled payments.  # noqa: E501
│ │ -
│ │ -        :return: The contract_number of this ScheduledByMerchantData.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._contract_number
│ │ -
│ │ -    @contract_number.setter
│ │ -    def contract_number(self, contract_number):
│ │ -        """Sets the contract_number of this ScheduledByMerchantData.
│ │ -
│ │ -        Contract number between customer and merchant. Required for Mexican merchants for scheduled payments.  # noqa: E501
│ │ -
│ │ -        :param contract_number: The contract_number of this ScheduledByMerchantData.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._contract_number = contract_number
│ │ -
│ │ -    @property
│ │      def currency(self):
│ │          """Gets the currency of this ScheduledByMerchantData.  # noqa: E501
│ │  
│ │          [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code  # noqa: E501
│ │  
│ │          :return: The currency of this ScheduledByMerchantData.  # noqa: E501
│ │          :rtype: str
│ │ @@ -298,37 +257,14 @@
│ │              raise ValueError(
│ │                  r"Invalid value for `initiator`, must be a follow pattern or equal to `/mit|cit/`"
│ │              )  # noqa: E501
│ │  
│ │          self._initiator = initiator
│ │  
│ │      @property
│ │ -    def network_trans_id(self):
│ │ -        """Gets the network_trans_id of this ScheduledByMerchantData.  # noqa: E501
│ │ -
│ │ -        Network Reference Number of original transaction  # noqa: E501
│ │ -
│ │ -        :return: The network_trans_id of this ScheduledByMerchantData.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._network_trans_id
│ │ -
│ │ -    @network_trans_id.setter
│ │ -    def network_trans_id(self, network_trans_id):
│ │ -        """Sets the network_trans_id of this ScheduledByMerchantData.
│ │ -
│ │ -        Network Reference Number of original transaction  # noqa: E501
│ │ -
│ │ -        :param network_trans_id: The network_trans_id of this ScheduledByMerchantData.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._network_trans_id = network_trans_id
│ │ -
│ │ -    @property
│ │      def note(self):
│ │          """Gets the note of this ScheduledByMerchantData.  # noqa: E501
│ │  
│ │          Note about the recurring that will not be displayed to customer.  # noqa: E501
│ │  
│ │          :return: The note of this ScheduledByMerchantData.  # noqa: E501
│ │          :rtype: str
│ │ @@ -384,41 +320,14 @@
│ │          ):  # noqa: E501
│ │              raise ValueError(
│ │                  r"Invalid value for `scheduled_type`, must be a follow pattern or equal to `/SM/`"
│ │              )  # noqa: E501
│ │  
│ │          self._scheduled_type = scheduled_type
│ │  
│ │ -    @property
│ │ -    def three_ds_challenge_indicator(self):
│ │ -        """Gets the three_ds_challenge_indicator of this ScheduledByMerchantData.  # noqa: E501
│ │ -
│ │ -
│ │ -        :return: The three_ds_challenge_indicator of this ScheduledByMerchantData.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._three_ds_challenge_indicator
│ │ -
│ │ -    @three_ds_challenge_indicator.setter
│ │ -    def three_ds_challenge_indicator(self, three_ds_challenge_indicator):
│ │ -        """Sets the three_ds_challenge_indicator of this ScheduledByMerchantData.
│ │ -
│ │ -
│ │ -        :param three_ds_challenge_indicator: The three_ds_challenge_indicator of this ScheduledByMerchantData.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -        if three_ds_challenge_indicator is not None and not re.search(
│ │ -            r"01|04", three_ds_challenge_indicator
│ │ -        ):  # noqa: E501
│ │ -            raise ValueError(
│ │ -                r"Invalid value for `three_ds_challenge_indicator`, must be a follow pattern or equal to `/01|04/`"
│ │ -            )  # noqa: E501
│ │ -
│ │ -        self._three_ds_challenge_indicator = three_ds_challenge_indicator
│ │ -
│ │      class TransType(object):
│ │          _01 = "01"
│ │          _03 = "03"
│ │          _10 = "10"
│ │          _11 = "11"
│ │          _28 = "28"
│ │   --- cardpay-3.45.8/cardpay/model/scheduled_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/subscription_filter_parameters.py
│ │┄ Files 25% similar despite different names
│ │ @@ -12,444 +12,447 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ -from cardpay.model.plan import Plan  # noqa: F401,E501
│ │  
│ │ -
│ │ -class ScheduledData(object):
│ │ +class SubscriptionFilterParameters(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │ -        "contract_number": "str",
│ │ -        "dynamic_descriptor": "str",
│ │ -        "encrypted_data": "str",
│ │ -        "generate_token": "bool",
│ │ -        "initial_amount": "float",
│ │ -        "initiator": "str",
│ │ -        "note": "str",
│ │ -        "plan": "Plan",
│ │ -        "scheduled_type": "str",
│ │ -        "subscription_start": "datetime",
│ │ -        "three_ds_challenge_indicator": "str",
│ │ -        "trans_type": "str",
│ │ +        "request_id": "str",
│ │ +        "max_count": "int",
│ │ +        "offset": "int",
│ │ +        "sort_order": "str",
│ │ +        "customer_id": "str",
│ │ +        "plan_id": "str",
│ │ +        "start_time": "datetime",
│ │ +        "end_time": "datetime",
│ │ +        "currency": "str",
│ │ +        "status": "str",
│ │ +        "type": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │ -        "contract_number": "contract_number",
│ │ -        "dynamic_descriptor": "dynamic_descriptor",
│ │ -        "encrypted_data": "encrypted_data",
│ │ -        "generate_token": "generate_token",
│ │ -        "initial_amount": "initial_amount",
│ │ -        "initiator": "initiator",
│ │ -        "note": "note",
│ │ -        "plan": "plan",
│ │ -        "scheduled_type": "scheduled_type",
│ │ -        "subscription_start": "subscription_start",
│ │ -        "three_ds_challenge_indicator": "three_ds_challenge_indicator",
│ │ -        "trans_type": "trans_type",
│ │ +        "request_id": "request_id",
│ │ +        "max_count": "max_count",
│ │ +        "offset": "offset",
│ │ +        "sort_order": "sort_order",
│ │ +        "customer_id": "customer_id",
│ │ +        "plan_id": "plan_id",
│ │ +        "start_time": "start_time",
│ │ +        "end_time": "end_time",
│ │ +        "currency": "currency",
│ │ +        "status": "status",
│ │ +        "type": "type",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │ -        contract_number=None,
│ │ -        dynamic_descriptor=None,
│ │ -        encrypted_data=None,
│ │ -        generate_token=None,
│ │ -        initial_amount=None,
│ │ -        initiator=None,
│ │ -        note=None,
│ │ -        plan=None,
│ │ -        scheduled_type=None,
│ │ -        subscription_start=None,
│ │ -        three_ds_challenge_indicator=None,
│ │ -        trans_type=None,
│ │ +        request_id=None,
│ │ +        max_count=None,
│ │ +        offset=None,
│ │ +        sort_order=None,
│ │ +        customer_id=None,
│ │ +        plan_id=None,
│ │ +        start_time=None,
│ │ +        end_time=None,
│ │ +        currency=None,
│ │ +        status=None,
│ │ +        type=None,
│ │      ):  # noqa: E501
│ │ -        """ScheduledData - a model defined in Swagger"""  # noqa: E501
│ │ +        """SubscriptionFilterParameters - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._contract_number = None
│ │ -        self._dynamic_descriptor = None
│ │ -        self._encrypted_data = None
│ │ -        self._generate_token = None
│ │ -        self._initial_amount = None
│ │ -        self._initiator = None
│ │ -        self._note = None
│ │ -        self._plan = None
│ │ -        self._scheduled_type = None
│ │ -        self._subscription_start = None
│ │ -        self._three_ds_challenge_indicator = None
│ │ -        self._trans_type = None
│ │ +        self._request_id = None
│ │ +        self._max_count = None
│ │ +        self._offset = None
│ │ +        self._sort_order = None
│ │ +        self._customer_id = None
│ │ +        self._plan_id = None
│ │ +        self._start_time = None
│ │ +        self._end_time = None
│ │ +        self._currency = None
│ │ +        self._status = None
│ │ +        self._type = None
│ │          self.discriminator = None
│ │  
│ │ -        if contract_number is not None:
│ │ -            self.contract_number = contract_number
│ │ -        if dynamic_descriptor is not None:
│ │ -            self.dynamic_descriptor = dynamic_descriptor
│ │ -        if encrypted_data is not None:
│ │ -            self.encrypted_data = encrypted_data
│ │ -        if generate_token is not None:
│ │ -            self.generate_token = generate_token
│ │ -        if initial_amount is not None:
│ │ -            self.initial_amount = initial_amount
│ │ -        self.initiator = initiator
│ │ -        if note is not None:
│ │ -            self.note = note
│ │ -        if plan is not None:
│ │ -            self.plan = plan
│ │ -        if scheduled_type is not None:
│ │ -            self.scheduled_type = scheduled_type
│ │ -        if subscription_start is not None:
│ │ -            self.subscription_start = subscription_start
│ │ -        if three_ds_challenge_indicator is not None:
│ │ -            self.three_ds_challenge_indicator = three_ds_challenge_indicator
│ │ -        if trans_type is not None:
│ │ -            self.trans_type = trans_type
│ │ -
│ │ -    @property
│ │ -    def contract_number(self):
│ │ -        """Gets the contract_number of this ScheduledData.  # noqa: E501
│ │ -
│ │ -        Contract number between customer and merchant. Required for Mexican merchants for scheduled payments.  # noqa: E501
│ │ -
│ │ -        :return: The contract_number of this ScheduledData.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._contract_number
│ │ -
│ │ -    @contract_number.setter
│ │ -    def contract_number(self, contract_number):
│ │ -        """Sets the contract_number of this ScheduledData.
│ │ -
│ │ -        Contract number between customer and merchant. Required for Mexican merchants for scheduled payments.  # noqa: E501
│ │ -
│ │ -        :param contract_number: The contract_number of this ScheduledData.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._contract_number = contract_number
│ │ +        self.request_id = request_id
│ │ +        if max_count is not None:
│ │ +            self.max_count = max_count
│ │ +        if offset is not None:
│ │ +            self.offset = offset
│ │ +        if sort_order is not None:
│ │ +            self.sort_order = sort_order
│ │ +        if customer_id is not None:
│ │ +            self.customer_id = customer_id
│ │ +        if plan_id is not None:
│ │ +            self.plan_id = plan_id
│ │ +        if start_time is not None:
│ │ +            self.start_time = start_time
│ │ +        if end_time is not None:
│ │ +            self.end_time = end_time
│ │ +        if currency is not None:
│ │ +            self.currency = currency
│ │ +        if status is not None:
│ │ +            self.status = status
│ │ +        if type is not None:
│ │ +            self.type = type
│ │  
│ │      @property
│ │ -    def dynamic_descriptor(self):
│ │ -        """Gets the dynamic_descriptor of this ScheduledData.  # noqa: E501
│ │ +    def request_id(self):
│ │ +        """Gets the request_id of this SubscriptionFilterParameters.  # noqa: E501
│ │  
│ │ -        Short description of the service or product, must be enabled by CardPay manager to be used.  # noqa: E501
│ │ +        Request ID  # noqa: E501
│ │  
│ │ -        :return: The dynamic_descriptor of this ScheduledData.  # noqa: E501
│ │ +        :return: The request_id of this SubscriptionFilterParameters.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._dynamic_descriptor
│ │ +        return self._request_id
│ │  
│ │ -    @dynamic_descriptor.setter
│ │ -    def dynamic_descriptor(self, dynamic_descriptor):
│ │ -        """Sets the dynamic_descriptor of this ScheduledData.
│ │ +    @request_id.setter
│ │ +    def request_id(self, request_id):
│ │ +        """Sets the request_id of this SubscriptionFilterParameters.
│ │  
│ │ -        Short description of the service or product, must be enabled by CardPay manager to be used.  # noqa: E501
│ │ +        Request ID  # noqa: E501
│ │  
│ │ -        :param dynamic_descriptor: The dynamic_descriptor of this ScheduledData.  # noqa: E501
│ │ +        :param request_id: The request_id of this SubscriptionFilterParameters.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if dynamic_descriptor is not None and len(dynamic_descriptor) > 25:
│ │ +        if request_id is None:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `request_id`, must not be `None`"
│ │ +            )  # noqa: E501
│ │ +        if request_id is not None and len(request_id) > 50:
│ │              raise ValueError(
│ │ -                "Invalid value for `dynamic_descriptor`, length must be less than or equal to `25`"
│ │ +                "Invalid value for `request_id`, length must be less than or equal to `50`"
│ │              )  # noqa: E501
│ │ -        if dynamic_descriptor is not None and len(dynamic_descriptor) < 0:
│ │ +        if request_id is not None and len(request_id) < 1:
│ │              raise ValueError(
│ │ -                "Invalid value for `dynamic_descriptor`, length must be greater than or equal to `0`"
│ │ +                "Invalid value for `request_id`, length must be greater than or equal to `1`"
│ │              )  # noqa: E501
│ │  
│ │ -        self._dynamic_descriptor = dynamic_descriptor
│ │ +        self._request_id = request_id
│ │  
│ │      @property
│ │ -    def encrypted_data(self):
│ │ -        """Gets the encrypted_data of this ScheduledData.  # noqa: E501
│ │ +    def max_count(self):
│ │ +        """Gets the max_count of this SubscriptionFilterParameters.  # noqa: E501
│ │  
│ │ -        The encrypted payment credentials encoded in base64. *(for APPLEPAY payment method only)*  # noqa: E501
│ │ +        Limit number of returned subscriptions (must be less than 10000, default is 1000)  # noqa: E501
│ │  
│ │ -        :return: The encrypted_data of this ScheduledData.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The max_count of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :rtype: int
│ │          """
│ │ -        return self._encrypted_data
│ │ +        return self._max_count
│ │  
│ │ -    @encrypted_data.setter
│ │ -    def encrypted_data(self, encrypted_data):
│ │ -        """Sets the encrypted_data of this ScheduledData.
│ │ +    @max_count.setter
│ │ +    def max_count(self, max_count):
│ │ +        """Sets the max_count of this SubscriptionFilterParameters.
│ │  
│ │ -        The encrypted payment credentials encoded in base64. *(for APPLEPAY payment method only)*  # noqa: E501
│ │ +        Limit number of returned subscriptions (must be less than 10000, default is 1000)  # noqa: E501
│ │  
│ │ -        :param encrypted_data: The encrypted_data of this ScheduledData.  # noqa: E501
│ │ -        :type: str
│ │ +        :param max_count: The max_count of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :type: int
│ │          """
│ │ -        if encrypted_data is not None and len(encrypted_data) > 10000:
│ │ +        if max_count is not None and max_count > 10000:  # noqa: E501
│ │              raise ValueError(
│ │ -                "Invalid value for `encrypted_data`, length must be less than or equal to `10000`"
│ │ +                "Invalid value for `max_count`, must be a value less than or equal to `10000`"
│ │              )  # noqa: E501
│ │ -        if encrypted_data is not None and len(encrypted_data) < 0:
│ │ +        if max_count is not None and max_count < 1:  # noqa: E501
│ │              raise ValueError(
│ │ -                "Invalid value for `encrypted_data`, length must be greater than or equal to `0`"
│ │ +                "Invalid value for `max_count`, must be a value greater than or equal to `1`"
│ │              )  # noqa: E501
│ │  
│ │ -        self._encrypted_data = encrypted_data
│ │ +        self._max_count = max_count
│ │  
│ │      @property
│ │ -    def generate_token(self):
│ │ -        """Gets the generate_token of this ScheduledData.  # noqa: E501
│ │ +    def offset(self):
│ │ +        """Gets the offset of this SubscriptionFilterParameters.  # noqa: E501
│ │  
│ │ -        This attribute can be received only in first recurring request. In all requests with recurring_id card.token can't be generated. If set to 'true', Card token will be generated and returned in GET response. Will be generated only for successful transactions (not for declined).  # noqa: E501
│ │ +        Offset (must be less than 10000)  # noqa: E501
│ │  
│ │ -        :return: The generate_token of this ScheduledData.  # noqa: E501
│ │ -        :rtype: bool
│ │ +        :return: The offset of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :rtype: int
│ │          """
│ │ -        return self._generate_token
│ │ +        return self._offset
│ │  
│ │ -    @generate_token.setter
│ │ -    def generate_token(self, generate_token):
│ │ -        """Sets the generate_token of this ScheduledData.
│ │ +    @offset.setter
│ │ +    def offset(self, offset):
│ │ +        """Sets the offset of this SubscriptionFilterParameters.
│ │  
│ │ -        This attribute can be received only in first recurring request. In all requests with recurring_id card.token can't be generated. If set to 'true', Card token will be generated and returned in GET response. Will be generated only for successful transactions (not for declined).  # noqa: E501
│ │ +        Offset (must be less than 10000)  # noqa: E501
│ │  
│ │ -        :param generate_token: The generate_token of this ScheduledData.  # noqa: E501
│ │ -        :type: bool
│ │ +        :param offset: The offset of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :type: int
│ │          """
│ │ +        if offset is not None and offset > 10000:  # noqa: E501
│ │ +            raise ValueError(
│ │ +                "Invalid value for `offset`, must be a value less than or equal to `10000`"
│ │ +            )  # noqa: E501
│ │ +        if offset is not None and offset < 0:  # noqa: E501
│ │ +            raise ValueError(
│ │ +                "Invalid value for `offset`, must be a value greater than or equal to `0`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._generate_token = generate_token
│ │ +        self._offset = offset
│ │  
│ │      @property
│ │ -    def initial_amount(self):
│ │ -        """Gets the initial_amount of this ScheduledData.  # noqa: E501
│ │ +    def sort_order(self):
│ │ +        """Gets the sort_order of this SubscriptionFilterParameters.  # noqa: E501
│ │  
│ │ -        The amount of subscription initiated transaction in selected currency with dot as a decimal separator, must be less than 100 millions  # noqa: E501
│ │ +        Sort based on order of results. 'asc' for ascending order or 'desc' for descending order (default value)  # noqa: E501
│ │  
│ │ -        :return: The initial_amount of this ScheduledData.  # noqa: E501
│ │ -        :rtype: float
│ │ +        :return: The sort_order of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :rtype: str
│ │          """
│ │ -        return self._initial_amount
│ │ +        return self._sort_order
│ │  
│ │ -    @initial_amount.setter
│ │ -    def initial_amount(self, initial_amount):
│ │ -        """Sets the initial_amount of this ScheduledData.
│ │ +    @sort_order.setter
│ │ +    def sort_order(self, sort_order):
│ │ +        """Sets the sort_order of this SubscriptionFilterParameters.
│ │  
│ │ -        The amount of subscription initiated transaction in selected currency with dot as a decimal separator, must be less than 100 millions  # noqa: E501
│ │ +        Sort based on order of results. 'asc' for ascending order or 'desc' for descending order (default value)  # noqa: E501
│ │  
│ │ -        :param initial_amount: The initial_amount of this ScheduledData.  # noqa: E501
│ │ -        :type: float
│ │ +        :param sort_order: The sort_order of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :type: str
│ │          """
│ │ +        if sort_order is not None and not re.search(
│ │ +            r"asc|desc", sort_order
│ │ +        ):  # noqa: E501
│ │ +            raise ValueError(
│ │ +                r"Invalid value for `sort_order`, must be a follow pattern or equal to `/asc|desc/`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._initial_amount = initial_amount
│ │ +        self._sort_order = sort_order
│ │  
│ │      @property
│ │ -    def initiator(self):
│ │ -        """Gets the initiator of this ScheduledData.  # noqa: E501
│ │ +    def customer_id(self):
│ │ +        """Gets the customer_id of this SubscriptionFilterParameters.  # noqa: E501
│ │  
│ │ -        Use `cit` for initiator attribute (cardholder initiated transaction).  # noqa: E501
│ │ +        Merchant identifier of customer account  # noqa: E501
│ │  
│ │ -        :return: The initiator of this ScheduledData.  # noqa: E501
│ │ +        :return: The customer_id of this SubscriptionFilterParameters.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._initiator
│ │ +        return self._customer_id
│ │  
│ │ -    @initiator.setter
│ │ -    def initiator(self, initiator):
│ │ -        """Sets the initiator of this ScheduledData.
│ │ +    @customer_id.setter
│ │ +    def customer_id(self, customer_id):
│ │ +        """Sets the customer_id of this SubscriptionFilterParameters.
│ │  
│ │ -        Use `cit` for initiator attribute (cardholder initiated transaction).  # noqa: E501
│ │ +        Merchant identifier of customer account  # noqa: E501
│ │  
│ │ -        :param initiator: The initiator of this ScheduledData.  # noqa: E501
│ │ +        :param customer_id: The customer_id of this SubscriptionFilterParameters.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if initiator is None:
│ │ +        if customer_id is not None and len(customer_id) > 32:
│ │              raise ValueError(
│ │ -                "Invalid value for `initiator`, must not be `None`"
│ │ +                "Invalid value for `customer_id`, length must be less than or equal to `32`"
│ │              )  # noqa: E501
│ │ -        if initiator is not None and not re.search(r"mit|cit", initiator):  # noqa: E501
│ │ +        if customer_id is not None and len(customer_id) < 0:
│ │              raise ValueError(
│ │ -                r"Invalid value for `initiator`, must be a follow pattern or equal to `/mit|cit/`"
│ │ +                "Invalid value for `customer_id`, length must be greater than or equal to `0`"
│ │              )  # noqa: E501
│ │  
│ │ -        self._initiator = initiator
│ │ +        self._customer_id = customer_id
│ │  
│ │      @property
│ │ -    def note(self):
│ │ -        """Gets the note of this ScheduledData.  # noqa: E501
│ │ +    def plan_id(self):
│ │ +        """Gets the plan_id of this SubscriptionFilterParameters.  # noqa: E501
│ │  
│ │ -        Note about the recurring that will not be displayed to customer.  # noqa: E501
│ │ +        Id of plan. Use for searching scheduled subscriptions by plan  # noqa: E501
│ │  
│ │ -        :return: The note of this ScheduledData.  # noqa: E501
│ │ +        :return: The plan_id of this SubscriptionFilterParameters.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._note
│ │ +        return self._plan_id
│ │  
│ │ -    @note.setter
│ │ -    def note(self, note):
│ │ -        """Sets the note of this ScheduledData.
│ │ +    @plan_id.setter
│ │ +    def plan_id(self, plan_id):
│ │ +        """Sets the plan_id of this SubscriptionFilterParameters.
│ │  
│ │ -        Note about the recurring that will not be displayed to customer.  # noqa: E501
│ │ +        Id of plan. Use for searching scheduled subscriptions by plan  # noqa: E501
│ │  
│ │ -        :param note: The note of this ScheduledData.  # noqa: E501
│ │ +        :param plan_id: The plan_id of this SubscriptionFilterParameters.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if note is not None and len(note) > 100:
│ │ +        if plan_id is not None and len(plan_id) > 32:
│ │              raise ValueError(
│ │ -                "Invalid value for `note`, length must be less than or equal to `100`"
│ │ +                "Invalid value for `plan_id`, length must be less than or equal to `32`"
│ │              )  # noqa: E501
│ │ -        if note is not None and len(note) < 0:
│ │ +        if plan_id is not None and len(plan_id) < 0:
│ │              raise ValueError(
│ │ -                "Invalid value for `note`, length must be greater than or equal to `0`"
│ │ +                "Invalid value for `plan_id`, length must be greater than or equal to `0`"
│ │              )  # noqa: E501
│ │  
│ │ -        self._note = note
│ │ +        self._plan_id = plan_id
│ │  
│ │      @property
│ │ -    def plan(self):
│ │ -        """Gets the plan of this ScheduledData.  # noqa: E501
│ │ +    def start_time(self):
│ │ +        """Gets the start_time of this SubscriptionFilterParameters.  # noqa: E501
│ │  
│ │ -        Plan data  # noqa: E501
│ │ +        Date and time up to milliseconds (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when requested period starts (inclusive), UTC time, default is 24 hours before 'end_time' (format: yyyy-MM-dd'T'HH:mm:ss'Z')  # noqa: E501
│ │  
│ │ -        :return: The plan of this ScheduledData.  # noqa: E501
│ │ -        :rtype: Plan
│ │ +        :return: The start_time of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :rtype: datetime
│ │          """
│ │ -        return self._plan
│ │ +        return self._start_time
│ │  
│ │ -    @plan.setter
│ │ -    def plan(self, plan):
│ │ -        """Sets the plan of this ScheduledData.
│ │ +    @start_time.setter
│ │ +    def start_time(self, start_time):
│ │ +        """Sets the start_time of this SubscriptionFilterParameters.
│ │  
│ │ -        Plan data  # noqa: E501
│ │ +        Date and time up to milliseconds (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when requested period starts (inclusive), UTC time, default is 24 hours before 'end_time' (format: yyyy-MM-dd'T'HH:mm:ss'Z')  # noqa: E501
│ │  
│ │ -        :param plan: The plan of this ScheduledData.  # noqa: E501
│ │ -        :type: Plan
│ │ +        :param start_time: The start_time of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :type: datetime
│ │          """
│ │  
│ │ -        self._plan = plan
│ │ +        self._start_time = start_time
│ │  
│ │      @property
│ │ -    def scheduled_type(self):
│ │ -        """Gets the scheduled_type of this ScheduledData.  # noqa: E501
│ │ +    def end_time(self):
│ │ +        """Gets the end_time of this SubscriptionFilterParameters.  # noqa: E501
│ │  
│ │ -        Scheduled payment type attribute. For typical scheduled payments should be absent or `SA` - scheduled by acquirer  # noqa: E501
│ │ +        Date and time up to milliseconds (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when requested period ends (not inclusive), UTC time, must be less than 7 days after 'start_time', default is current time (format: yyyy-MM-dd'T'HH:mm:ss'Z')  # noqa: E501
│ │  
│ │ -        :return: The scheduled_type of this ScheduledData.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The end_time of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :rtype: datetime
│ │          """
│ │ -        return self._scheduled_type
│ │ +        return self._end_time
│ │  
│ │ -    @scheduled_type.setter
│ │ -    def scheduled_type(self, scheduled_type):
│ │ -        """Sets the scheduled_type of this ScheduledData.
│ │ +    @end_time.setter
│ │ +    def end_time(self, end_time):
│ │ +        """Sets the end_time of this SubscriptionFilterParameters.
│ │  
│ │ -        Scheduled payment type attribute. For typical scheduled payments should be absent or `SA` - scheduled by acquirer  # noqa: E501
│ │ +        Date and time up to milliseconds (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when requested period ends (not inclusive), UTC time, must be less than 7 days after 'start_time', default is current time (format: yyyy-MM-dd'T'HH:mm:ss'Z')  # noqa: E501
│ │  
│ │ -        :param scheduled_type: The scheduled_type of this ScheduledData.  # noqa: E501
│ │ -        :type: str
│ │ +        :param end_time: The end_time of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :type: datetime
│ │          """
│ │ -        if scheduled_type is not None and not re.search(
│ │ -            r"SA", scheduled_type
│ │ -        ):  # noqa: E501
│ │ -            raise ValueError(
│ │ -                r"Invalid value for `scheduled_type`, must be a follow pattern or equal to `/SA/`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._scheduled_type = scheduled_type
│ │ +        self._end_time = end_time
│ │  
│ │      @property
│ │ -    def subscription_start(self):
│ │ -        """Gets the subscription_start of this ScheduledData.  # noqa: E501
│ │ +    def currency(self):
│ │ +        """Gets the currency of this SubscriptionFilterParameters.  # noqa: E501
│ │  
│ │ -        The time in 'yyyy-MM-dd' format when subscription will actually become activated (grace period).Leave it empty to activate subscription at once without any grace period applied.  # noqa: E501
│ │ +        [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of transactions currency  # noqa: E501
│ │  
│ │ -        :return: The subscription_start of this ScheduledData.  # noqa: E501
│ │ -        :rtype: datetime
│ │ +        :return: The currency of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :rtype: str
│ │          """
│ │ -        return self._subscription_start
│ │ +        return self._currency
│ │  
│ │ -    @subscription_start.setter
│ │ -    def subscription_start(self, subscription_start):
│ │ -        """Sets the subscription_start of this ScheduledData.
│ │ +    @currency.setter
│ │ +    def currency(self, currency):
│ │ +        """Sets the currency of this SubscriptionFilterParameters.
│ │  
│ │ -        The time in 'yyyy-MM-dd' format when subscription will actually become activated (grace period).Leave it empty to activate subscription at once without any grace period applied.  # noqa: E501
│ │ +        [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of transactions currency  # noqa: E501
│ │  
│ │ -        :param subscription_start: The subscription_start of this ScheduledData.  # noqa: E501
│ │ -        :type: datetime
│ │ +        :param currency: The currency of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :type: str
│ │          """
│ │  
│ │ -        self._subscription_start = subscription_start
│ │ +        self._currency = currency
│ │ +
│ │ +    class Status(object):
│ │ +        ACTIVE = "ACTIVE"
│ │ +        INACTIVE = "INACTIVE"
│ │ +        CANCELLED = "CANCELLED"
│ │ +        PAST_DUE = "PAST_DUE"
│ │ +        PENDING = "PENDING"
│ │ +        COMPLETED = "COMPLETED"
│ │ +        CARD_EXPIRED = "CARD_EXPIRED"
│ │ +        ACTIVATION_FAILED = "ACTIVATION_FAILED"
│ │  
│ │      @property
│ │ -    def three_ds_challenge_indicator(self):
│ │ -        """Gets the three_ds_challenge_indicator of this ScheduledData.  # noqa: E501
│ │ +    def status(self):
│ │ +        """Gets the status of this SubscriptionFilterParameters.  # noqa: E501
│ │  
│ │ +        Status of subscription  # noqa: E501
│ │  
│ │ -        :return: The three_ds_challenge_indicator of this ScheduledData.  # noqa: E501
│ │ +        :return: The status of this SubscriptionFilterParameters.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._three_ds_challenge_indicator
│ │ +        return self._status
│ │  
│ │ -    @three_ds_challenge_indicator.setter
│ │ -    def three_ds_challenge_indicator(self, three_ds_challenge_indicator):
│ │ -        """Sets the three_ds_challenge_indicator of this ScheduledData.
│ │ +    @status.setter
│ │ +    def status(self, status):
│ │ +        """Sets the status of this SubscriptionFilterParameters.
│ │  
│ │ +        Status of subscription  # noqa: E501
│ │  
│ │ -        :param three_ds_challenge_indicator: The three_ds_challenge_indicator of this ScheduledData.  # noqa: E501
│ │ +        :param status: The status of this SubscriptionFilterParameters.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if three_ds_challenge_indicator is not None and not re.search(
│ │ -            r"01|04", three_ds_challenge_indicator
│ │ -        ):  # noqa: E501
│ │ +        allowed_values = [
│ │ +            "ACTIVE",
│ │ +            "INACTIVE",
│ │ +            "CANCELLED",
│ │ +            "PAST_DUE",
│ │ +            "PENDING",
│ │ +            "COMPLETED",
│ │ +            "CARD_EXPIRED",
│ │ +            "ACTIVATION_FAILED",
│ │ +        ]  # noqa: E501
│ │ +        if status not in allowed_values:
│ │              raise ValueError(
│ │ -                r"Invalid value for `three_ds_challenge_indicator`, must be a follow pattern or equal to `/01|04/`"
│ │ -            )  # noqa: E501
│ │ +                "Invalid value for `status` ({0}), must be one of {1}".format(  # noqa: E501
│ │ +                    status, allowed_values
│ │ +                )
│ │ +            )
│ │  
│ │ -        self._three_ds_challenge_indicator = three_ds_challenge_indicator
│ │ +        self._status = status
│ │  
│ │ -    class TransType(object):
│ │ -        _01 = "01"
│ │ -        _03 = "03"
│ │ -        _10 = "10"
│ │ -        _11 = "11"
│ │ -        _28 = "28"
│ │ +    class Type(object):
│ │ +        ONECLICK = "ONECLICK"
│ │ +        SCHEDULED = "SCHEDULED"
│ │ +        INSTALLMENT = "INSTALLMENT"
│ │  
│ │      @property
│ │ -    def trans_type(self):
│ │ -        """Gets the trans_type of this ScheduledData.  # noqa: E501
│ │ +    def type(self):
│ │ +        """Gets the type of this SubscriptionFilterParameters.  # noqa: E501
│ │  
│ │ +        Type of subscription. 'ONECLICK' type will be ignored.  # noqa: E501
│ │  
│ │ -        :return: The trans_type of this ScheduledData.  # noqa: E501
│ │ +        :return: The type of this SubscriptionFilterParameters.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._trans_type
│ │ +        return self._type
│ │  
│ │ -    @trans_type.setter
│ │ -    def trans_type(self, trans_type):
│ │ -        """Sets the trans_type of this ScheduledData.
│ │ +    @type.setter
│ │ +    def type(self, type):
│ │ +        """Sets the type of this SubscriptionFilterParameters.
│ │  
│ │ +        Type of subscription. 'ONECLICK' type will be ignored.  # noqa: E501
│ │  
│ │ -        :param trans_type: The trans_type of this ScheduledData.  # noqa: E501
│ │ +        :param type: The type of this SubscriptionFilterParameters.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        allowed_values = ["01", "03", "10", "11", "28"]  # noqa: E501
│ │ -        if trans_type not in allowed_values:
│ │ +        allowed_values = ["ONECLICK", "SCHEDULED", "INSTALLMENT"]  # noqa: E501
│ │ +        if type not in allowed_values:
│ │              raise ValueError(
│ │ -                "Invalid value for `trans_type` ({0}), must be one of {1}".format(  # noqa: E501
│ │ -                    trans_type, allowed_values
│ │ +                "Invalid value for `type` ({0}), must be one of {1}".format(  # noqa: E501
│ │ +                    type, allowed_values
│ │                  )
│ │              )
│ │  
│ │ -        self._trans_type = trans_type
│ │ +        self._type = type
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -467,15 +470,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(ScheduledData, dict):
│ │ +        if issubclass(SubscriptionFilterParameters, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -483,15 +486,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, ScheduledData):
│ │ +        if not isinstance(other, SubscriptionFilterParameters):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/shipping_address.py
│ ├── +++ cardpay-3.6.21/cardpay/model/mobile_customer_response.py
│ │┄ Files 24% similar despite different names
│ │ @@ -13,271 +13,272 @@
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │  
│ │ -class ShippingAddress(object):
│ │ +class MobileCustomerResponse(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │ -        "addr_line_1": "str",
│ │ -        "addr_line_2": "str",
│ │ -        "city": "str",
│ │ -        "country": "str",
│ │ +        "email": "str",
│ │ +        "full_name": "str",
│ │ +        "home_phone": "str",
│ │ +        "id": "str",
│ │ +        "ip": "str",
│ │ +        "locale": "str",
│ │          "phone": "str",
│ │ -        "state": "str",
│ │ -        "zip": "str",
│ │ +        "work_phone": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │ -        "addr_line_1": "addr_line_1",
│ │ -        "addr_line_2": "addr_line_2",
│ │ -        "city": "city",
│ │ -        "country": "country",
│ │ +        "email": "email",
│ │ +        "full_name": "fullName",
│ │ +        "home_phone": "homePhone",
│ │ +        "id": "id",
│ │ +        "ip": "ip",
│ │ +        "locale": "locale",
│ │          "phone": "phone",
│ │ -        "state": "state",
│ │ -        "zip": "zip",
│ │ +        "work_phone": "workPhone",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │ -        addr_line_1=None,
│ │ -        addr_line_2=None,
│ │ -        city=None,
│ │ -        country=None,
│ │ +        email=None,
│ │ +        full_name=None,
│ │ +        home_phone=None,
│ │ +        id=None,
│ │ +        ip=None,
│ │ +        locale=None,
│ │          phone=None,
│ │ -        state=None,
│ │ -        zip=None,
│ │ +        work_phone=None,
│ │      ):  # noqa: E501
│ │ -        """ShippingAddress - a model defined in Swagger"""  # noqa: E501
│ │ +        """MobileCustomerResponse - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._addr_line_1 = None
│ │ -        self._addr_line_2 = None
│ │ -        self._city = None
│ │ -        self._country = None
│ │ +        self._email = None
│ │ +        self._full_name = None
│ │ +        self._home_phone = None
│ │ +        self._id = None
│ │ +        self._ip = None
│ │ +        self._locale = None
│ │          self._phone = None
│ │ -        self._state = None
│ │ -        self._zip = None
│ │ +        self._work_phone = None
│ │          self.discriminator = None
│ │  
│ │ -        if addr_line_1 is not None:
│ │ -            self.addr_line_1 = addr_line_1
│ │ -        if addr_line_2 is not None:
│ │ -            self.addr_line_2 = addr_line_2
│ │ -        if city is not None:
│ │ -            self.city = city
│ │ -        if country is not None:
│ │ -            self.country = country
│ │ +        if email is not None:
│ │ +            self.email = email
│ │ +        if full_name is not None:
│ │ +            self.full_name = full_name
│ │ +        if home_phone is not None:
│ │ +            self.home_phone = home_phone
│ │ +        if id is not None:
│ │ +            self.id = id
│ │ +        if ip is not None:
│ │ +            self.ip = ip
│ │ +        if locale is not None:
│ │ +            self.locale = locale
│ │          if phone is not None:
│ │              self.phone = phone
│ │ -        if state is not None:
│ │ -            self.state = state
│ │ -        if zip is not None:
│ │ -            self.zip = zip
│ │ +        if work_phone is not None:
│ │ +            self.work_phone = work_phone
│ │  
│ │      @property
│ │ -    def addr_line_1(self):
│ │ -        """Gets the addr_line_1 of this ShippingAddress.  # noqa: E501
│ │ +    def email(self):
│ │ +        """Gets the email of this MobileCustomerResponse.  # noqa: E501
│ │  
│ │ -        First line of the street address or equivalent local portion of the Cardholder shipping address associated with the card used for this purchase. Can include street and house number. *Length: 0 - 50*  # noqa: E501
│ │ +        Email address of the customer (mandatory by default for 'Latin America', 'NETELLER', 'DIRECTBANKINGNGA', 'AQRCODE', 'AIRTEL', 'MPESA', 'MTN', 'UGANDAMOBILE', 'VODAFONE', 'TIGO' payment methods only)). Can be defined as optional by CardPay manager.  # noqa: E501
│ │  
│ │ -        :return: The addr_line_1 of this ShippingAddress.  # noqa: E501
│ │ +        :return: The email of this MobileCustomerResponse.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._addr_line_1
│ │ +        return self._email
│ │  
│ │ -    @addr_line_1.setter
│ │ -    def addr_line_1(self, addr_line_1):
│ │ -        """Sets the addr_line_1 of this ShippingAddress.
│ │ +    @email.setter
│ │ +    def email(self, email):
│ │ +        """Sets the email of this MobileCustomerResponse.
│ │  
│ │ -        First line of the street address or equivalent local portion of the Cardholder shipping address associated with the card used for this purchase. Can include street and house number. *Length: 0 - 50*  # noqa: E501
│ │ +        Email address of the customer (mandatory by default for 'Latin America', 'NETELLER', 'DIRECTBANKINGNGA', 'AQRCODE', 'AIRTEL', 'MPESA', 'MTN', 'UGANDAMOBILE', 'VODAFONE', 'TIGO' payment methods only)). Can be defined as optional by CardPay manager.  # noqa: E501
│ │  
│ │ -        :param addr_line_1: The addr_line_1 of this ShippingAddress.  # noqa: E501
│ │ +        :param email: The email of this MobileCustomerResponse.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │ -        self._addr_line_1 = addr_line_1
│ │ +        self._email = email
│ │  
│ │      @property
│ │ -    def addr_line_2(self):
│ │ -        """Gets the addr_line_2 of this ShippingAddress.  # noqa: E501
│ │ +    def full_name(self):
│ │ +        """Gets the full_name of this MobileCustomerResponse.  # noqa: E501
│ │  
│ │ -        Second line of the street address or equivalent local portion of the Cardholder shipping address associated with the card used for this purchase. *Length: 0 - 50*  # noqa: E501
│ │ +        Customer's full name  # noqa: E501
│ │  
│ │ -        :return: The addr_line_2 of this ShippingAddress.  # noqa: E501
│ │ +        :return: The full_name of this MobileCustomerResponse.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._addr_line_2
│ │ +        return self._full_name
│ │  
│ │ -    @addr_line_2.setter
│ │ -    def addr_line_2(self, addr_line_2):
│ │ -        """Sets the addr_line_2 of this ShippingAddress.
│ │ +    @full_name.setter
│ │ +    def full_name(self, full_name):
│ │ +        """Sets the full_name of this MobileCustomerResponse.
│ │  
│ │ -        Second line of the street address or equivalent local portion of the Cardholder shipping address associated with the card used for this purchase. *Length: 0 - 50*  # noqa: E501
│ │ +        Customer's full name  # noqa: E501
│ │  
│ │ -        :param addr_line_2: The addr_line_2 of this ShippingAddress.  # noqa: E501
│ │ +        :param full_name: The full_name of this MobileCustomerResponse.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │ -        self._addr_line_2 = addr_line_2
│ │ +        self._full_name = full_name
│ │  
│ │      @property
│ │ -    def city(self):
│ │ -        """Gets the city of this ShippingAddress.  # noqa: E501
│ │ +    def home_phone(self):
│ │ +        """Gets the home_phone of this MobileCustomerResponse.  # noqa: E501
│ │  
│ │ -        Delivery city. May include whitespaces, hyphens, apostrophes, commas and dots  # noqa: E501
│ │ +        The home phone number provided by the Cardholder. Required (if available), unless market or regional mandate restricts sending this information. Characters Format: string (10-18 symbols) country code + Subscriber number. Refer to ITU-E.164 for additional information on format and length.  # noqa: E501
│ │  
│ │ -        :return: The city of this ShippingAddress.  # noqa: E501
│ │ +        :return: The home_phone of this MobileCustomerResponse.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._city
│ │ +        return self._home_phone
│ │  
│ │ -    @city.setter
│ │ -    def city(self, city):
│ │ -        """Sets the city of this ShippingAddress.
│ │ +    @home_phone.setter
│ │ +    def home_phone(self, home_phone):
│ │ +        """Sets the home_phone of this MobileCustomerResponse.
│ │  
│ │ -        Delivery city. May include whitespaces, hyphens, apostrophes, commas and dots  # noqa: E501
│ │ +        The home phone number provided by the Cardholder. Required (if available), unless market or regional mandate restricts sending this information. Characters Format: string (10-18 symbols) country code + Subscriber number. Refer to ITU-E.164 for additional information on format and length.  # noqa: E501
│ │  
│ │ -        :param city: The city of this ShippingAddress.  # noqa: E501
│ │ +        :param home_phone: The home_phone of this MobileCustomerResponse.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if city is not None and len(city) > 50:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `city`, length must be less than or equal to `50`"
│ │ -            )  # noqa: E501
│ │ -        if city is not None and len(city) < 0:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `city`, length must be greater than or equal to `0`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._city = city
│ │ +        self._home_phone = home_phone
│ │  
│ │      @property
│ │ -    def country(self):
│ │ -        """Gets the country of this ShippingAddress.  # noqa: E501
│ │ +    def id(self):
│ │ +        """Gets the id of this MobileCustomerResponse.  # noqa: E501
│ │  
│ │ -        [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) code of delivery country: 2 or 3 latin letters or numeric code. Required for BANKCARD payment method if 'shipping_address' is presented.  # noqa: E501
│ │ +        Customer's ID in the merchant's system  # noqa: E501
│ │  
│ │ -        :return: The country of this ShippingAddress.  # noqa: E501
│ │ +        :return: The id of this MobileCustomerResponse.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._country
│ │ +        return self._id
│ │  
│ │ -    @country.setter
│ │ -    def country(self, country):
│ │ -        """Sets the country of this ShippingAddress.
│ │ +    @id.setter
│ │ +    def id(self, id):
│ │ +        """Sets the id of this MobileCustomerResponse.
│ │  
│ │ -        [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) code of delivery country: 2 or 3 latin letters or numeric code. Required for BANKCARD payment method if 'shipping_address' is presented.  # noqa: E501
│ │ +        Customer's ID in the merchant's system  # noqa: E501
│ │  
│ │ -        :param country: The country of this ShippingAddress.  # noqa: E501
│ │ +        :param id: The id of this MobileCustomerResponse.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │ -        self._country = country
│ │ +        self._id = id
│ │  
│ │      @property
│ │ -    def phone(self):
│ │ -        """Gets the phone of this ShippingAddress.  # noqa: E501
│ │ +    def ip(self):
│ │ +        """Gets the ip of this MobileCustomerResponse.  # noqa: E501
│ │  
│ │ -        Valid customer phone number  # noqa: E501
│ │ +        IP address of customer  # noqa: E501
│ │  
│ │ -        :return: The phone of this ShippingAddress.  # noqa: E501
│ │ +        :return: The ip of this MobileCustomerResponse.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._phone
│ │ +        return self._ip
│ │  
│ │ -    @phone.setter
│ │ -    def phone(self, phone):
│ │ -        """Sets the phone of this ShippingAddress.
│ │ +    @ip.setter
│ │ +    def ip(self, ip):
│ │ +        """Sets the ip of this MobileCustomerResponse.
│ │  
│ │ -        Valid customer phone number  # noqa: E501
│ │ +        IP address of customer  # noqa: E501
│ │  
│ │ -        :param phone: The phone of this ShippingAddress.  # noqa: E501
│ │ +        :param ip: The ip of this MobileCustomerResponse.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if phone is not None and len(phone) > 20:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `phone`, length must be less than or equal to `20`"
│ │ -            )  # noqa: E501
│ │ -        if phone is not None and len(phone) < 5:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `phone`, length must be greater than or equal to `5`"
│ │ -            )  # noqa: E501
│ │ -        if phone is not None and not re.search(r"[-+\\d()wp\\s]+", phone):  # noqa: E501
│ │ -            raise ValueError(
│ │ -                r"Invalid value for `phone`, must be a follow pattern or equal to `/[-+\\d()wp\\s]+/`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._phone = phone
│ │ +        self._ip = ip
│ │ +
│ │ +    @property
│ │ +    def locale(self):
│ │ +        """Gets the locale of this MobileCustomerResponse.  # noqa: E501
│ │ +
│ │ +        Preferred locale for the payment page ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) language code). The default locale will be applied if the selected locale is not supported. Supported locales are: `ru`, `en`, `zh`, `ja`  # noqa: E501
│ │ +
│ │ +        :return: The locale of this MobileCustomerResponse.  # noqa: E501
│ │ +        :rtype: str
│ │ +        """
│ │ +        return self._locale
│ │ +
│ │ +    @locale.setter
│ │ +    def locale(self, locale):
│ │ +        """Sets the locale of this MobileCustomerResponse.
│ │ +
│ │ +        Preferred locale for the payment page ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) language code). The default locale will be applied if the selected locale is not supported. Supported locales are: `ru`, `en`, `zh`, `ja`  # noqa: E501
│ │ +
│ │ +        :param locale: The locale of this MobileCustomerResponse.  # noqa: E501
│ │ +        :type: str
│ │ +        """
│ │ +
│ │ +        self._locale = locale
│ │  
│ │      @property
│ │ -    def state(self):
│ │ -        """Gets the state of this ShippingAddress.  # noqa: E501
│ │ +    def phone(self):
│ │ +        """Gets the phone of this MobileCustomerResponse.  # noqa: E501
│ │  
│ │ -        The state or province of the shipping address associated with the card being used for this purchase. It's recommended to send in following format: the country subdivision code defined in [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). May include whitespaces, hyphens, apostrophes, commas and dots.  # noqa: E501
│ │ +        Customer's phone number. Mandatory for DIRECTBANKINGNGA payment method. For other payment methods: optional by default, can be defined as mandatory by CardPay manager.  # noqa: E501
│ │  
│ │ -        :return: The state of this ShippingAddress.  # noqa: E501
│ │ +        :return: The phone of this MobileCustomerResponse.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._state
│ │ +        return self._phone
│ │  
│ │ -    @state.setter
│ │ -    def state(self, state):
│ │ -        """Sets the state of this ShippingAddress.
│ │ +    @phone.setter
│ │ +    def phone(self, phone):
│ │ +        """Sets the phone of this MobileCustomerResponse.
│ │  
│ │ -        The state or province of the shipping address associated with the card being used for this purchase. It's recommended to send in following format: the country subdivision code defined in [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). May include whitespaces, hyphens, apostrophes, commas and dots.  # noqa: E501
│ │ +        Customer's phone number. Mandatory for DIRECTBANKINGNGA payment method. For other payment methods: optional by default, can be defined as mandatory by CardPay manager.  # noqa: E501
│ │  
│ │ -        :param state: The state of this ShippingAddress.  # noqa: E501
│ │ +        :param phone: The phone of this MobileCustomerResponse.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if state is not None and len(state) > 40:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `state`, length must be less than or equal to `40`"
│ │ -            )  # noqa: E501
│ │ -        if state is not None and len(state) < 0:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `state`, length must be greater than or equal to `0`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._state = state
│ │ +        self._phone = phone
│ │  
│ │      @property
│ │ -    def zip(self):
│ │ -        """Gets the zip of this ShippingAddress.  # noqa: E501
│ │ +    def work_phone(self):
│ │ +        """Gets the work_phone of this MobileCustomerResponse.  # noqa: E501
│ │  
│ │ -        Delivery postal code. For BANKCARD payment method max length: 12 Mandatory for BOLETO and LOTERICA payment methods only.  # noqa: E501
│ │ +        The work phone number provided by the Cardholder. Required (if available) unless market or regional mandate restricts sending this information. Characters Format: string (10-18 symbols) country code + Subscriber number. Refer to ITU-E.164 for additional information on format and length.  # noqa: E501
│ │  
│ │ -        :return: The zip of this ShippingAddress.  # noqa: E501
│ │ +        :return: The work_phone of this MobileCustomerResponse.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._zip
│ │ +        return self._work_phone
│ │  
│ │ -    @zip.setter
│ │ -    def zip(self, zip):
│ │ -        """Sets the zip of this ShippingAddress.
│ │ +    @work_phone.setter
│ │ +    def work_phone(self, work_phone):
│ │ +        """Sets the work_phone of this MobileCustomerResponse.
│ │  
│ │ -        Delivery postal code. For BANKCARD payment method max length: 12 Mandatory for BOLETO and LOTERICA payment methods only.  # noqa: E501
│ │ +        The work phone number provided by the Cardholder. Required (if available) unless market or regional mandate restricts sending this information. Characters Format: string (10-18 symbols) country code + Subscriber number. Refer to ITU-E.164 for additional information on format and length.  # noqa: E501
│ │  
│ │ -        :param zip: The zip of this ShippingAddress.  # noqa: E501
│ │ +        :param work_phone: The work_phone of this MobileCustomerResponse.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │ -        self._zip = zip
│ │ +        self._work_phone = work_phone
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -295,15 +296,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(ShippingAddress, dict):
│ │ +        if issubclass(MobileCustomerResponse, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -311,15 +312,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, ShippingAddress):
│ │ +        if not isinstance(other, MobileCustomerResponse):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/subscription.py
│ ├── +++ cardpay-3.6.21/cardpay/model/mobile_token_request.py
│ │┄ Files 14% similar despite different names
│ │ @@ -12,63 +12,68 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ +from cardpay.model.request import Request  # noqa: F401,E501
│ │  
│ │ -class Subscription(object):
│ │ +
│ │ +class MobileTokenRequest(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │ -    swagger_types = {"id": "str"}
│ │ +    swagger_types = {"request": "Request"}
│ │  
│ │ -    attribute_map = {"id": "id"}
│ │ +    attribute_map = {"request": "request"}
│ │  
│ │ -    def __init__(self, id=None):  # noqa: E501
│ │ -        """Subscription - a model defined in Swagger"""  # noqa: E501
│ │ +    def __init__(self, request=None):  # noqa: E501
│ │ +        """MobileTokenRequest - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._id = None
│ │ +        self._request = None
│ │          self.discriminator = None
│ │  
│ │ -        if id is not None:
│ │ -            self.id = id
│ │ +        self.request = request
│ │  
│ │      @property
│ │ -    def id(self):
│ │ -        """Gets the id of this Subscription.  # noqa: E501
│ │ +    def request(self):
│ │ +        """Gets the request of this MobileTokenRequest.  # noqa: E501
│ │  
│ │ -        Subscription's identificator. Mandatory if scheduled payment is requested.  # noqa: E501
│ │ +        Request  # noqa: E501
│ │  
│ │ -        :return: The id of this Subscription.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The request of this MobileTokenRequest.  # noqa: E501
│ │ +        :rtype: Request
│ │          """
│ │ -        return self._id
│ │ +        return self._request
│ │  
│ │ -    @id.setter
│ │ -    def id(self, id):
│ │ -        """Sets the id of this Subscription.
│ │ +    @request.setter
│ │ +    def request(self, request):
│ │ +        """Sets the request of this MobileTokenRequest.
│ │  
│ │ -        Subscription's identificator. Mandatory if scheduled payment is requested.  # noqa: E501
│ │ +        Request  # noqa: E501
│ │  
│ │ -        :param id: The id of this Subscription.  # noqa: E501
│ │ -        :type: str
│ │ +        :param request: The request of this MobileTokenRequest.  # noqa: E501
│ │ +        :type: Request
│ │          """
│ │ +        if request is None:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `request`, must not be `None`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._id = id
│ │ +        self._request = request
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -86,15 +91,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(Subscription, dict):
│ │ +        if issubclass(MobileTokenRequest, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -102,15 +107,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, Subscription):
│ │ +        if not isinstance(other, MobileTokenRequest):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/subscription_customer.py
│ ├── +++ cardpay-3.6.21/cardpay/model/subscription_customer.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/subscription_filter_parameters.py
│ ├── +++ cardpay-3.6.21/cardpay/model/updated_subscription_data.py
│ │┄ Files 23% similar despite different names
│ │ @@ -12,392 +12,298 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ +from cardpay.model.recurring_response_filing import (
│ │ +    RecurringResponseFiling,
│ │ +)  # noqa: F401,E501
│ │ +from cardpay.model.updated_subscription_recurring_data import (
│ │ +    UpdatedSubscriptionRecurringData,
│ │ +)  # noqa: F401,E501
│ │  
│ │ -class SubscriptionFilterParameters(object):
│ │ +
│ │ +class UpdatedSubscriptionData(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │ -        "request_id": "str",
│ │ -        "max_count": "int",
│ │ -        "offset": "int",
│ │ -        "sort_order": "str",
│ │ -        "customer_id": "str",
│ │ -        "plan_id": "str",
│ │ -        "start_time": "datetime",
│ │ -        "end_time": "datetime",
│ │ -        "currency": "str",
│ │ +        "change_status_claim_id": "str",
│ │ +        "details": "str",
│ │ +        "filing": "RecurringResponseFiling",
│ │ +        "id": "str",
│ │ +        "is_executed": "bool",
│ │ +        "recurring_data": "UpdatedSubscriptionRecurringData",
│ │ +        "remaining_amount": "float",
│ │          "status": "str",
│ │ -        "type": "str",
│ │ +        "status_to": "str",
│ │ +        "updated": "datetime",
│ │      }
│ │  
│ │      attribute_map = {
│ │ -        "request_id": "request_id",
│ │ -        "max_count": "max_count",
│ │ -        "offset": "offset",
│ │ -        "sort_order": "sort_order",
│ │ -        "customer_id": "customer_id",
│ │ -        "plan_id": "plan_id",
│ │ -        "start_time": "start_time",
│ │ -        "end_time": "end_time",
│ │ -        "currency": "currency",
│ │ +        "change_status_claim_id": "change_status_claim_id",
│ │ +        "details": "details",
│ │ +        "filing": "filing",
│ │ +        "id": "id",
│ │ +        "is_executed": "is_executed",
│ │ +        "recurring_data": "recurring_data",
│ │ +        "remaining_amount": "remaining_amount",
│ │          "status": "status",
│ │ -        "type": "type",
│ │ +        "status_to": "status_to",
│ │ +        "updated": "updated",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │ -        request_id=None,
│ │ -        max_count=None,
│ │ -        offset=None,
│ │ -        sort_order=None,
│ │ -        customer_id=None,
│ │ -        plan_id=None,
│ │ -        start_time=None,
│ │ -        end_time=None,
│ │ -        currency=None,
│ │ +        change_status_claim_id=None,
│ │ +        details=None,
│ │ +        filing=None,
│ │ +        id=None,
│ │ +        is_executed=None,
│ │ +        recurring_data=None,
│ │ +        remaining_amount=None,
│ │          status=None,
│ │ -        type=None,
│ │ +        status_to=None,
│ │ +        updated=None,
│ │      ):  # noqa: E501
│ │ -        """SubscriptionFilterParameters - a model defined in Swagger"""  # noqa: E501
│ │ +        """UpdatedSubscriptionData - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._request_id = None
│ │ -        self._max_count = None
│ │ -        self._offset = None
│ │ -        self._sort_order = None
│ │ -        self._customer_id = None
│ │ -        self._plan_id = None
│ │ -        self._start_time = None
│ │ -        self._end_time = None
│ │ -        self._currency = None
│ │ +        self._change_status_claim_id = None
│ │ +        self._details = None
│ │ +        self._filing = None
│ │ +        self._id = None
│ │ +        self._is_executed = None
│ │ +        self._recurring_data = None
│ │ +        self._remaining_amount = None
│ │          self._status = None
│ │ -        self._type = None
│ │ +        self._status_to = None
│ │ +        self._updated = None
│ │          self.discriminator = None
│ │  
│ │ -        self.request_id = request_id
│ │ -        if max_count is not None:
│ │ -            self.max_count = max_count
│ │ -        if offset is not None:
│ │ -            self.offset = offset
│ │ -        if sort_order is not None:
│ │ -            self.sort_order = sort_order
│ │ -        if customer_id is not None:
│ │ -            self.customer_id = customer_id
│ │ -        if plan_id is not None:
│ │ -            self.plan_id = plan_id
│ │ -        if start_time is not None:
│ │ -            self.start_time = start_time
│ │ -        if end_time is not None:
│ │ -            self.end_time = end_time
│ │ -        if currency is not None:
│ │ -            self.currency = currency
│ │ +        if change_status_claim_id is not None:
│ │ +            self.change_status_claim_id = change_status_claim_id
│ │ +        if details is not None:
│ │ +            self.details = details
│ │ +        if filing is not None:
│ │ +            self.filing = filing
│ │ +        if id is not None:
│ │ +            self.id = id
│ │ +        if is_executed is not None:
│ │ +            self.is_executed = is_executed
│ │ +        if recurring_data is not None:
│ │ +            self.recurring_data = recurring_data
│ │ +        if remaining_amount is not None:
│ │ +            self.remaining_amount = remaining_amount
│ │          if status is not None:
│ │              self.status = status
│ │ -        if type is not None:
│ │ -            self.type = type
│ │ +        if status_to is not None:
│ │ +            self.status_to = status_to
│ │ +        if updated is not None:
│ │ +            self.updated = updated
│ │  
│ │      @property
│ │ -    def request_id(self):
│ │ -        """Gets the request_id of this SubscriptionFilterParameters.  # noqa: E501
│ │ +    def change_status_claim_id(self):
│ │ +        """Gets the change_status_claim_id of this UpdatedSubscriptionData.  # noqa: E501
│ │  
│ │ -        Request ID  # noqa: E501
│ │ +        ID of claim; appears in case of request change was processed asynchronously and put in queue. Mandatory if request was put in queue.  # noqa: E501
│ │  
│ │ -        :return: The request_id of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :return: The change_status_claim_id of this UpdatedSubscriptionData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._request_id
│ │ +        return self._change_status_claim_id
│ │  
│ │ -    @request_id.setter
│ │ -    def request_id(self, request_id):
│ │ -        """Sets the request_id of this SubscriptionFilterParameters.
│ │ +    @change_status_claim_id.setter
│ │ +    def change_status_claim_id(self, change_status_claim_id):
│ │ +        """Sets the change_status_claim_id of this UpdatedSubscriptionData.
│ │  
│ │ -        Request ID  # noqa: E501
│ │ +        ID of claim; appears in case of request change was processed asynchronously and put in queue. Mandatory if request was put in queue.  # noqa: E501
│ │  
│ │ -        :param request_id: The request_id of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :param change_status_claim_id: The change_status_claim_id of this UpdatedSubscriptionData.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if request_id is None:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `request_id`, must not be `None`"
│ │ -            )  # noqa: E501
│ │ -        if request_id is not None and len(request_id) > 50:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `request_id`, length must be less than or equal to `50`"
│ │ -            )  # noqa: E501
│ │ -        if request_id is not None and len(request_id) < 1:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `request_id`, length must be greater than or equal to `1`"
│ │ -            )  # noqa: E501
│ │ -
│ │ -        self._request_id = request_id
│ │ -
│ │ -    @property
│ │ -    def max_count(self):
│ │ -        """Gets the max_count of this SubscriptionFilterParameters.  # noqa: E501
│ │ -
│ │ -        Limit number of returned subscriptions (must be less than 10000, default is 1000)  # noqa: E501
│ │ -
│ │ -        :return: The max_count of this SubscriptionFilterParameters.  # noqa: E501
│ │ -        :rtype: int
│ │ -        """
│ │ -        return self._max_count
│ │ -
│ │ -    @max_count.setter
│ │ -    def max_count(self, max_count):
│ │ -        """Sets the max_count of this SubscriptionFilterParameters.
│ │ -
│ │ -        Limit number of returned subscriptions (must be less than 10000, default is 1000)  # noqa: E501
│ │ -
│ │ -        :param max_count: The max_count of this SubscriptionFilterParameters.  # noqa: E501
│ │ -        :type: int
│ │ -        """
│ │ -        if max_count is not None and max_count > 10000:  # noqa: E501
│ │ -            raise ValueError(
│ │ -                "Invalid value for `max_count`, must be a value less than or equal to `10000`"
│ │ -            )  # noqa: E501
│ │ -        if max_count is not None and max_count < 1:  # noqa: E501
│ │ -            raise ValueError(
│ │ -                "Invalid value for `max_count`, must be a value greater than or equal to `1`"
│ │ -            )  # noqa: E501
│ │ -
│ │ -        self._max_count = max_count
│ │ -
│ │ -    @property
│ │ -    def offset(self):
│ │ -        """Gets the offset of this SubscriptionFilterParameters.  # noqa: E501
│ │ -
│ │ -        Offset (must be less than 10000)  # noqa: E501
│ │ -
│ │ -        :return: The offset of this SubscriptionFilterParameters.  # noqa: E501
│ │ -        :rtype: int
│ │ -        """
│ │ -        return self._offset
│ │ -
│ │ -    @offset.setter
│ │ -    def offset(self, offset):
│ │ -        """Sets the offset of this SubscriptionFilterParameters.
│ │ -
│ │ -        Offset (must be less than 10000)  # noqa: E501
│ │ -
│ │ -        :param offset: The offset of this SubscriptionFilterParameters.  # noqa: E501
│ │ -        :type: int
│ │ -        """
│ │ -        if offset is not None and offset > 10000:  # noqa: E501
│ │ -            raise ValueError(
│ │ -                "Invalid value for `offset`, must be a value less than or equal to `10000`"
│ │ -            )  # noqa: E501
│ │ -        if offset is not None and offset < 0:  # noqa: E501
│ │ -            raise ValueError(
│ │ -                "Invalid value for `offset`, must be a value greater than or equal to `0`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._offset = offset
│ │ +        self._change_status_claim_id = change_status_claim_id
│ │  
│ │      @property
│ │ -    def sort_order(self):
│ │ -        """Gets the sort_order of this SubscriptionFilterParameters.  # noqa: E501
│ │ +    def details(self):
│ │ +        """Gets the details of this UpdatedSubscriptionData.  # noqa: E501
│ │  
│ │ -        Sort based on order of results. 'asc' for ascending order or 'desc' for descending order (default value)  # noqa: E501
│ │ +        Operation details, errors, etc.  # noqa: E501
│ │  
│ │ -        :return: The sort_order of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :return: The details of this UpdatedSubscriptionData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._sort_order
│ │ +        return self._details
│ │  
│ │ -    @sort_order.setter
│ │ -    def sort_order(self, sort_order):
│ │ -        """Sets the sort_order of this SubscriptionFilterParameters.
│ │ +    @details.setter
│ │ +    def details(self, details):
│ │ +        """Sets the details of this UpdatedSubscriptionData.
│ │  
│ │ -        Sort based on order of results. 'asc' for ascending order or 'desc' for descending order (default value)  # noqa: E501
│ │ +        Operation details, errors, etc.  # noqa: E501
│ │  
│ │ -        :param sort_order: The sort_order of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :param details: The details of this UpdatedSubscriptionData.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if sort_order is not None and not re.search(
│ │ -            r"asc|desc", sort_order
│ │ -        ):  # noqa: E501
│ │ -            raise ValueError(
│ │ -                r"Invalid value for `sort_order`, must be a follow pattern or equal to `/asc|desc/`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._sort_order = sort_order
│ │ +        self._details = details
│ │  
│ │      @property
│ │ -    def customer_id(self):
│ │ -        """Gets the customer_id of this SubscriptionFilterParameters.  # noqa: E501
│ │ +    def filing(self):
│ │ +        """Gets the filing of this UpdatedSubscriptionData.  # noqa: E501
│ │  
│ │ -        Merchant identifier of customer account  # noqa: E501
│ │ +        Filing data  # noqa: E501
│ │  
│ │ -        :return: The customer_id of this SubscriptionFilterParameters.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The filing of this UpdatedSubscriptionData.  # noqa: E501
│ │ +        :rtype: RecurringResponseFiling
│ │          """
│ │ -        return self._customer_id
│ │ +        return self._filing
│ │  
│ │ -    @customer_id.setter
│ │ -    def customer_id(self, customer_id):
│ │ -        """Sets the customer_id of this SubscriptionFilterParameters.
│ │ +    @filing.setter
│ │ +    def filing(self, filing):
│ │ +        """Sets the filing of this UpdatedSubscriptionData.
│ │  
│ │ -        Merchant identifier of customer account  # noqa: E501
│ │ +        Filing data  # noqa: E501
│ │  
│ │ -        :param customer_id: The customer_id of this SubscriptionFilterParameters.  # noqa: E501
│ │ -        :type: str
│ │ +        :param filing: The filing of this UpdatedSubscriptionData.  # noqa: E501
│ │ +        :type: RecurringResponseFiling
│ │          """
│ │ -        if customer_id is not None and len(customer_id) > 32:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `customer_id`, length must be less than or equal to `32`"
│ │ -            )  # noqa: E501
│ │ -        if customer_id is not None and len(customer_id) < 0:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `customer_id`, length must be greater than or equal to `0`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._customer_id = customer_id
│ │ +        self._filing = filing
│ │  
│ │      @property
│ │ -    def plan_id(self):
│ │ -        """Gets the plan_id of this SubscriptionFilterParameters.  # noqa: E501
│ │ +    def id(self):
│ │ +        """Gets the id of this UpdatedSubscriptionData.  # noqa: E501
│ │  
│ │ -        Id of plan. Use for searching scheduled subscriptions by plan  # noqa: E501
│ │ +        ID of subscription  # noqa: E501
│ │  
│ │ -        :return: The plan_id of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :return: The id of this UpdatedSubscriptionData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._plan_id
│ │ +        return self._id
│ │  
│ │ -    @plan_id.setter
│ │ -    def plan_id(self, plan_id):
│ │ -        """Sets the plan_id of this SubscriptionFilterParameters.
│ │ +    @id.setter
│ │ +    def id(self, id):
│ │ +        """Sets the id of this UpdatedSubscriptionData.
│ │  
│ │ -        Id of plan. Use for searching scheduled subscriptions by plan  # noqa: E501
│ │ +        ID of subscription  # noqa: E501
│ │  
│ │ -        :param plan_id: The plan_id of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :param id: The id of this UpdatedSubscriptionData.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        if plan_id is not None and len(plan_id) > 32:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `plan_id`, length must be less than or equal to `32`"
│ │ -            )  # noqa: E501
│ │ -        if plan_id is not None and len(plan_id) < 0:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `plan_id`, length must be greater than or equal to `0`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._plan_id = plan_id
│ │ +        self._id = id
│ │  
│ │      @property
│ │ -    def start_time(self):
│ │ -        """Gets the start_time of this SubscriptionFilterParameters.  # noqa: E501
│ │ +    def is_executed(self):
│ │ +        """Gets the is_executed of this UpdatedSubscriptionData.  # noqa: E501
│ │  
│ │ -        Date and time up to milliseconds (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when requested period starts (inclusive), UTC time, default is 24 hours before 'end_time' (format: yyyy-MM-dd'T'HH:mm:ss'Z')  # noqa: E501
│ │ +        Status of operation  # noqa: E501
│ │  
│ │ -        :return: The start_time of this SubscriptionFilterParameters.  # noqa: E501
│ │ -        :rtype: datetime
│ │ +        :return: The is_executed of this UpdatedSubscriptionData.  # noqa: E501
│ │ +        :rtype: bool
│ │          """
│ │ -        return self._start_time
│ │ +        return self._is_executed
│ │  
│ │ -    @start_time.setter
│ │ -    def start_time(self, start_time):
│ │ -        """Sets the start_time of this SubscriptionFilterParameters.
│ │ +    @is_executed.setter
│ │ +    def is_executed(self, is_executed):
│ │ +        """Sets the is_executed of this UpdatedSubscriptionData.
│ │  
│ │ -        Date and time up to milliseconds (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when requested period starts (inclusive), UTC time, default is 24 hours before 'end_time' (format: yyyy-MM-dd'T'HH:mm:ss'Z')  # noqa: E501
│ │ +        Status of operation  # noqa: E501
│ │  
│ │ -        :param start_time: The start_time of this SubscriptionFilterParameters.  # noqa: E501
│ │ -        :type: datetime
│ │ +        :param is_executed: The is_executed of this UpdatedSubscriptionData.  # noqa: E501
│ │ +        :type: bool
│ │          """
│ │  
│ │ -        self._start_time = start_time
│ │ +        self._is_executed = is_executed
│ │  
│ │      @property
│ │ -    def end_time(self):
│ │ -        """Gets the end_time of this SubscriptionFilterParameters.  # noqa: E501
│ │ +    def recurring_data(self):
│ │ +        """Gets the recurring_data of this UpdatedSubscriptionData.  # noqa: E501
│ │  
│ │ -        Date and time up to milliseconds (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when requested period ends (not inclusive), UTC time, must be less than 7 days after 'start_time', default is current time (format: yyyy-MM-dd'T'HH:mm:ss'Z')  # noqa: E501
│ │ +        Recurring data  # noqa: E501
│ │  
│ │ -        :return: The end_time of this SubscriptionFilterParameters.  # noqa: E501
│ │ -        :rtype: datetime
│ │ +        :return: The recurring_data of this UpdatedSubscriptionData.  # noqa: E501
│ │ +        :rtype: UpdatedSubscriptionRecurringData
│ │          """
│ │ -        return self._end_time
│ │ +        return self._recurring_data
│ │  
│ │ -    @end_time.setter
│ │ -    def end_time(self, end_time):
│ │ -        """Sets the end_time of this SubscriptionFilterParameters.
│ │ +    @recurring_data.setter
│ │ +    def recurring_data(self, recurring_data):
│ │ +        """Sets the recurring_data of this UpdatedSubscriptionData.
│ │  
│ │ -        Date and time up to milliseconds (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when requested period ends (not inclusive), UTC time, must be less than 7 days after 'start_time', default is current time (format: yyyy-MM-dd'T'HH:mm:ss'Z')  # noqa: E501
│ │ +        Recurring data  # noqa: E501
│ │  
│ │ -        :param end_time: The end_time of this SubscriptionFilterParameters.  # noqa: E501
│ │ -        :type: datetime
│ │ +        :param recurring_data: The recurring_data of this UpdatedSubscriptionData.  # noqa: E501
│ │ +        :type: UpdatedSubscriptionRecurringData
│ │          """
│ │  
│ │ -        self._end_time = end_time
│ │ +        self._recurring_data = recurring_data
│ │  
│ │      @property
│ │ -    def currency(self):
│ │ -        """Gets the currency of this SubscriptionFilterParameters.  # noqa: E501
│ │ +    def remaining_amount(self):
│ │ +        """Gets the remaining_amount of this UpdatedSubscriptionData.  # noqa: E501
│ │  
│ │ -        [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of transactions currency  # noqa: E501
│ │ +        The amount remained to be paid after repayment operation. Mandatory for `REPAYMENT` operation only  # noqa: E501
│ │  
│ │ -        :return: The currency of this SubscriptionFilterParameters.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The remaining_amount of this UpdatedSubscriptionData.  # noqa: E501
│ │ +        :rtype: float
│ │          """
│ │ -        return self._currency
│ │ +        return self._remaining_amount
│ │  
│ │ -    @currency.setter
│ │ -    def currency(self, currency):
│ │ -        """Sets the currency of this SubscriptionFilterParameters.
│ │ +    @remaining_amount.setter
│ │ +    def remaining_amount(self, remaining_amount):
│ │ +        """Sets the remaining_amount of this UpdatedSubscriptionData.
│ │  
│ │ -        [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of transactions currency  # noqa: E501
│ │ +        The amount remained to be paid after repayment operation. Mandatory for `REPAYMENT` operation only  # noqa: E501
│ │  
│ │ -        :param currency: The currency of this SubscriptionFilterParameters.  # noqa: E501
│ │ -        :type: str
│ │ +        :param remaining_amount: The remaining_amount of this UpdatedSubscriptionData.  # noqa: E501
│ │ +        :type: float
│ │          """
│ │  
│ │ -        self._currency = currency
│ │ +        self._remaining_amount = remaining_amount
│ │  
│ │      class Status(object):
│ │          ACTIVE = "ACTIVE"
│ │          INACTIVE = "INACTIVE"
│ │          CANCELLED = "CANCELLED"
│ │          PAST_DUE = "PAST_DUE"
│ │          PENDING = "PENDING"
│ │          COMPLETED = "COMPLETED"
│ │          CARD_EXPIRED = "CARD_EXPIRED"
│ │          ACTIVATION_FAILED = "ACTIVATION_FAILED"
│ │  
│ │      @property
│ │      def status(self):
│ │ -        """Gets the status of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        """Gets the status of this UpdatedSubscriptionData.  # noqa: E501
│ │  
│ │ -        Status of subscription  # noqa: E501
│ │ +        Resulted status of subscription  # noqa: E501
│ │  
│ │ -        :return: The status of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :return: The status of this UpdatedSubscriptionData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._status
│ │  
│ │      @status.setter
│ │      def status(self, status):
│ │ -        """Sets the status of this SubscriptionFilterParameters.
│ │ +        """Sets the status of this UpdatedSubscriptionData.
│ │  
│ │ -        Status of subscription  # noqa: E501
│ │ +        Resulted status of subscription  # noqa: E501
│ │  
│ │ -        :param status: The status of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :param status: The status of this UpdatedSubscriptionData.  # noqa: E501
│ │          :type: str
│ │          """
│ │          allowed_values = [
│ │              "ACTIVE",
│ │              "INACTIVE",
│ │              "CANCELLED",
│ │              "PAST_DUE",
│ │ @@ -411,48 +317,85 @@
│ │                  "Invalid value for `status` ({0}), must be one of {1}".format(  # noqa: E501
│ │                      status, allowed_values
│ │                  )
│ │              )
│ │  
│ │          self._status = status
│ │  
│ │ -    class Type(object):
│ │ -        ONECLICK = "ONECLICK"
│ │ -        SCHEDULED = "SCHEDULED"
│ │ -        INSTALLMENT = "INSTALLMENT"
│ │ +    class StatusTo(object):
│ │ +        ACTIVE = "ACTIVE"
│ │ +        INACTIVE = "INACTIVE"
│ │ +        CANCELLED = "CANCELLED"
│ │ +        PAST_DUE = "PAST_DUE"
│ │ +        PENDING = "PENDING"
│ │ +        COMPLETED = "COMPLETED"
│ │ +        CARD_EXPIRED = "CARD_EXPIRED"
│ │ +        ACTIVATION_FAILED = "ACTIVATION_FAILED"
│ │  
│ │      @property
│ │ -    def type(self):
│ │ -        """Gets the type of this SubscriptionFilterParameters.  # noqa: E501
│ │ +    def status_to(self):
│ │ +        """Gets the status_to of this UpdatedSubscriptionData.  # noqa: E501
│ │  
│ │ -        Type of subscription. 'ONECLICK' type will be ignored.  # noqa: E501
│ │ +        Requested status of subscription. Mandatory for `CHANGE_STATUS` operation only.  # noqa: E501
│ │  
│ │ -        :return: The type of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :return: The status_to of this UpdatedSubscriptionData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._type
│ │ +        return self._status_to
│ │  
│ │ -    @type.setter
│ │ -    def type(self, type):
│ │ -        """Sets the type of this SubscriptionFilterParameters.
│ │ +    @status_to.setter
│ │ +    def status_to(self, status_to):
│ │ +        """Sets the status_to of this UpdatedSubscriptionData.
│ │  
│ │ -        Type of subscription. 'ONECLICK' type will be ignored.  # noqa: E501
│ │ +        Requested status of subscription. Mandatory for `CHANGE_STATUS` operation only.  # noqa: E501
│ │  
│ │ -        :param type: The type of this SubscriptionFilterParameters.  # noqa: E501
│ │ +        :param status_to: The status_to of this UpdatedSubscriptionData.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        allowed_values = ["ONECLICK", "SCHEDULED", "INSTALLMENT"]  # noqa: E501
│ │ -        if type not in allowed_values:
│ │ +        allowed_values = [
│ │ +            "ACTIVE",
│ │ +            "INACTIVE",
│ │ +            "CANCELLED",
│ │ +            "PAST_DUE",
│ │ +            "PENDING",
│ │ +            "COMPLETED",
│ │ +            "CARD_EXPIRED",
│ │ +            "ACTIVATION_FAILED",
│ │ +        ]  # noqa: E501
│ │ +        if status_to not in allowed_values:
│ │              raise ValueError(
│ │ -                "Invalid value for `type` ({0}), must be one of {1}".format(  # noqa: E501
│ │ -                    type, allowed_values
│ │ +                "Invalid value for `status_to` ({0}), must be one of {1}".format(  # noqa: E501
│ │ +                    status_to, allowed_values
│ │                  )
│ │              )
│ │  
│ │ -        self._type = type
│ │ +        self._status_to = status_to
│ │ +
│ │ +    @property
│ │ +    def updated(self):
│ │ +        """Gets the updated of this UpdatedSubscriptionData.  # noqa: E501
│ │ +
│ │ +        If request is successful then date and time returned in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (format - yyyy-MM-dd'T'HH:mm:ss'Z').  # noqa: E501
│ │ +
│ │ +        :return: The updated of this UpdatedSubscriptionData.  # noqa: E501
│ │ +        :rtype: datetime
│ │ +        """
│ │ +        return self._updated
│ │ +
│ │ +    @updated.setter
│ │ +    def updated(self, updated):
│ │ +        """Sets the updated of this UpdatedSubscriptionData.
│ │ +
│ │ +        If request is successful then date and time returned in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (format - yyyy-MM-dd'T'HH:mm:ss'Z').  # noqa: E501
│ │ +
│ │ +        :param updated: The updated of this UpdatedSubscriptionData.  # noqa: E501
│ │ +        :type: datetime
│ │ +        """
│ │ +
│ │ +        self._updated = updated
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -470,15 +413,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(SubscriptionFilterParameters, dict):
│ │ +        if issubclass(UpdatedSubscriptionData, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -486,15 +429,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, SubscriptionFilterParameters):
│ │ +        if not isinstance(other, UpdatedSubscriptionData):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/subscription_get_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/subscription_get_response.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/subscription_get_response_plan.py
│ ├── +++ cardpay-3.6.21/cardpay/model/mobile_merchant_order_response.py
│ │┄ Files 16% similar despite different names
│ │ @@ -13,15 +13,15 @@
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │  
│ │ -class SubscriptionGetResponsePlan(object):
│ │ +class MobileMerchantOrderResponse(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │ @@ -31,40 +31,40 @@
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {"id": "str"}
│ │  
│ │      attribute_map = {"id": "id"}
│ │  
│ │      def __init__(self, id=None):  # noqa: E501
│ │ -        """SubscriptionGetResponsePlan - a model defined in Swagger"""  # noqa: E501
│ │ +        """MobileMerchantOrderResponse - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._id = None
│ │          self.discriminator = None
│ │  
│ │          if id is not None:
│ │              self.id = id
│ │  
│ │      @property
│ │      def id(self):
│ │ -        """Gets the id of this SubscriptionGetResponsePlan.  # noqa: E501
│ │ +        """Gets the id of this MobileMerchantOrderResponse.  # noqa: E501
│ │  
│ │ -        Plan ID  # noqa: E501
│ │ +        Order ID used by Merchant's shopping cart  # noqa: E501
│ │  
│ │ -        :return: The id of this SubscriptionGetResponsePlan.  # noqa: E501
│ │ +        :return: The id of this MobileMerchantOrderResponse.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._id
│ │  
│ │      @id.setter
│ │      def id(self, id):
│ │ -        """Sets the id of this SubscriptionGetResponsePlan.
│ │ +        """Sets the id of this MobileMerchantOrderResponse.
│ │  
│ │ -        Plan ID  # noqa: E501
│ │ +        Order ID used by Merchant's shopping cart  # noqa: E501
│ │  
│ │ -        :param id: The id of this SubscriptionGetResponsePlan.  # noqa: E501
│ │ +        :param id: The id of this MobileMerchantOrderResponse.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._id = id
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │ @@ -86,15 +86,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(SubscriptionGetResponsePlan, dict):
│ │ +        if issubclass(MobileMerchantOrderResponse, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -102,15 +102,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, SubscriptionGetResponsePlan):
│ │ +        if not isinstance(other, MobileMerchantOrderResponse):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/subscription_list.py
│ ├── +++ cardpay-3.6.21/cardpay/model/card_binding_card_account.py
│ │┄ Files 19% similar despite different names
│ │ @@ -12,93 +12,92 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ -from cardpay.model.subscription_get_response import (
│ │ -    SubscriptionGetResponse,
│ │ -)  # noqa: F401,E501
│ │ +from cardpay.model.billing_address import BillingAddress  # noqa: F401,E501
│ │ +from cardpay.model.card_binding_card import CardBindingCard  # noqa: F401,E501
│ │  
│ │  
│ │ -class SubscriptionList(object):
│ │ +class CardBindingCardAccount(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │ -    swagger_types = {"data": "list[SubscriptionGetResponse]", "has_more": "bool"}
│ │ +    swagger_types = {"billing_address": "BillingAddress", "card": "CardBindingCard"}
│ │  
│ │ -    attribute_map = {"data": "data", "has_more": "has_more"}
│ │ +    attribute_map = {"billing_address": "billing_address", "card": "card"}
│ │  
│ │ -    def __init__(self, data=None, has_more=None):  # noqa: E501
│ │ -        """SubscriptionList - a model defined in Swagger"""  # noqa: E501
│ │ +    def __init__(self, billing_address=None, card=None):  # noqa: E501
│ │ +        """CardBindingCardAccount - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._data = None
│ │ -        self._has_more = None
│ │ +        self._billing_address = None
│ │ +        self._card = None
│ │          self.discriminator = None
│ │  
│ │ -        if data is not None:
│ │ -            self.data = data
│ │ -        if has_more is not None:
│ │ -            self.has_more = has_more
│ │ +        if billing_address is not None:
│ │ +            self.billing_address = billing_address
│ │ +        if card is not None:
│ │ +            self.card = card
│ │  
│ │      @property
│ │ -    def data(self):
│ │ -        """Gets the data of this SubscriptionList.  # noqa: E501
│ │ +    def billing_address(self):
│ │ +        """Gets the billing_address of this CardBindingCardAccount.  # noqa: E501
│ │  
│ │ -        List of found objects  # noqa: E501
│ │ +        Billing Address  # noqa: E501
│ │  
│ │ -        :return: The data of this SubscriptionList.  # noqa: E501
│ │ -        :rtype: list[SubscriptionGetResponse]
│ │ +        :return: The billing_address of this CardBindingCardAccount.  # noqa: E501
│ │ +        :rtype: BillingAddress
│ │          """
│ │ -        return self._data
│ │ +        return self._billing_address
│ │  
│ │ -    @data.setter
│ │ -    def data(self, data):
│ │ -        """Sets the data of this SubscriptionList.
│ │ +    @billing_address.setter
│ │ +    def billing_address(self, billing_address):
│ │ +        """Sets the billing_address of this CardBindingCardAccount.
│ │  
│ │ -        List of found objects  # noqa: E501
│ │ +        Billing Address  # noqa: E501
│ │  
│ │ -        :param data: The data of this SubscriptionList.  # noqa: E501
│ │ -        :type: list[SubscriptionGetResponse]
│ │ +        :param billing_address: The billing_address of this CardBindingCardAccount.  # noqa: E501
│ │ +        :type: BillingAddress
│ │          """
│ │  
│ │ -        self._data = data
│ │ +        self._billing_address = billing_address
│ │  
│ │      @property
│ │ -    def has_more(self):
│ │ -        """Gets the has_more of this SubscriptionList.  # noqa: E501
│ │ +    def card(self):
│ │ +        """Gets the card of this CardBindingCardAccount.  # noqa: E501
│ │  
│ │ -        Indicates if there are more elements for this period than were returned  # noqa: E501
│ │ +        Represents a payment card data.  # noqa: E501
│ │  
│ │ -        :return: The has_more of this SubscriptionList.  # noqa: E501
│ │ -        :rtype: bool
│ │ +        :return: The card of this CardBindingCardAccount.  # noqa: E501
│ │ +        :rtype: CardBindingCard
│ │          """
│ │ -        return self._has_more
│ │ +        return self._card
│ │  
│ │ -    @has_more.setter
│ │ -    def has_more(self, has_more):
│ │ -        """Sets the has_more of this SubscriptionList.
│ │ +    @card.setter
│ │ +    def card(self, card):
│ │ +        """Sets the card of this CardBindingCardAccount.
│ │  
│ │ -        Indicates if there are more elements for this period than were returned  # noqa: E501
│ │ +        Represents a payment card data.  # noqa: E501
│ │  
│ │ -        :param has_more: The has_more of this SubscriptionList.  # noqa: E501
│ │ -        :type: bool
│ │ +        :param card: The card of this CardBindingCardAccount.  # noqa: E501
│ │ +        :type: CardBindingCard
│ │          """
│ │  
│ │ -        self._has_more = has_more
│ │ +        self._card = card
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -116,15 +115,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(SubscriptionList, dict):
│ │ +        if issubclass(CardBindingCardAccount, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -132,15 +131,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, SubscriptionList):
│ │ +        if not isinstance(other, CardBindingCardAccount):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/subscription_update_request_subscription_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/subscription_update_request_subscription_data.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/subscription_update_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/subscription_update_response.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/supported_payment_method.py
│ ├── +++ cardpay-3.6.21/cardpay/model/mobile_payment_method_data_response.py
│ │┄ Files 14% similar despite different names
│ │ @@ -13,84 +13,84 @@
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │  
│ │ -class SupportedPaymentMethod(object):
│ │ +class MobilePaymentMethodDataResponse(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │ -    swagger_types = {"logo": "str", "name": "str"}
│ │ +    swagger_types = {"category": "str", "name": "str"}
│ │  
│ │ -    attribute_map = {"logo": "logo", "name": "name"}
│ │ +    attribute_map = {"category": "category", "name": "name"}
│ │  
│ │ -    def __init__(self, logo=None, name=None):  # noqa: E501
│ │ -        """SupportedPaymentMethod - a model defined in Swagger"""  # noqa: E501
│ │ +    def __init__(self, category=None, name=None):  # noqa: E501
│ │ +        """MobilePaymentMethodDataResponse - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._logo = None
│ │ +        self._category = None
│ │          self._name = None
│ │          self.discriminator = None
│ │  
│ │ -        if logo is not None:
│ │ -            self.logo = logo
│ │ +        if category is not None:
│ │ +            self.category = category
│ │          if name is not None:
│ │              self.name = name
│ │  
│ │      @property
│ │ -    def logo(self):
│ │ -        """Gets the logo of this SupportedPaymentMethod.  # noqa: E501
│ │ +    def category(self):
│ │ +        """Gets the category of this MobilePaymentMethodDataResponse.  # noqa: E501
│ │  
│ │ -        Url to Payment Method logo  # noqa: E501
│ │ +        Mobile payment method category  # noqa: E501
│ │  
│ │ -        :return: The logo of this SupportedPaymentMethod.  # noqa: E501
│ │ +        :return: The category of this MobilePaymentMethodDataResponse.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._logo
│ │ +        return self._category
│ │  
│ │ -    @logo.setter
│ │ -    def logo(self, logo):
│ │ -        """Sets the logo of this SupportedPaymentMethod.
│ │ +    @category.setter
│ │ +    def category(self, category):
│ │ +        """Sets the category of this MobilePaymentMethodDataResponse.
│ │  
│ │ -        Url to Payment Method logo  # noqa: E501
│ │ +        Mobile payment method category  # noqa: E501
│ │  
│ │ -        :param logo: The logo of this SupportedPaymentMethod.  # noqa: E501
│ │ +        :param category: The category of this MobilePaymentMethodDataResponse.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │ -        self._logo = logo
│ │ +        self._category = category
│ │  
│ │      @property
│ │      def name(self):
│ │ -        """Gets the name of this SupportedPaymentMethod.  # noqa: E501
│ │ +        """Gets the name of this MobilePaymentMethodDataResponse.  # noqa: E501
│ │  
│ │ -        Name of Payment Method  # noqa: E501
│ │ +        Mobile payment method name  # noqa: E501
│ │  
│ │ -        :return: The name of this SupportedPaymentMethod.  # noqa: E501
│ │ +        :return: The name of this MobilePaymentMethodDataResponse.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._name
│ │  
│ │      @name.setter
│ │      def name(self, name):
│ │ -        """Sets the name of this SupportedPaymentMethod.
│ │ +        """Sets the name of this MobilePaymentMethodDataResponse.
│ │  
│ │ -        Name of Payment Method  # noqa: E501
│ │ +        Mobile payment method name  # noqa: E501
│ │  
│ │ -        :param name: The name of this SupportedPaymentMethod.  # noqa: E501
│ │ +        :param name: The name of this MobilePaymentMethodDataResponse.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._name = name
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │ @@ -112,15 +112,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(SupportedPaymentMethod, dict):
│ │ +        if issubclass(MobilePaymentMethodDataResponse, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -128,15 +128,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, SupportedPaymentMethod):
│ │ +        if not isinstance(other, MobilePaymentMethodDataResponse):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/three_d_secure_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/three_d_secure_data.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/three_d_secure_response.py
│ ├── +++ cardpay-3.6.21/cardpay/model/three_d_secure_response.py
│ │┄ Files 4% similar despite different names
│ │ @@ -32,15 +32,14 @@
│ │      """
│ │      swagger_types = {
│ │          "card_enrollment": "str",
│ │          "cardholder_info": "str",
│ │          "cavv": "str",
│ │          "cavv_algorithm": "str",
│ │          "challenge_cancel": "str",
│ │ -        "ds_transaction_id": "str",
│ │          "eci": "str",
│ │          "pa_res": "str",
│ │          "protocol_version": "str",
│ │          "status": "str",
│ │          "status_reason": "str",
│ │          "three_d_secure2_passed": "bool",
│ │          "three_d_secure_flow": "str",
│ │ @@ -49,15 +48,14 @@
│ │  
│ │      attribute_map = {
│ │          "card_enrollment": "card_enrollment",
│ │          "cardholder_info": "cardholder_info",
│ │          "cavv": "cavv",
│ │          "cavv_algorithm": "cavv_algorithm",
│ │          "challenge_cancel": "challenge_cancel",
│ │ -        "ds_transaction_id": "ds_transaction_id",
│ │          "eci": "eci",
│ │          "pa_res": "pa_res",
│ │          "protocol_version": "protocol_version",
│ │          "status": "status",
│ │          "status_reason": "status_reason",
│ │          "three_d_secure2_passed": "three_d_secure2_passed",
│ │          "three_d_secure_flow": "three_d_secure_flow",
│ │ @@ -67,15 +65,14 @@
│ │      def __init__(
│ │          self,
│ │          card_enrollment=None,
│ │          cardholder_info=None,
│ │          cavv=None,
│ │          cavv_algorithm=None,
│ │          challenge_cancel=None,
│ │ -        ds_transaction_id=None,
│ │          eci=None,
│ │          pa_res=None,
│ │          protocol_version=None,
│ │          status=None,
│ │          status_reason=None,
│ │          three_d_secure2_passed=None,
│ │          three_d_secure_flow=None,
│ │ @@ -84,15 +81,14 @@
│ │          """ThreeDSecureResponse - a model defined in Swagger"""  # noqa: E501
│ │  
│ │          self._card_enrollment = None
│ │          self._cardholder_info = None
│ │          self._cavv = None
│ │          self._cavv_algorithm = None
│ │          self._challenge_cancel = None
│ │ -        self._ds_transaction_id = None
│ │          self._eci = None
│ │          self._pa_res = None
│ │          self._protocol_version = None
│ │          self._status = None
│ │          self._status_reason = None
│ │          self._three_d_secure2_passed = None
│ │          self._three_d_secure_flow = None
│ │ @@ -105,16 +101,14 @@
│ │              self.cardholder_info = cardholder_info
│ │          if cavv is not None:
│ │              self.cavv = cavv
│ │          if cavv_algorithm is not None:
│ │              self.cavv_algorithm = cavv_algorithm
│ │          if challenge_cancel is not None:
│ │              self.challenge_cancel = challenge_cancel
│ │ -        if ds_transaction_id is not None:
│ │ -            self.ds_transaction_id = ds_transaction_id
│ │          if eci is not None:
│ │              self.eci = eci
│ │          if pa_res is not None:
│ │              self.pa_res = pa_res
│ │          if protocol_version is not None:
│ │              self.protocol_version = protocol_version
│ │          if status is not None:
│ │ @@ -240,37 +234,14 @@
│ │          :param challenge_cancel: The challenge_cancel of this ThreeDSecureResponse.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._challenge_cancel = challenge_cancel
│ │  
│ │      @property
│ │ -    def ds_transaction_id(self):
│ │ -        """Gets the ds_transaction_id of this ThreeDSecureResponse.  # noqa: E501
│ │ -
│ │ -        Transaction Id  # noqa: E501
│ │ -
│ │ -        :return: The ds_transaction_id of this ThreeDSecureResponse.  # noqa: E501
│ │ -        :rtype: str
│ │ -        """
│ │ -        return self._ds_transaction_id
│ │ -
│ │ -    @ds_transaction_id.setter
│ │ -    def ds_transaction_id(self, ds_transaction_id):
│ │ -        """Sets the ds_transaction_id of this ThreeDSecureResponse.
│ │ -
│ │ -        Transaction Id  # noqa: E501
│ │ -
│ │ -        :param ds_transaction_id: The ds_transaction_id of this ThreeDSecureResponse.  # noqa: E501
│ │ -        :type: str
│ │ -        """
│ │ -
│ │ -        self._ds_transaction_id = ds_transaction_id
│ │ -
│ │ -    @property
│ │      def eci(self):
│ │          """Gets the eci of this ThreeDSecureResponse.  # noqa: E501
│ │  
│ │          The electronic commerce indicator  # noqa: E501
│ │  
│ │          :return: The eci of this ThreeDSecureResponse.  # noqa: E501
│ │          :rtype: str
│ │ @@ -335,26 +306,26 @@
│ │  
│ │          self._protocol_version = protocol_version
│ │  
│ │      @property
│ │      def status(self):
│ │          """Gets the status of this ThreeDSecureResponse.  # noqa: E501
│ │  
│ │ -        3DS status (from PaRes for 3Ds 1.0, ARes message for 3Ds 2.0) (possible values Y,A,U,N)  # noqa: E501
│ │ +        3DS status (from PaRes for 3Ds 1.0, ARes message for 3Ds 2.0) (possible values Y,A,U)  # noqa: E501
│ │  
│ │          :return: The status of this ThreeDSecureResponse.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │          return self._status
│ │  
│ │      @status.setter
│ │      def status(self, status):
│ │          """Sets the status of this ThreeDSecureResponse.
│ │  
│ │ -        3DS status (from PaRes for 3Ds 1.0, ARes message for 3Ds 2.0) (possible values Y,A,U,N)  # noqa: E501
│ │ +        3DS status (from PaRes for 3Ds 1.0, ARes message for 3Ds 2.0) (possible values Y,A,U)  # noqa: E501
│ │  
│ │          :param status: The status of this ThreeDSecureResponse.  # noqa: E501
│ │          :type: str
│ │          """
│ │  
│ │          self._status = status
│ │   --- cardpay-3.45.8/cardpay/model/transaction_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/mobile_verification_response.py
│ │┄ Files 17% similar despite different names
│ │ @@ -12,68 +12,63 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ -from cardpay.model.request import Request  # noqa: F401,E501
│ │  
│ │ -
│ │ -class TransactionRequest(object):
│ │ +class MobileVerificationResponse(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │ -    swagger_types = {"request": "Request"}
│ │ +    swagger_types = {"result": "str"}
│ │  
│ │ -    attribute_map = {"request": "request"}
│ │ +    attribute_map = {"result": "result"}
│ │  
│ │ -    def __init__(self, request=None):  # noqa: E501
│ │ -        """TransactionRequest - a model defined in Swagger"""  # noqa: E501
│ │ +    def __init__(self, result=None):  # noqa: E501
│ │ +        """MobileVerificationResponse - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._request = None
│ │ +        self._result = None
│ │          self.discriminator = None
│ │  
│ │ -        self.request = request
│ │ +        if result is not None:
│ │ +            self.result = result
│ │  
│ │      @property
│ │ -    def request(self):
│ │ -        """Gets the request of this TransactionRequest.  # noqa: E501
│ │ +    def result(self):
│ │ +        """Gets the result of this MobileVerificationResponse.  # noqa: E501
│ │  
│ │ -        Request  # noqa: E501
│ │ +        Result of application attestation statement's verification: 'SUCCESS' or error message  # noqa: E501
│ │  
│ │ -        :return: The request of this TransactionRequest.  # noqa: E501
│ │ -        :rtype: Request
│ │ +        :return: The result of this MobileVerificationResponse.  # noqa: E501
│ │ +        :rtype: str
│ │          """
│ │ -        return self._request
│ │ +        return self._result
│ │  
│ │ -    @request.setter
│ │ -    def request(self, request):
│ │ -        """Sets the request of this TransactionRequest.
│ │ +    @result.setter
│ │ +    def result(self, result):
│ │ +        """Sets the result of this MobileVerificationResponse.
│ │  
│ │ -        Request  # noqa: E501
│ │ +        Result of application attestation statement's verification: 'SUCCESS' or error message  # noqa: E501
│ │  
│ │ -        :param request: The request of this TransactionRequest.  # noqa: E501
│ │ -        :type: Request
│ │ +        :param result: The result of this MobileVerificationResponse.  # noqa: E501
│ │ +        :type: str
│ │          """
│ │ -        if request is None:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `request`, must not be `None`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._request = request
│ │ +        self._result = result
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -91,15 +86,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(TransactionRequest, dict):
│ │ +        if issubclass(MobileVerificationResponse, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -107,15 +102,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, TransactionRequest):
│ │ +        if not isinstance(other, MobileVerificationResponse):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/transaction_response_e_wallet_account.py
│ ├── +++ cardpay-3.6.21/cardpay/model/transaction_response_e_wallet_account.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/transaction_response_merchant_order.py
│ ├── +++ cardpay-3.6.21/cardpay/model/transaction_update_request.py
│ │┄ Files 23% similar despite different names
│ │ @@ -12,98 +12,100 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ +from cardpay.model.request import Request  # noqa: F401,E501
│ │ +from cardpay.model.request_updated_transaction_data import (
│ │ +    RequestUpdatedTransactionData,
│ │ +)  # noqa: F401,E501
│ │  
│ │ -class TransactionResponseMerchantOrder(object):
│ │ +
│ │ +class TransactionUpdateRequest(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │ -    swagger_types = {"description": "str", "id": "str"}
│ │ +    swagger_types = {
│ │ +        "request": "Request",
│ │ +        "transaction_data": "RequestUpdatedTransactionData",
│ │ +    }
│ │  
│ │ -    attribute_map = {"description": "description", "id": "id"}
│ │ +    attribute_map = {"request": "request", "transaction_data": "transaction_data"}
│ │  
│ │ -    def __init__(self, description=None, id=None):  # noqa: E501
│ │ -        """TransactionResponseMerchantOrder - a model defined in Swagger"""  # noqa: E501
│ │ +    def __init__(self, request=None, transaction_data=None):  # noqa: E501
│ │ +        """TransactionUpdateRequest - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._description = None
│ │ -        self._id = None
│ │ +        self._request = None
│ │ +        self._transaction_data = None
│ │          self.discriminator = None
│ │  
│ │ -        if description is not None:
│ │ -            self.description = description
│ │ -        self.id = id
│ │ +        self.request = request
│ │ +        if transaction_data is not None:
│ │ +            self.transaction_data = transaction_data
│ │  
│ │      @property
│ │ -    def description(self):
│ │ -        """Gets the description of this TransactionResponseMerchantOrder.  # noqa: E501
│ │ +    def request(self):
│ │ +        """Gets the request of this TransactionUpdateRequest.  # noqa: E501
│ │  
│ │ -        Description of product/service being sold  # noqa: E501
│ │ +        Request  # noqa: E501
│ │  
│ │ -        :return: The description of this TransactionResponseMerchantOrder.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The request of this TransactionUpdateRequest.  # noqa: E501
│ │ +        :rtype: Request
│ │          """
│ │ -        return self._description
│ │ +        return self._request
│ │  
│ │ -    @description.setter
│ │ -    def description(self, description):
│ │ -        """Sets the description of this TransactionResponseMerchantOrder.
│ │ +    @request.setter
│ │ +    def request(self, request):
│ │ +        """Sets the request of this TransactionUpdateRequest.
│ │  
│ │ -        Description of product/service being sold  # noqa: E501
│ │ +        Request  # noqa: E501
│ │  
│ │ -        :param description: The description of this TransactionResponseMerchantOrder.  # noqa: E501
│ │ -        :type: str
│ │ +        :param request: The request of this TransactionUpdateRequest.  # noqa: E501
│ │ +        :type: Request
│ │          """
│ │ +        if request is None:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `request`, must not be `None`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._description = description
│ │ +        self._request = request
│ │  
│ │      @property
│ │ -    def id(self):
│ │ -        """Gets the id of this TransactionResponseMerchantOrder.  # noqa: E501
│ │ +    def transaction_data(self):
│ │ +        """Gets the transaction_data of this TransactionUpdateRequest.  # noqa: E501
│ │  
│ │ -        Merchant's ID of the order  # noqa: E501
│ │ +        Transaction data  # noqa: E501
│ │  
│ │ -        :return: The id of this TransactionResponseMerchantOrder.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The transaction_data of this TransactionUpdateRequest.  # noqa: E501
│ │ +        :rtype: RequestUpdatedTransactionData
│ │          """
│ │ -        return self._id
│ │ +        return self._transaction_data
│ │  
│ │ -    @id.setter
│ │ -    def id(self, id):
│ │ -        """Sets the id of this TransactionResponseMerchantOrder.
│ │ +    @transaction_data.setter
│ │ +    def transaction_data(self, transaction_data):
│ │ +        """Sets the transaction_data of this TransactionUpdateRequest.
│ │  
│ │ -        Merchant's ID of the order  # noqa: E501
│ │ +        Transaction data  # noqa: E501
│ │  
│ │ -        :param id: The id of this TransactionResponseMerchantOrder.  # noqa: E501
│ │ -        :type: str
│ │ +        :param transaction_data: The transaction_data of this TransactionUpdateRequest.  # noqa: E501
│ │ +        :type: RequestUpdatedTransactionData
│ │          """
│ │ -        if id is None:
│ │ -            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
│ │ -        if id is not None and len(id) > 50:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `id`, length must be less than or equal to `50`"
│ │ -            )  # noqa: E501
│ │ -        if id is not None and len(id) < 1:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `id`, length must be greater than or equal to `1`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._id = id
│ │ +        self._transaction_data = transaction_data
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -121,15 +123,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(TransactionResponseMerchantOrder, dict):
│ │ +        if issubclass(TransactionUpdateRequest, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -137,15 +139,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, TransactionResponseMerchantOrder):
│ │ +        if not isinstance(other, TransactionUpdateRequest):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/transaction_update_request.py
│ ├── +++ cardpay-3.6.21/cardpay/model/schedule_option.py
│ │┄ Files 24% similar despite different names
│ │ @@ -12,100 +12,89 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ -from cardpay.model.request import Request  # noqa: F401,E501
│ │ -from cardpay.model.request_updated_transaction_data import (
│ │ -    RequestUpdatedTransactionData,
│ │ -)  # noqa: F401,E501
│ │  
│ │ -
│ │ -class TransactionUpdateRequest(object):
│ │ +class ScheduleOption(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │ -    swagger_types = {
│ │ -        "request": "Request",
│ │ -        "transaction_data": "RequestUpdatedTransactionData",
│ │ -    }
│ │ +    swagger_types = {"amount": "float", "installments": "int"}
│ │  
│ │ -    attribute_map = {"request": "request", "transaction_data": "transaction_data"}
│ │ +    attribute_map = {"amount": "amount", "installments": "installments"}
│ │  
│ │ -    def __init__(self, request=None, transaction_data=None):  # noqa: E501
│ │ -        """TransactionUpdateRequest - a model defined in Swagger"""  # noqa: E501
│ │ +    def __init__(self, amount=None, installments=None):  # noqa: E501
│ │ +        """ScheduleOption - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._request = None
│ │ -        self._transaction_data = None
│ │ +        self._amount = None
│ │ +        self._installments = None
│ │          self.discriminator = None
│ │  
│ │ -        self.request = request
│ │ -        if transaction_data is not None:
│ │ -            self.transaction_data = transaction_data
│ │ +        if amount is not None:
│ │ +            self.amount = amount
│ │ +        if installments is not None:
│ │ +            self.installments = installments
│ │  
│ │      @property
│ │ -    def request(self):
│ │ -        """Gets the request of this TransactionUpdateRequest.  # noqa: E501
│ │ +    def amount(self):
│ │ +        """Gets the amount of this ScheduleOption.  # noqa: E501
│ │  
│ │ -        Request  # noqa: E501
│ │ +        Amount per one payment.  # noqa: E501
│ │  
│ │ -        :return: The request of this TransactionUpdateRequest.  # noqa: E501
│ │ -        :rtype: Request
│ │ +        :return: The amount of this ScheduleOption.  # noqa: E501
│ │ +        :rtype: float
│ │          """
│ │ -        return self._request
│ │ +        return self._amount
│ │  
│ │ -    @request.setter
│ │ -    def request(self, request):
│ │ -        """Sets the request of this TransactionUpdateRequest.
│ │ +    @amount.setter
│ │ +    def amount(self, amount):
│ │ +        """Sets the amount of this ScheduleOption.
│ │  
│ │ -        Request  # noqa: E501
│ │ +        Amount per one payment.  # noqa: E501
│ │  
│ │ -        :param request: The request of this TransactionUpdateRequest.  # noqa: E501
│ │ -        :type: Request
│ │ +        :param amount: The amount of this ScheduleOption.  # noqa: E501
│ │ +        :type: float
│ │          """
│ │ -        if request is None:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `request`, must not be `None`"
│ │ -            )  # noqa: E501
│ │  
│ │ -        self._request = request
│ │ +        self._amount = amount
│ │  
│ │      @property
│ │ -    def transaction_data(self):
│ │ -        """Gets the transaction_data of this TransactionUpdateRequest.  # noqa: E501
│ │ +    def installments(self):
│ │ +        """Gets the installments of this ScheduleOption.  # noqa: E501
│ │  
│ │ -        Transaction data  # noqa: E501
│ │ +        Number of payments, can be 3-12.  # noqa: E501
│ │  
│ │ -        :return: The transaction_data of this TransactionUpdateRequest.  # noqa: E501
│ │ -        :rtype: RequestUpdatedTransactionData
│ │ +        :return: The installments of this ScheduleOption.  # noqa: E501
│ │ +        :rtype: int
│ │          """
│ │ -        return self._transaction_data
│ │ +        return self._installments
│ │  
│ │ -    @transaction_data.setter
│ │ -    def transaction_data(self, transaction_data):
│ │ -        """Sets the transaction_data of this TransactionUpdateRequest.
│ │ +    @installments.setter
│ │ +    def installments(self, installments):
│ │ +        """Sets the installments of this ScheduleOption.
│ │  
│ │ -        Transaction data  # noqa: E501
│ │ +        Number of payments, can be 3-12.  # noqa: E501
│ │  
│ │ -        :param transaction_data: The transaction_data of this TransactionUpdateRequest.  # noqa: E501
│ │ -        :type: RequestUpdatedTransactionData
│ │ +        :param installments: The installments of this ScheduleOption.  # noqa: E501
│ │ +        :type: int
│ │          """
│ │  
│ │ -        self._transaction_data = transaction_data
│ │ +        self._installments = installments
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -123,15 +112,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(TransactionUpdateRequest, dict):
│ │ +        if issubclass(ScheduleOption, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -139,15 +128,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, TransactionUpdateRequest):
│ │ +        if not isinstance(other, ScheduleOption):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/updated_plan_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/updated_plan_data.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/model/updated_subscription_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/oneclick_data.py
│ │┄ Files 18% similar despite different names
│ │ @@ -12,390 +12,344 @@
│ │  
│ │  
│ │  import pprint
│ │  import re  # noqa: F401
│ │  
│ │  import six
│ │  
│ │ -from cardpay.model.recurring_response_filing import (
│ │ -    RecurringResponseFiling,
│ │ -)  # noqa: F401,E501
│ │ -from cardpay.model.updated_subscription_recurring_data import (
│ │ -    UpdatedSubscriptionRecurringData,
│ │ +from cardpay.model.recurring_request_filing import (
│ │ +    RecurringRequestFiling,
│ │  )  # noqa: F401,E501
│ │  
│ │  
│ │ -class UpdatedSubscriptionData(object):
│ │ +class OneclickData(object):
│ │      """NOTE: This class is auto generated by the swagger code generator program.
│ │  
│ │      Do not edit the class manually.
│ │      """
│ │  
│ │      """
│ │      Attributes:
│ │        swagger_types (dict): The key is attribute name
│ │                              and the value is attribute type.
│ │        attribute_map (dict): The key is attribute name
│ │                              and the value is json key in definition.
│ │      """
│ │      swagger_types = {
│ │ -        "change_status_claim_id": "str",
│ │ -        "details": "str",
│ │ -        "filing": "RecurringResponseFiling",
│ │ -        "id": "str",
│ │ -        "is_executed": "bool",
│ │ -        "recurring_data": "UpdatedSubscriptionRecurringData",
│ │ -        "remaining_amount": "float",
│ │ -        "status": "str",
│ │ -        "status_to": "str",
│ │ -        "updated": "datetime",
│ │ +        "amount": "float",
│ │ +        "currency": "str",
│ │ +        "dynamic_descriptor": "str",
│ │ +        "filing": "RecurringRequestFiling",
│ │ +        "generate_token": "bool",
│ │ +        "initiator": "str",
│ │ +        "note": "str",
│ │ +        "preauth": "bool",
│ │ +        "trans_type": "str",
│ │      }
│ │  
│ │      attribute_map = {
│ │ -        "change_status_claim_id": "change_status_claim_id",
│ │ -        "details": "details",
│ │ +        "amount": "amount",
│ │ +        "currency": "currency",
│ │ +        "dynamic_descriptor": "dynamic_descriptor",
│ │          "filing": "filing",
│ │ -        "id": "id",
│ │ -        "is_executed": "is_executed",
│ │ -        "recurring_data": "recurring_data",
│ │ -        "remaining_amount": "remaining_amount",
│ │ -        "status": "status",
│ │ -        "status_to": "status_to",
│ │ -        "updated": "updated",
│ │ +        "generate_token": "generate_token",
│ │ +        "initiator": "initiator",
│ │ +        "note": "note",
│ │ +        "preauth": "preauth",
│ │ +        "trans_type": "trans_type",
│ │      }
│ │  
│ │      def __init__(
│ │          self,
│ │ -        change_status_claim_id=None,
│ │ -        details=None,
│ │ +        amount=None,
│ │ +        currency=None,
│ │ +        dynamic_descriptor=None,
│ │          filing=None,
│ │ -        id=None,
│ │ -        is_executed=None,
│ │ -        recurring_data=None,
│ │ -        remaining_amount=None,
│ │ -        status=None,
│ │ -        status_to=None,
│ │ -        updated=None,
│ │ +        generate_token=None,
│ │ +        initiator=None,
│ │ +        note=None,
│ │ +        preauth=None,
│ │ +        trans_type=None,
│ │      ):  # noqa: E501
│ │ -        """UpdatedSubscriptionData - a model defined in Swagger"""  # noqa: E501
│ │ +        """OneclickData - a model defined in Swagger"""  # noqa: E501
│ │  
│ │ -        self._change_status_claim_id = None
│ │ -        self._details = None
│ │ +        self._amount = None
│ │ +        self._currency = None
│ │ +        self._dynamic_descriptor = None
│ │          self._filing = None
│ │ -        self._id = None
│ │ -        self._is_executed = None
│ │ -        self._recurring_data = None
│ │ -        self._remaining_amount = None
│ │ -        self._status = None
│ │ -        self._status_to = None
│ │ -        self._updated = None
│ │ +        self._generate_token = None
│ │ +        self._initiator = None
│ │ +        self._note = None
│ │ +        self._preauth = None
│ │ +        self._trans_type = None
│ │          self.discriminator = None
│ │  
│ │ -        if change_status_claim_id is not None:
│ │ -            self.change_status_claim_id = change_status_claim_id
│ │ -        if details is not None:
│ │ -            self.details = details
│ │ +        if amount is not None:
│ │ +            self.amount = amount
│ │ +        self.currency = currency
│ │ +        if dynamic_descriptor is not None:
│ │ +            self.dynamic_descriptor = dynamic_descriptor
│ │          if filing is not None:
│ │              self.filing = filing
│ │ -        if id is not None:
│ │ -            self.id = id
│ │ -        if is_executed is not None:
│ │ -            self.is_executed = is_executed
│ │ -        if recurring_data is not None:
│ │ -            self.recurring_data = recurring_data
│ │ -        if remaining_amount is not None:
│ │ -            self.remaining_amount = remaining_amount
│ │ -        if status is not None:
│ │ -            self.status = status
│ │ -        if status_to is not None:
│ │ -            self.status_to = status_to
│ │ -        if updated is not None:
│ │ -            self.updated = updated
│ │ +        if generate_token is not None:
│ │ +            self.generate_token = generate_token
│ │ +        self.initiator = initiator
│ │ +        if note is not None:
│ │ +            self.note = note
│ │ +        if preauth is not None:
│ │ +            self.preauth = preauth
│ │ +        if trans_type is not None:
│ │ +            self.trans_type = trans_type
│ │  
│ │      @property
│ │ -    def change_status_claim_id(self):
│ │ -        """Gets the change_status_claim_id of this UpdatedSubscriptionData.  # noqa: E501
│ │ +    def amount(self):
│ │ +        """Gets the amount of this OneclickData.  # noqa: E501
│ │  
│ │ -        ID of claim; appears in case of request change was processed asynchronously and put in queue. Mandatory if request was put in queue.  # noqa: E501
│ │ +        The total transaction amount in selected currency with dot as a decimal separator, must be less than 100 millions  # noqa: E501
│ │  
│ │ -        :return: The change_status_claim_id of this UpdatedSubscriptionData.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The amount of this OneclickData.  # noqa: E501
│ │ +        :rtype: float
│ │          """
│ │ -        return self._change_status_claim_id
│ │ +        return self._amount
│ │  
│ │ -    @change_status_claim_id.setter
│ │ -    def change_status_claim_id(self, change_status_claim_id):
│ │ -        """Sets the change_status_claim_id of this UpdatedSubscriptionData.
│ │ +    @amount.setter
│ │ +    def amount(self, amount):
│ │ +        """Sets the amount of this OneclickData.
│ │  
│ │ -        ID of claim; appears in case of request change was processed asynchronously and put in queue. Mandatory if request was put in queue.  # noqa: E501
│ │ +        The total transaction amount in selected currency with dot as a decimal separator, must be less than 100 millions  # noqa: E501
│ │  
│ │ -        :param change_status_claim_id: The change_status_claim_id of this UpdatedSubscriptionData.  # noqa: E501
│ │ -        :type: str
│ │ +        :param amount: The amount of this OneclickData.  # noqa: E501
│ │ +        :type: float
│ │          """
│ │  
│ │ -        self._change_status_claim_id = change_status_claim_id
│ │ +        self._amount = amount
│ │  
│ │      @property
│ │ -    def details(self):
│ │ -        """Gets the details of this UpdatedSubscriptionData.  # noqa: E501
│ │ +    def currency(self):
│ │ +        """Gets the currency of this OneclickData.  # noqa: E501
│ │  
│ │ -        Operation details, errors, etc.  # noqa: E501
│ │ +        [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code  # noqa: E501
│ │  
│ │ -        :return: The details of this UpdatedSubscriptionData.  # noqa: E501
│ │ +        :return: The currency of this OneclickData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._details
│ │ +        return self._currency
│ │  
│ │ -    @details.setter
│ │ -    def details(self, details):
│ │ -        """Sets the details of this UpdatedSubscriptionData.
│ │ +    @currency.setter
│ │ +    def currency(self, currency):
│ │ +        """Sets the currency of this OneclickData.
│ │  
│ │ -        Operation details, errors, etc.  # noqa: E501
│ │ +        [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code  # noqa: E501
│ │  
│ │ -        :param details: The details of this UpdatedSubscriptionData.  # noqa: E501
│ │ +        :param currency: The currency of this OneclickData.  # noqa: E501
│ │          :type: str
│ │          """
│ │ +        if currency is None:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `currency`, must not be `None`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._details = details
│ │ +        self._currency = currency
│ │  
│ │      @property
│ │ -    def filing(self):
│ │ -        """Gets the filing of this UpdatedSubscriptionData.  # noqa: E501
│ │ +    def dynamic_descriptor(self):
│ │ +        """Gets the dynamic_descriptor of this OneclickData.  # noqa: E501
│ │  
│ │ -        Filing data  # noqa: E501
│ │ +        Short description of the service or product, must be enabled by CardPay manager to be used.  # noqa: E501
│ │  
│ │ -        :return: The filing of this UpdatedSubscriptionData.  # noqa: E501
│ │ -        :rtype: RecurringResponseFiling
│ │ +        :return: The dynamic_descriptor of this OneclickData.  # noqa: E501
│ │ +        :rtype: str
│ │          """
│ │ -        return self._filing
│ │ +        return self._dynamic_descriptor
│ │  
│ │ -    @filing.setter
│ │ -    def filing(self, filing):
│ │ -        """Sets the filing of this UpdatedSubscriptionData.
│ │ +    @dynamic_descriptor.setter
│ │ +    def dynamic_descriptor(self, dynamic_descriptor):
│ │ +        """Sets the dynamic_descriptor of this OneclickData.
│ │  
│ │ -        Filing data  # noqa: E501
│ │ +        Short description of the service or product, must be enabled by CardPay manager to be used.  # noqa: E501
│ │  
│ │ -        :param filing: The filing of this UpdatedSubscriptionData.  # noqa: E501
│ │ -        :type: RecurringResponseFiling
│ │ +        :param dynamic_descriptor: The dynamic_descriptor of this OneclickData.  # noqa: E501
│ │ +        :type: str
│ │          """
│ │ +        if dynamic_descriptor is not None and len(dynamic_descriptor) > 25:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `dynamic_descriptor`, length must be less than or equal to `25`"
│ │ +            )  # noqa: E501
│ │ +        if dynamic_descriptor is not None and len(dynamic_descriptor) < 0:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `dynamic_descriptor`, length must be greater than or equal to `0`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._filing = filing
│ │ +        self._dynamic_descriptor = dynamic_descriptor
│ │  
│ │      @property
│ │ -    def id(self):
│ │ -        """Gets the id of this UpdatedSubscriptionData.  # noqa: E501
│ │ +    def filing(self):
│ │ +        """Gets the filing of this OneclickData.  # noqa: E501
│ │  
│ │ -        ID of subscription  # noqa: E501
│ │ +        Filing data, should be send in all recurring requests besides first recurring request First recurring request should be send without filing attribute  # noqa: E501
│ │  
│ │ -        :return: The id of this UpdatedSubscriptionData.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The filing of this OneclickData.  # noqa: E501
│ │ +        :rtype: RecurringRequestFiling
│ │          """
│ │ -        return self._id
│ │ +        return self._filing
│ │  
│ │ -    @id.setter
│ │ -    def id(self, id):
│ │ -        """Sets the id of this UpdatedSubscriptionData.
│ │ +    @filing.setter
│ │ +    def filing(self, filing):
│ │ +        """Sets the filing of this OneclickData.
│ │  
│ │ -        ID of subscription  # noqa: E501
│ │ +        Filing data, should be send in all recurring requests besides first recurring request First recurring request should be send without filing attribute  # noqa: E501
│ │  
│ │ -        :param id: The id of this UpdatedSubscriptionData.  # noqa: E501
│ │ -        :type: str
│ │ +        :param filing: The filing of this OneclickData.  # noqa: E501
│ │ +        :type: RecurringRequestFiling
│ │          """
│ │  
│ │ -        self._id = id
│ │ +        self._filing = filing
│ │  
│ │      @property
│ │ -    def is_executed(self):
│ │ -        """Gets the is_executed of this UpdatedSubscriptionData.  # noqa: E501
│ │ +    def generate_token(self):
│ │ +        """Gets the generate_token of this OneclickData.  # noqa: E501
│ │  
│ │ -        Status of operation  # noqa: E501
│ │ +        This attribute can be received only in first recurring request. If set to 'true', Card token will be generated and returned in GET response for all successful transactions (can't be generated for declined transactions). In all requests with filing_id card.token can't be generated.  # noqa: E501
│ │  
│ │ -        :return: The is_executed of this UpdatedSubscriptionData.  # noqa: E501
│ │ +        :return: The generate_token of this OneclickData.  # noqa: E501
│ │          :rtype: bool
│ │          """
│ │ -        return self._is_executed
│ │ +        return self._generate_token
│ │  
│ │ -    @is_executed.setter
│ │ -    def is_executed(self, is_executed):
│ │ -        """Sets the is_executed of this UpdatedSubscriptionData.
│ │ +    @generate_token.setter
│ │ +    def generate_token(self, generate_token):
│ │ +        """Sets the generate_token of this OneclickData.
│ │  
│ │ -        Status of operation  # noqa: E501
│ │ +        This attribute can be received only in first recurring request. If set to 'true', Card token will be generated and returned in GET response for all successful transactions (can't be generated for declined transactions). In all requests with filing_id card.token can't be generated.  # noqa: E501
│ │  
│ │ -        :param is_executed: The is_executed of this UpdatedSubscriptionData.  # noqa: E501
│ │ +        :param generate_token: The generate_token of this OneclickData.  # noqa: E501
│ │          :type: bool
│ │          """
│ │  
│ │ -        self._is_executed = is_executed
│ │ +        self._generate_token = generate_token
│ │  
│ │      @property
│ │ -    def recurring_data(self):
│ │ -        """Gets the recurring_data of this UpdatedSubscriptionData.  # noqa: E501
│ │ +    def initiator(self):
│ │ +        """Gets the initiator of this OneclickData.  # noqa: E501
│ │  
│ │ -        Recurring data  # noqa: E501
│ │ +        Can be only 2 values - 'mit' (merchant initiated transaction), 'cit' (cardholder initiated transaction).  # noqa: E501
│ │  
│ │ -        :return: The recurring_data of this UpdatedSubscriptionData.  # noqa: E501
│ │ -        :rtype: UpdatedSubscriptionRecurringData
│ │ +        :return: The initiator of this OneclickData.  # noqa: E501
│ │ +        :rtype: str
│ │          """
│ │ -        return self._recurring_data
│ │ +        return self._initiator
│ │  
│ │ -    @recurring_data.setter
│ │ -    def recurring_data(self, recurring_data):
│ │ -        """Sets the recurring_data of this UpdatedSubscriptionData.
│ │ +    @initiator.setter
│ │ +    def initiator(self, initiator):
│ │ +        """Sets the initiator of this OneclickData.
│ │  
│ │ -        Recurring data  # noqa: E501
│ │ +        Can be only 2 values - 'mit' (merchant initiated transaction), 'cit' (cardholder initiated transaction).  # noqa: E501
│ │  
│ │ -        :param recurring_data: The recurring_data of this UpdatedSubscriptionData.  # noqa: E501
│ │ -        :type: UpdatedSubscriptionRecurringData
│ │ +        :param initiator: The initiator of this OneclickData.  # noqa: E501
│ │ +        :type: str
│ │          """
│ │ +        if initiator is None:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `initiator`, must not be `None`"
│ │ +            )  # noqa: E501
│ │ +        if initiator is not None and not re.search(r"mit|cit", initiator):  # noqa: E501
│ │ +            raise ValueError(
│ │ +                r"Invalid value for `initiator`, must be a follow pattern or equal to `/mit|cit/`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._recurring_data = recurring_data
│ │ +        self._initiator = initiator
│ │  
│ │      @property
│ │ -    def remaining_amount(self):
│ │ -        """Gets the remaining_amount of this UpdatedSubscriptionData.  # noqa: E501
│ │ +    def note(self):
│ │ +        """Gets the note of this OneclickData.  # noqa: E501
│ │  
│ │ -        The amount remained to be paid after repayment operation. Mandatory for `REPAYMENT` operation only  # noqa: E501
│ │ +        Note about the recurring that will not be displayed to customer.  # noqa: E501
│ │  
│ │ -        :return: The remaining_amount of this UpdatedSubscriptionData.  # noqa: E501
│ │ -        :rtype: float
│ │ +        :return: The note of this OneclickData.  # noqa: E501
│ │ +        :rtype: str
│ │          """
│ │ -        return self._remaining_amount
│ │ +        return self._note
│ │  
│ │ -    @remaining_amount.setter
│ │ -    def remaining_amount(self, remaining_amount):
│ │ -        """Sets the remaining_amount of this UpdatedSubscriptionData.
│ │ +    @note.setter
│ │ +    def note(self, note):
│ │ +        """Sets the note of this OneclickData.
│ │  
│ │ -        The amount remained to be paid after repayment operation. Mandatory for `REPAYMENT` operation only  # noqa: E501
│ │ +        Note about the recurring that will not be displayed to customer.  # noqa: E501
│ │  
│ │ -        :param remaining_amount: The remaining_amount of this UpdatedSubscriptionData.  # noqa: E501
│ │ -        :type: float
│ │ +        :param note: The note of this OneclickData.  # noqa: E501
│ │ +        :type: str
│ │          """
│ │ +        if note is not None and len(note) > 100:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `note`, length must be less than or equal to `100`"
│ │ +            )  # noqa: E501
│ │ +        if note is not None and len(note) < 0:
│ │ +            raise ValueError(
│ │ +                "Invalid value for `note`, length must be greater than or equal to `0`"
│ │ +            )  # noqa: E501
│ │  
│ │ -        self._remaining_amount = remaining_amount
│ │ -
│ │ -    class Status(object):
│ │ -        ACTIVE = "ACTIVE"
│ │ -        INACTIVE = "INACTIVE"
│ │ -        CANCELLED = "CANCELLED"
│ │ -        PAST_DUE = "PAST_DUE"
│ │ -        PENDING = "PENDING"
│ │ -        COMPLETED = "COMPLETED"
│ │ -        CARD_EXPIRED = "CARD_EXPIRED"
│ │ -        ACTIVATION_FAILED = "ACTIVATION_FAILED"
│ │ +        self._note = note
│ │  
│ │      @property
│ │ -    def status(self):
│ │ -        """Gets the status of this UpdatedSubscriptionData.  # noqa: E501
│ │ +    def preauth(self):
│ │ +        """Gets the preauth of this OneclickData.  # noqa: E501
│ │  
│ │ -        Resulted status of subscription  # noqa: E501
│ │ +        This parameter allowed to be used only for first recurring payment. If set to 'true', the amount will not be captured but only blocked. One-click payments with 'preauth' attribute will be captured automatically in 7 days from the time of creating the preauth transaction. In continue recurring request (with 'filing_id') this parameter shouldn't be used.  # noqa: E501
│ │  
│ │ -        :return: The status of this UpdatedSubscriptionData.  # noqa: E501
│ │ -        :rtype: str
│ │ +        :return: The preauth of this OneclickData.  # noqa: E501
│ │ +        :rtype: bool
│ │          """
│ │ -        return self._status
│ │ +        return self._preauth
│ │  
│ │ -    @status.setter
│ │ -    def status(self, status):
│ │ -        """Sets the status of this UpdatedSubscriptionData.
│ │ +    @preauth.setter
│ │ +    def preauth(self, preauth):
│ │ +        """Sets the preauth of this OneclickData.
│ │  
│ │ -        Resulted status of subscription  # noqa: E501
│ │ +        This parameter allowed to be used only for first recurring payment. If set to 'true', the amount will not be captured but only blocked. One-click payments with 'preauth' attribute will be captured automatically in 7 days from the time of creating the preauth transaction. In continue recurring request (with 'filing_id') this parameter shouldn't be used.  # noqa: E501
│ │  
│ │ -        :param status: The status of this UpdatedSubscriptionData.  # noqa: E501
│ │ -        :type: str
│ │ +        :param preauth: The preauth of this OneclickData.  # noqa: E501
│ │ +        :type: bool
│ │          """
│ │ -        allowed_values = [
│ │ -            "ACTIVE",
│ │ -            "INACTIVE",
│ │ -            "CANCELLED",
│ │ -            "PAST_DUE",
│ │ -            "PENDING",
│ │ -            "COMPLETED",
│ │ -            "CARD_EXPIRED",
│ │ -            "ACTIVATION_FAILED",
│ │ -        ]  # noqa: E501
│ │ -        if status not in allowed_values:
│ │ -            raise ValueError(
│ │ -                "Invalid value for `status` ({0}), must be one of {1}".format(  # noqa: E501
│ │ -                    status, allowed_values
│ │ -                )
│ │ -            )
│ │  
│ │ -        self._status = status
│ │ +        self._preauth = preauth
│ │  
│ │ -    class StatusTo(object):
│ │ -        ACTIVE = "ACTIVE"
│ │ -        INACTIVE = "INACTIVE"
│ │ -        CANCELLED = "CANCELLED"
│ │ -        PAST_DUE = "PAST_DUE"
│ │ -        PENDING = "PENDING"
│ │ -        COMPLETED = "COMPLETED"
│ │ -        CARD_EXPIRED = "CARD_EXPIRED"
│ │ -        ACTIVATION_FAILED = "ACTIVATION_FAILED"
│ │ +    class TransType(object):
│ │ +        _01 = "01"
│ │ +        _03 = "03"
│ │ +        _10 = "10"
│ │ +        _11 = "11"
│ │ +        _28 = "28"
│ │  
│ │      @property
│ │ -    def status_to(self):
│ │ -        """Gets the status_to of this UpdatedSubscriptionData.  # noqa: E501
│ │ +    def trans_type(self):
│ │ +        """Gets the trans_type of this OneclickData.  # noqa: E501
│ │  
│ │ -        Requested status of subscription. Mandatory for `CHANGE_STATUS` operation only.  # noqa: E501
│ │  
│ │ -        :return: The status_to of this UpdatedSubscriptionData.  # noqa: E501
│ │ +        :return: The trans_type of this OneclickData.  # noqa: E501
│ │          :rtype: str
│ │          """
│ │ -        return self._status_to
│ │ +        return self._trans_type
│ │  
│ │ -    @status_to.setter
│ │ -    def status_to(self, status_to):
│ │ -        """Sets the status_to of this UpdatedSubscriptionData.
│ │ +    @trans_type.setter
│ │ +    def trans_type(self, trans_type):
│ │ +        """Sets the trans_type of this OneclickData.
│ │  
│ │ -        Requested status of subscription. Mandatory for `CHANGE_STATUS` operation only.  # noqa: E501
│ │  
│ │ -        :param status_to: The status_to of this UpdatedSubscriptionData.  # noqa: E501
│ │ +        :param trans_type: The trans_type of this OneclickData.  # noqa: E501
│ │          :type: str
│ │          """
│ │ -        allowed_values = [
│ │ -            "ACTIVE",
│ │ -            "INACTIVE",
│ │ -            "CANCELLED",
│ │ -            "PAST_DUE",
│ │ -            "PENDING",
│ │ -            "COMPLETED",
│ │ -            "CARD_EXPIRED",
│ │ -            "ACTIVATION_FAILED",
│ │ -        ]  # noqa: E501
│ │ -        if status_to not in allowed_values:
│ │ +        allowed_values = ["01", "03", "10", "11", "28"]  # noqa: E501
│ │ +        if trans_type not in allowed_values:
│ │              raise ValueError(
│ │ -                "Invalid value for `status_to` ({0}), must be one of {1}".format(  # noqa: E501
│ │ -                    status_to, allowed_values
│ │ +                "Invalid value for `trans_type` ({0}), must be one of {1}".format(  # noqa: E501
│ │ +                    trans_type, allowed_values
│ │                  )
│ │              )
│ │  
│ │ -        self._status_to = status_to
│ │ -
│ │ -    @property
│ │ -    def updated(self):
│ │ -        """Gets the updated of this UpdatedSubscriptionData.  # noqa: E501
│ │ -
│ │ -        If request is successful then date and time returned in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (format - yyyy-MM-dd'T'HH:mm:ss'Z').  # noqa: E501
│ │ -
│ │ -        :return: The updated of this UpdatedSubscriptionData.  # noqa: E501
│ │ -        :rtype: datetime
│ │ -        """
│ │ -        return self._updated
│ │ -
│ │ -    @updated.setter
│ │ -    def updated(self, updated):
│ │ -        """Sets the updated of this UpdatedSubscriptionData.
│ │ -
│ │ -        If request is successful then date and time returned in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (format - yyyy-MM-dd'T'HH:mm:ss'Z').  # noqa: E501
│ │ -
│ │ -        :param updated: The updated of this UpdatedSubscriptionData.  # noqa: E501
│ │ -        :type: datetime
│ │ -        """
│ │ -
│ │ -        self._updated = updated
│ │ +        self._trans_type = trans_type
│ │  
│ │      def to_dict(self):
│ │          """Returns the model properties as a dict"""
│ │          result = {}
│ │  
│ │          for attr, _ in six.iteritems(self.swagger_types):
│ │              value = getattr(self, attr)
│ │ @@ -413,15 +367,15 @@
│ │                          else item,
│ │                          value.items(),
│ │                      )
│ │                  )
│ │              else:
│ │                  if value is not None:
│ │                      result[attr] = value
│ │ -        if issubclass(UpdatedSubscriptionData, dict):
│ │ +        if issubclass(OneclickData, dict):
│ │              for key, value in self.items():
│ │                  result[key] = value
│ │  
│ │          return result
│ │  
│ │      def to_str(self):
│ │          """Returns the string representation of the model"""
│ │ @@ -429,15 +383,15 @@
│ │  
│ │      def __repr__(self):
│ │          """For `print` and `pprint`"""
│ │          return self.to_str()
│ │  
│ │      def __eq__(self, other):
│ │          """Returns true if both objects are equal"""
│ │ -        if not isinstance(other, UpdatedSubscriptionData):
│ │ +        if not isinstance(other, OneclickData):
│ │              return False
│ │  
│ │          return self.__dict__ == other.__dict__
│ │  
│ │      def __ne__(self, other):
│ │          """Returns true if both objects are not equal"""
│ │          return not self == other
│ │   --- cardpay-3.45.8/cardpay/model/updated_subscription_recurring_data.py
│ ├── +++ cardpay-3.6.21/cardpay/model/updated_subscription_recurring_data.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay/__init__.py
│ ├── +++ cardpay-3.6.21/cardpay/__init__.py
│ │┄ Files 8% similar despite different names
│ │ @@ -25,50 +25,69 @@
│ │  from cardpay.model.authentication_customer import AuthenticationCustomer
│ │  from cardpay.model.authentication_data import AuthenticationData
│ │  from cardpay.model.authentication_data_response import AuthenticationDataResponse
│ │  from cardpay.model.authentication_error import AuthenticationError
│ │  from cardpay.model.bad_request_error import BadRequestError
│ │  from cardpay.model.bank_card_payout_data import BankCardPayoutData
│ │  from cardpay.model.billing_address import BillingAddress
│ │ -from cardpay.model.card_info_request import CardInfoRequest
│ │ -from cardpay.model.card_info_response import CardInfoResponse
│ │ +from cardpay.model.card_binding_card import CardBindingCard
│ │ +from cardpay.model.card_binding_card_account import CardBindingCardAccount
│ │ +from cardpay.model.card_binding_data import CardBindingData
│ │ +from cardpay.model.card_binding_merchant_order import CardBindingMerchantOrder
│ │ +from cardpay.model.card_binding_recurring_data_response import (
│ │ +    CardBindingRecurringDataResponse,
│ │ +)
│ │ +from cardpay.model.card_binding_request import CardBindingRequest
│ │ +from cardpay.model.card_binding_response import CardBindingResponse
│ │  from cardpay.model.change_subscription_status_claim_response import (
│ │      ChangeSubscriptionStatusClaimResponse,
│ │  )
│ │  from cardpay.model.changed_plan_data import ChangedPlanData
│ │  from cardpay.model.claim_response_subscription_data import ClaimResponseSubscriptionData
│ │  from cardpay.model.confirm3ds_request import Confirm3dsRequest
│ │  from cardpay.model.dispute_list import DisputeList
│ │  from cardpay.model.dispute_response import DisputeResponse
│ │  from cardpay.model.dispute_response_card import DisputeResponseCard
│ │  from cardpay.model.dispute_response_card_account import DisputeResponseCardAccount
│ │  from cardpay.model.dispute_response_customer import DisputeResponseCustomer
│ │  from cardpay.model.dispute_response_dispute_data import DisputeResponseDisputeData
│ │  from cardpay.model.dispute_response_merchant_order import DisputeResponseMerchantOrder
│ │  from cardpay.model.dispute_response_payment_data import DisputeResponsePaymentData
│ │ -from cardpay.model.ewallet_account import EwalletAccount
│ │  from cardpay.model.filing_recurring_data import FilingRecurringData
│ │  from cardpay.model.filing_request import FilingRequest
│ │  from cardpay.model.filing_request_merchant_order import FilingRequestMerchantOrder
│ │  from cardpay.model.filing_request_subscription_data import FilingRequestSubscriptionData
│ │  from cardpay.model.filter_parameters import FilterParameters
│ │  from cardpay.model.flight import Flight
│ │  from cardpay.model.flights import Flights
│ │  from cardpay.model.installment_data import InstallmentData
│ │ -from cardpay.model.invoice_creation_data_response import InvoiceCreationDataResponse
│ │ -from cardpay.model.invoice_creation_response import InvoiceCreationResponse
│ │ -from cardpay.model.invoice_customer import InvoiceCustomer
│ │ -from cardpay.model.invoice_data import InvoiceData
│ │ -from cardpay.model.invoice_get_data_response import InvoiceGetDataResponse
│ │ -from cardpay.model.invoice_get_response import InvoiceGetResponse
│ │ -from cardpay.model.invoice_item import InvoiceItem
│ │ -from cardpay.model.invoice_merchant_order import InvoiceMerchantOrder
│ │ -from cardpay.model.invoice_request import InvoiceRequest
│ │ +from cardpay.model.installment_subscription_request import (
│ │ +    InstallmentSubscriptionRequest,
│ │ +)
│ │  from cardpay.model.item import Item
│ │  from cardpay.model.limit_info_response import LimitInfoResponse
│ │ +from cardpay.model.mobile_card_account_response import MobileCardAccountResponse
│ │ +from cardpay.model.mobile_customer_response import MobileCustomerResponse
│ │ +from cardpay.model.mobile_merchant_order_response import MobileMerchantOrderResponse
│ │ +from cardpay.model.mobile_payment_data import MobilePaymentData
│ │ +from cardpay.model.mobile_payment_data_response import MobilePaymentDataResponse
│ │ +from cardpay.model.mobile_payment_full_response import MobilePaymentFullResponse
│ │ +from cardpay.model.mobile_payment_merchant_order import MobilePaymentMerchantOrder
│ │ +from cardpay.model.mobile_payment_method_data_response import (
│ │ +    MobilePaymentMethodDataResponse,
│ │ +)
│ │ +from cardpay.model.mobile_payment_method_list_response import (
│ │ +    MobilePaymentMethodListResponse,
│ │ +)
│ │ +from cardpay.model.mobile_payment_request import MobilePaymentRequest
│ │ +from cardpay.model.mobile_payment_response import MobilePaymentResponse
│ │ +from cardpay.model.mobile_token_request import MobileTokenRequest
│ │ +from cardpay.model.mobile_token_response import MobileTokenResponse
│ │ +from cardpay.model.mobile_verification_request import MobileVerificationRequest
│ │ +from cardpay.model.mobile_verification_response import MobileVerificationResponse
│ │  from cardpay.model.next_subscription_payment import NextSubscriptionPayment
│ │  from cardpay.model.not_found_error import NotFoundError
│ │  from cardpay.model.o_auth_error import OAuthError
│ │  from cardpay.model.oneclick_data import OneclickData
│ │  from cardpay.model.payment_callback import PaymentCallback
│ │  from cardpay.model.payment_gateway_creation_response import (
│ │      PaymentGatewayCreationResponse,
│ │ @@ -121,16 +140,14 @@
│ │  )
│ │  from cardpay.model.payout_response_customer import PayoutResponseCustomer
│ │  from cardpay.model.payout_response_e_wallet_account import PayoutResponseEWalletAccount
│ │  from cardpay.model.payout_response_payout_data import PayoutResponsePayoutData
│ │  from cardpay.model.payout_update_request import PayoutUpdateRequest
│ │  from cardpay.model.payout_update_response import PayoutUpdateResponse
│ │  from cardpay.model.payouts_list import PayoutsList
│ │ -from cardpay.model.pix_account_details_request import PixAccountDetailsRequest
│ │ -from cardpay.model.pix_account_details_response import PixAccountDetailsResponse
│ │  from cardpay.model.plan import Plan
│ │  from cardpay.model.plan_data_list import PlanDataList
│ │  from cardpay.model.plan_update_request import PlanUpdateRequest
│ │  from cardpay.model.plan_update_request_plan_data import PlanUpdateRequestPlanData
│ │  from cardpay.model.plan_update_response import PlanUpdateResponse
│ │  from cardpay.model.recurring_callback import RecurringCallback
│ │  from cardpay.model.recurring_creation_request import RecurringCreationRequest
│ │ @@ -143,14 +160,15 @@
│ │      RecurringGatewayResponseRecurringData,
│ │  )
│ │  from cardpay.model.recurring_patch_request import RecurringPatchRequest
│ │  from cardpay.model.recurring_plan_request import RecurringPlanRequest
│ │  from cardpay.model.recurring_plan_request_plan_data import RecurringPlanRequestPlanData
│ │  from cardpay.model.recurring_plan_response import RecurringPlanResponse
│ │  from cardpay.model.recurring_request_filing import RecurringRequestFiling
│ │ +from cardpay.model.recurring_request_merchant_order import RecurringRequestMerchantOrder
│ │  from cardpay.model.recurring_request_recurring_data import RecurringRequestRecurringData
│ │  from cardpay.model.recurring_response import RecurringResponse
│ │  from cardpay.model.recurring_response_filing import RecurringResponseFiling
│ │  from cardpay.model.recurring_response_merchant_order import (
│ │      RecurringResponseMerchantOrder,
│ │  )
│ │  from cardpay.model.recurring_response_recurring_data import (
│ │ @@ -173,40 +191,37 @@
│ │  from cardpay.model.refund_response_e_wallet_account import RefundResponseEWalletAccount
│ │  from cardpay.model.refund_response_payment_data import RefundResponsePaymentData
│ │  from cardpay.model.refund_response_refund_data import RefundResponseRefundData
│ │  from cardpay.model.refund_update_request import RefundUpdateRequest
│ │  from cardpay.model.refund_update_response import RefundUpdateResponse
│ │  from cardpay.model.refunds_list import RefundsList
│ │  from cardpay.model.renamed_plan_data import RenamedPlanData
│ │ -from cardpay.model.report import Report
│ │ -from cardpay.model.reports_data import ReportsData
│ │ -from cardpay.model.reports_request import ReportsRequest
│ │ -from cardpay.model.reports_response import ReportsResponse
│ │  from cardpay.model.request import Request
│ │  from cardpay.model.request_updated_transaction_data import RequestUpdatedTransactionData
│ │  from cardpay.model.response_plan_data import ResponsePlanData
│ │  from cardpay.model.response_updated_transaction_data import (
│ │      ResponseUpdatedTransactionData,
│ │  )
│ │  from cardpay.model.return_urls import ReturnUrls
│ │ +from cardpay.model.schedule_option import ScheduleOption
│ │ +from cardpay.model.schedule_options_response import ScheduleOptionsResponse
│ │  from cardpay.model.scheduled_by_merchant_data import ScheduledByMerchantData
│ │  from cardpay.model.scheduled_data import ScheduledData
│ │  from cardpay.model.shipping_address import ShippingAddress
│ │  from cardpay.model.subscription import Subscription
│ │  from cardpay.model.subscription_customer import SubscriptionCustomer
│ │  from cardpay.model.subscription_filter_parameters import SubscriptionFilterParameters
│ │  from cardpay.model.subscription_get_response import SubscriptionGetResponse
│ │  from cardpay.model.subscription_get_response_plan import SubscriptionGetResponsePlan
│ │  from cardpay.model.subscription_list import SubscriptionList
│ │  from cardpay.model.subscription_update_request import SubscriptionUpdateRequest
│ │  from cardpay.model.subscription_update_request_subscription_data import (
│ │      SubscriptionUpdateRequestSubscriptionData,
│ │  )
│ │  from cardpay.model.subscription_update_response import SubscriptionUpdateResponse
│ │ -from cardpay.model.supported_payment_method import SupportedPaymentMethod
│ │  from cardpay.model.three_d_secure_data import ThreeDSecureData
│ │  from cardpay.model.three_d_secure_response import ThreeDSecureResponse
│ │  from cardpay.model.transaction_methods_list import TransactionMethodsList
│ │  from cardpay.model.transaction_request import TransactionRequest
│ │  from cardpay.model.transaction_response_e_wallet_account import (
│ │      TransactionResponseEWalletAccount,
│ │  )
│ │ @@ -225,23 +240,21 @@
│ │  from cardpay.model.recurring_confirm3ds_request import RecurringConfirm3dsRequest
│ │  from cardpay.model.recurring_execute_request import RecurringExecuteRequest
│ │  from cardpay.model.recurring_update_request import RecurringUpdateRequest
│ │  
│ │  
│ │  # import apis into api package
│ │  from cardpay.api.auth_api import AuthApi
│ │ -from cardpay.api.card_info_api import CardInfoApi
│ │ -from cardpay.api.invoices_api import InvoicesApi
│ │  from cardpay.api.limits_api import LimitsApi
│ │ +from cardpay.api.mobile_api import MobileApi
│ │  from cardpay.api.payments_api import PaymentsApi
│ │  from cardpay.api.payouts_api import PayoutsApi
│ │ -from cardpay.api.pix_account_details_api import PixAccountDetailsApi
│ │  from cardpay.api.recurrings_api import RecurringsApi
│ │ +from cardpay.api.recurrings_installments_api import RecurringsInstallmentsApi
│ │  from cardpay.api.refunds_api import RefundsApi
│ │ -from cardpay.api.reports_api_controller_api import ReportsApiControllerApi
│ │  
│ │  
│ │  def formatExpirationDate(date):
│ │      return date.strftime("%m/%Y")
│ │  
│ │  
│ │  def formatBirthDate(date):
│ │   --- cardpay-3.45.8/cardpay/api_client.py
│ ├── +++ cardpay-3.6.21/cardpay/api_client.py
│ │┄ Files 0% similar despite different names
│ │ @@ -174,15 +174,15 @@
│ │          self._pool = None
│ │          self.rest_client = ProxyRestClient.create(configuration)
│ │          self.default_headers = {}
│ │          self.tokens = None
│ │          self.cookie = None
│ │  
│ │          # Set default User-Agent.
│ │ -        self.user_agent = "CardpaySdk/3.45.8/Python"
│ │ +        self.user_agent = "CardpaySdk/3.6.21/Python"
│ │  
│ │      def __del__(self):
│ │          if self._pool is not None:
│ │              self._pool.close()
│ │              self._pool.join()
│ │  
│ │      def calc_signature(self, message):
│ │   --- cardpay-3.45.8/cardpay/configuration.py
│ ├── +++ cardpay-3.6.21/cardpay/configuration.py
│ │┄ Files 1% similar despite different names
│ │ @@ -209,11 +209,11 @@
│ │          :return: The report for debugging.
│ │          """
│ │          return (
│ │              "Python SDK Debug Report:\n"
│ │              "OS: {env}\n"
│ │              "Python Version: {pyversion}\n"
│ │              "Version of the API: 3.0\n"
│ │ -            "SDK Package Version: 3.45.8".format(
│ │ +            "SDK Package Version: 3.6.21".format(
│ │                  env=sys.platform, pyversion=sys.version
│ │              )
│ │          )
│ │   --- cardpay-3.45.8/cardpay/rest.py
│ ├── +++ cardpay-3.6.21/cardpay/rest.py
│ │┄ Files identical despite different names
│ │   --- cardpay-3.45.8/cardpay.egg-info/PKG-INFO
│ ├── +++ cardpay-3.6.21/cardpay.egg-info/PKG-INFO
│ │┄ Files 5% similar despite different names
│ │ @@ -1,10 +1,10 @@
│ │  Metadata-Version: 2.1
│ │  Name: cardpay
│ │ -Version: 3.45.8
│ │ +Version: 3.6.21
│ │  Summary: Unlimint APIv3 Python SDK
│ │  Home-page: https://github.com/cardpay/python-sdk-v3.git
│ │  Author-email: 
│ │  License: MIT
│ │  Project-URL: Source Code, https://github.com/cardpay/python-sdk-v3
│ │  Project-URL: Documentation, https://integration.unlimint.com/
│ │  Description: # Unlimint APIv3 Python SDK
│ │ @@ -27,15 +27,15 @@
│ │          
│ │          ```sh
│ │          pip install git+https://github.com/cardpay/python-sdk-v3.git --upgrade
│ │          ```
│ │          or
│ │          
│ │          ```sh
│ │ -        pip install 'cardpay>=3.45.8' --upgrade
│ │ +        pip install 'cardpay>=3.6.21' --upgrade
│ │          ```
│ │          
│ │          Then import the package:
│ │          ```python
│ │          from cardpay import *
│ │          ```
│ │   --- cardpay-3.45.8/cardpay.egg-info/SOURCES.txt
│ ├── +++ cardpay-3.6.21/cardpay.egg-info/SOURCES.txt
│ │┄ Files 8% similar despite different names
│ │ @@ -9,67 +9,76 @@
│ │  cardpay.egg-info/PKG-INFO
│ │  cardpay.egg-info/SOURCES.txt
│ │  cardpay.egg-info/dependency_links.txt
│ │  cardpay.egg-info/requires.txt
│ │  cardpay.egg-info/top_level.txt
│ │  cardpay/api/__init__.py
│ │  cardpay/api/auth_api.py
│ │ -cardpay/api/card_info_api.py
│ │ -cardpay/api/invoices_api.py
│ │  cardpay/api/limits_api.py
│ │ +cardpay/api/mobile_api.py
│ │  cardpay/api/payments_api.py
│ │  cardpay/api/payouts_api.py
│ │ -cardpay/api/pix_account_details_api.py
│ │  cardpay/api/recurrings_api.py
│ │ +cardpay/api/recurrings_installments_api.py
│ │  cardpay/api/refunds_api.py
│ │ -cardpay/api/reports_api_controller_api.py
│ │  cardpay/model/__init__.py
│ │  cardpay/model/api_error.py
│ │  cardpay/model/api_tokens.py
│ │  cardpay/model/authentication_customer.py
│ │  cardpay/model/authentication_data.py
│ │  cardpay/model/authentication_data_response.py
│ │  cardpay/model/authentication_error.py
│ │  cardpay/model/bad_request_error.py
│ │  cardpay/model/bank_card_payout_data.py
│ │  cardpay/model/billing_address.py
│ │ -cardpay/model/card_info_request.py
│ │ -cardpay/model/card_info_response.py
│ │ +cardpay/model/card_binding_card.py
│ │ +cardpay/model/card_binding_card_account.py
│ │ +cardpay/model/card_binding_data.py
│ │ +cardpay/model/card_binding_merchant_order.py
│ │ +cardpay/model/card_binding_recurring_data_response.py
│ │ +cardpay/model/card_binding_request.py
│ │ +cardpay/model/card_binding_response.py
│ │  cardpay/model/change_subscription_status_claim_response.py
│ │  cardpay/model/changed_plan_data.py
│ │  cardpay/model/claim_response_subscription_data.py
│ │  cardpay/model/confirm3ds_request.py
│ │  cardpay/model/dispute_list.py
│ │  cardpay/model/dispute_response.py
│ │  cardpay/model/dispute_response_card.py
│ │  cardpay/model/dispute_response_card_account.py
│ │  cardpay/model/dispute_response_customer.py
│ │  cardpay/model/dispute_response_dispute_data.py
│ │  cardpay/model/dispute_response_merchant_order.py
│ │  cardpay/model/dispute_response_payment_data.py
│ │ -cardpay/model/ewallet_account.py
│ │  cardpay/model/filing_recurring_data.py
│ │  cardpay/model/filing_request.py
│ │  cardpay/model/filing_request_merchant_order.py
│ │  cardpay/model/filing_request_subscription_data.py
│ │  cardpay/model/filter_parameters.py
│ │  cardpay/model/flight.py
│ │  cardpay/model/flights.py
│ │  cardpay/model/installment_data.py
│ │ -cardpay/model/invoice_creation_data_response.py
│ │ -cardpay/model/invoice_creation_response.py
│ │ -cardpay/model/invoice_customer.py
│ │ -cardpay/model/invoice_data.py
│ │ -cardpay/model/invoice_get_data_response.py
│ │ -cardpay/model/invoice_get_response.py
│ │ -cardpay/model/invoice_item.py
│ │ -cardpay/model/invoice_merchant_order.py
│ │ -cardpay/model/invoice_request.py
│ │ +cardpay/model/installment_subscription_request.py
│ │  cardpay/model/item.py
│ │  cardpay/model/limit_info_response.py
│ │ +cardpay/model/mobile_card_account_response.py
│ │ +cardpay/model/mobile_customer_response.py
│ │ +cardpay/model/mobile_merchant_order_response.py
│ │ +cardpay/model/mobile_payment_data.py
│ │ +cardpay/model/mobile_payment_data_response.py
│ │ +cardpay/model/mobile_payment_full_response.py
│ │ +cardpay/model/mobile_payment_merchant_order.py
│ │ +cardpay/model/mobile_payment_method_data_response.py
│ │ +cardpay/model/mobile_payment_method_list_response.py
│ │ +cardpay/model/mobile_payment_request.py
│ │ +cardpay/model/mobile_payment_response.py
│ │ +cardpay/model/mobile_token_request.py
│ │ +cardpay/model/mobile_token_response.py
│ │ +cardpay/model/mobile_verification_request.py
│ │ +cardpay/model/mobile_verification_response.py
│ │  cardpay/model/next_subscription_payment.py
│ │  cardpay/model/not_found_error.py
│ │  cardpay/model/o_auth_error.py
│ │  cardpay/model/oneclick_data.py
│ │  cardpay/model/payment_callback.py
│ │  cardpay/model/payment_confirm3ds_request.py
│ │  cardpay/model/payment_execute_request.py
│ │ @@ -113,16 +122,14 @@
│ │  cardpay/model/payout_response_cryptocurrency_account.py
│ │  cardpay/model/payout_response_customer.py
│ │  cardpay/model/payout_response_e_wallet_account.py
│ │  cardpay/model/payout_response_payout_data.py
│ │  cardpay/model/payout_update_request.py
│ │  cardpay/model/payout_update_response.py
│ │  cardpay/model/payouts_list.py
│ │ -cardpay/model/pix_account_details_request.py
│ │ -cardpay/model/pix_account_details_response.py
│ │  cardpay/model/plan.py
│ │  cardpay/model/plan_data_list.py
│ │  cardpay/model/plan_update_request.py
│ │  cardpay/model/plan_update_request_plan_data.py
│ │  cardpay/model/plan_update_response.py
│ │  cardpay/model/recurring_callback.py
│ │  cardpay/model/recurring_confirm3ds_request.py
│ │ @@ -133,14 +140,15 @@
│ │  cardpay/model/recurring_gateway_creation_response.py
│ │  cardpay/model/recurring_gateway_response_recurring_data.py
│ │  cardpay/model/recurring_patch_request.py
│ │  cardpay/model/recurring_plan_request.py
│ │  cardpay/model/recurring_plan_request_plan_data.py
│ │  cardpay/model/recurring_plan_response.py
│ │  cardpay/model/recurring_request_filing.py
│ │ +cardpay/model/recurring_request_merchant_order.py
│ │  cardpay/model/recurring_request_recurring_data.py
│ │  cardpay/model/recurring_response.py
│ │  cardpay/model/recurring_response_filing.py
│ │  cardpay/model/recurring_response_merchant_order.py
│ │  cardpay/model/recurring_response_recurring_data.py
│ │  cardpay/model/recurring_update_request.py
│ │  cardpay/model/recurring_update_response.py
│ │ @@ -160,36 +168,33 @@
│ │  cardpay/model/refund_response_e_wallet_account.py
│ │  cardpay/model/refund_response_payment_data.py
│ │  cardpay/model/refund_response_refund_data.py
│ │  cardpay/model/refund_update_request.py
│ │  cardpay/model/refund_update_response.py
│ │  cardpay/model/refunds_list.py
│ │  cardpay/model/renamed_plan_data.py
│ │ -cardpay/model/report.py
│ │ -cardpay/model/reports_data.py
│ │ -cardpay/model/reports_request.py
│ │ -cardpay/model/reports_response.py
│ │  cardpay/model/request.py
│ │  cardpay/model/request_updated_transaction_data.py
│ │  cardpay/model/response_plan_data.py
│ │  cardpay/model/response_updated_transaction_data.py
│ │  cardpay/model/return_urls.py
│ │ +cardpay/model/schedule_option.py
│ │ +cardpay/model/schedule_options_response.py
│ │  cardpay/model/scheduled_by_merchant_data.py
│ │  cardpay/model/scheduled_data.py
│ │  cardpay/model/shipping_address.py
│ │  cardpay/model/subscription.py
│ │  cardpay/model/subscription_customer.py
│ │  cardpay/model/subscription_filter_parameters.py
│ │  cardpay/model/subscription_get_response.py
│ │  cardpay/model/subscription_get_response_plan.py
│ │  cardpay/model/subscription_list.py
│ │  cardpay/model/subscription_update_request.py
│ │  cardpay/model/subscription_update_request_subscription_data.py
│ │  cardpay/model/subscription_update_response.py
│ │ -cardpay/model/supported_payment_method.py
│ │  cardpay/model/three_d_secure_data.py
│ │  cardpay/model/three_d_secure_response.py
│ │  cardpay/model/transaction_methods_list.py
│ │  cardpay/model/transaction_request.py
│ │  cardpay/model/transaction_response_e_wallet_account.py
│ │  cardpay/model/transaction_response_merchant_order.py
│ │  cardpay/model/transaction_update_request.py
│ │   --- cardpay-3.45.8/LICENSE
│ ├── +++ cardpay-3.6.21/LICENSE
│ │┄ Files 2% similar despite different names
│ │ @@ -1,10 +1,10 @@
│ │  MIT License
│ │  
│ │ -Copyright (c) 2021 - Unlimint (https://unlimint.com)
│ │ +Copyright (c) 2019- Unlimint PSP Ltd (https://unlimint.com)
│ │  
│ │  Permission is hereby granted, free of charge, to any person obtaining a copy
│ │  of this software and associated documentation files (the "Software"), to deal
│ │  in the Software without restriction, including without limitation the rights
│ │  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
│ │  copies of the Software, and to permit persons to whom the Software is
│ │  furnished to do so, subject to the following conditions:
│ │   --- cardpay-3.45.8/README.md
│ ├── +++ cardpay-3.6.21/README.md
│ │┄ Files 22% similar despite different names
│ │ @@ -18,15 +18,15 @@
│ │  
│ │  ```sh
│ │  pip install git+https://github.com/cardpay/python-sdk-v3.git --upgrade
│ │  ```
│ │  or
│ │  
│ │  ```sh
│ │ -pip install 'cardpay>=3.45.8' --upgrade
│ │ +pip install 'cardpay>=3.6.21' --upgrade
│ │  ```
│ │  
│ │  Then import the package:
│ │  ```python
│ │  from cardpay import *
│ │  ```
│ │   --- cardpay-3.45.8/setup.py
│ ├── +++ cardpay-3.6.21/setup.py
│ │┄ Files 2% similar despite different names
│ │ @@ -8,15 +8,15 @@
│ │  os.chdir(here)
│ │  
│ │  with open(os.path.join(here, "README.md"), "r", encoding="utf-8") as fp:
│ │      long_description = fp.read()
│ │  
│ │  setup(
│ │      name="cardpay",
│ │ -    version="3.45.8",
│ │ +    version="3.6.21",
│ │      description="Unlimint APIv3 Python SDK",
│ │      author_email="",
│ │      url="https://github.com/cardpay/python-sdk-v3.git",
│ │      license="MIT",
│ │      keywords=["cardpay", "APIv3", "CardPay REST API"],
│ │      install_requires=[
│ │          "certifi>=2019.11.28",
│ │   --- cardpay-3.45.8/PKG-INFO
│ ├── +++ cardpay-3.6.21/PKG-INFO
│ │┄ Files 5% similar despite different names
│ │ @@ -1,10 +1,10 @@
│ │  Metadata-Version: 2.1
│ │  Name: cardpay
│ │ -Version: 3.45.8
│ │ +Version: 3.6.21
│ │  Summary: Unlimint APIv3 Python SDK
│ │  Home-page: https://github.com/cardpay/python-sdk-v3.git
│ │  Author-email: 
│ │  License: MIT
│ │  Project-URL: Source Code, https://github.com/cardpay/python-sdk-v3
│ │  Project-URL: Documentation, https://integration.unlimint.com/
│ │  Description: # Unlimint APIv3 Python SDK
│ │ @@ -27,15 +27,15 @@
│ │          
│ │          ```sh
│ │          pip install git+https://github.com/cardpay/python-sdk-v3.git --upgrade
│ │          ```
│ │          or
│ │          
│ │          ```sh
│ │ -        pip install 'cardpay>=3.45.8' --upgrade
│ │ +        pip install 'cardpay>=3.6.21' --upgrade
│ │          ```
│ │          
│ │          Then import the package:
│ │          ```python
│ │          from cardpay import *
│ │          ```
