--- tmp/pyxk-0.4.5.tar.gz
+++ tmp/pyxk-0.4.6.tar.gz
├── filetype from file(1)
│ @@ -1 +1 @@
│ -gzip compressed data, was "pyxk-0.4.5.tar", last modified: Fri Mar 31 15:34:02 2023, max compression
│ +gzip compressed data, was "pyxk-0.4.6.tar", last modified: Thu Apr  6 16:04:35 2023, max compression
│   --- pyxk-0.4.5.tar
├── +++ pyxk-0.4.6.tar
│ ├── file list
│ │ @@ -1,36 +1,32 @@
│ │ -drwxrwx---   0 root         (0) everybody  (9997)        0 2023-03-31 15:34:02.187999 pyxk-0.4.5/
│ │ --rw-rw----   0 root         (0) everybody  (9997)     1079 2022-09-01 11:31:05.000000 pyxk-0.4.5/LICENSE
│ │ --rw-rw----   0 root         (0) everybody  (9997)      341 2023-03-31 15:34:02.187999 pyxk-0.4.5/PKG-INFO
│ │ --rw-rw----   0 root         (0) everybody  (9997)        4 2023-03-31 15:33:16.000000 pyxk-0.4.5/README.md
│ │ -drwxrwx---   0 root         (0) everybody  (9997)        0 2023-03-31 15:34:02.157999 pyxk-0.4.5/pyxk/
│ │ --rw-rw----   0 root         (0) everybody  (9997)       55 2023-03-15 05:38:00.000000 pyxk-0.4.5/pyxk/__init__.py
│ │ -drwxrwx---   0 root         (0) everybody  (9997)        0 2023-03-31 15:34:02.167999 pyxk-0.4.5/pyxk/aes/
│ │ --rw-rw----   0 root         (0) everybody  (9997)       79 2023-02-24 04:10:40.000000 pyxk-0.4.5/pyxk/aes/__init__.py
│ │ --rw-rw----   0 root         (0) everybody  (9997)     3619 2023-03-12 05:52:47.000000 pyxk-0.4.5/pyxk/aes/_fmtdata.py
│ │ --rw-rw----   0 root         (0) everybody  (9997)     4797 2023-02-24 04:19:16.000000 pyxk-0.4.5/pyxk/aes/cryptor.py
│ │ -drwxrwx---   0 root         (0) everybody  (9997)        0 2023-03-31 15:34:02.177999 pyxk-0.4.5/pyxk/httpx/
│ │ --rw-rw----   0 root         (0) everybody  (9997)      134 2023-03-15 04:31:19.000000 pyxk-0.4.5/pyxk/httpx/__init__.py
│ │ --rw-rw----   0 root         (0) everybody  (9997)     4920 2023-03-15 05:20:33.000000 pyxk-0.4.5/pyxk/httpx/_api.py
│ │ --rw-rw----   0 root         (0) everybody  (9997)     5387 2023-03-15 04:27:02.000000 pyxk-0.4.5/pyxk/httpx/_client.py
│ │ --rw-rw----   0 root         (0) everybody  (9997)      954 2023-03-15 06:04:12.000000 pyxk-0.4.5/pyxk/lazy_loader.py
│ │ -drwxrwx---   0 root         (0) everybody  (9997)        0 2023-03-31 15:34:02.177999 pyxk-0.4.5/pyxk/m3u8/
│ │ --rw-rw----   0 root         (0) everybody  (9997)       82 2023-03-16 14:08:36.000000 pyxk-0.4.5/pyxk/m3u8/__init__.py
│ │ --rw-rw----   0 root         (0) everybody  (9997)     8292 2023-03-16 12:13:38.000000 pyxk-0.4.5/pyxk/m3u8/_download.py
│ │ --rw-rw----   0 root         (0) everybody  (9997)     3199 2023-03-16 16:35:49.000000 pyxk-0.4.5/pyxk/m3u8/_entry_point.py
│ │ --rw-rw----   0 root         (0) everybody  (9997)     7791 2023-03-16 16:35:32.000000 pyxk-0.4.5/pyxk/m3u8/_m3u8.py
│ │ --rw-rw----   0 root         (0) everybody  (9997)     4504 2023-03-17 04:00:18.000000 pyxk-0.4.5/pyxk/m3u8/_parser.py
│ │ -drwxrwx---   0 root         (0) everybody  (9997)        0 2023-03-31 15:34:02.187999 pyxk-0.4.5/pyxk/requests/
│ │ --rw-rw----   0 root         (0) everybody  (9997)      133 2023-02-23 17:36:51.000000 pyxk-0.4.5/pyxk/requests/__init__.py
│ │ --rw-rw----   0 root         (0) everybody  (9997)     5616 2023-03-31 15:30:39.000000 pyxk-0.4.5/pyxk/requests/_entry_point.py
│ │ --rw-rw----   0 root         (0) everybody  (9997)     7514 2023-03-31 10:17:41.000000 pyxk-0.4.5/pyxk/requests/api.py
│ │ --rw-rw----   0 root         (0) everybody  (9997)    21860 2023-03-31 10:27:38.000000 pyxk-0.4.5/pyxk/requests/sessions.py
│ │ --rw-rw----   0 root         (0) everybody  (9997)    11583 2023-03-31 10:26:24.000000 pyxk-0.4.5/pyxk/utils.py
│ │ -drwxrwx---   0 root         (0) everybody  (9997)        0 2023-03-31 15:34:02.167999 pyxk-0.4.5/pyxk.egg-info/
│ │ --rw-rw----   0 root         (0) everybody  (9997)      341 2023-03-31 15:34:02.000000 pyxk-0.4.5/pyxk.egg-info/PKG-INFO
│ │ --rw-rw----   0 root         (0) everybody  (9997)      587 2023-03-31 15:34:02.000000 pyxk-0.4.5/pyxk.egg-info/SOURCES.txt
│ │ --rw-rw----   0 root         (0) everybody  (9997)        1 2023-03-31 15:34:02.000000 pyxk-0.4.5/pyxk.egg-info/dependency_links.txt
│ │ --rw-rw----   0 root         (0) everybody  (9997)       96 2023-03-31 15:34:02.000000 pyxk-0.4.5/pyxk.egg-info/entry_points.txt
│ │ --rw-rw----   0 root         (0) everybody  (9997)       61 2023-03-31 15:34:02.000000 pyxk-0.4.5/pyxk.egg-info/requires.txt
│ │ --rw-rw----   0 root         (0) everybody  (9997)        5 2023-03-31 15:34:02.000000 pyxk-0.4.5/pyxk.egg-info/top_level.txt
│ │ --rw-rw----   0 root         (0) everybody  (9997)       38 2023-03-31 15:34:02.187999 pyxk-0.4.5/setup.cfg
│ │ --rw-rw----   0 root         (0) everybody  (9997)      935 2023-03-31 15:33:24.000000 pyxk-0.4.5/setup.py
│ │ +drwxrwx---   0 root         (0) everybody  (9997)        0 2023-04-06 16:04:35.103993 pyxk-0.4.6/
│ │ +-rw-rw----   0 root         (0) everybody  (9997)     1079 2022-09-01 11:31:05.000000 pyxk-0.4.6/LICENSE
│ │ +-rw-rw----   0 root         (0) everybody  (9997)      343 2023-04-06 16:04:35.103993 pyxk-0.4.6/PKG-INFO
│ │ +-rw-rw----   0 root         (0) everybody  (9997)        4 2023-03-31 15:33:16.000000 pyxk-0.4.6/README.md
│ │ +drwxrwx---   0 root         (0) everybody  (9997)        0 2023-04-06 16:04:35.103993 pyxk-0.4.6/pyxk/
│ │ +-rw-rw----   0 root         (0) everybody  (9997)      568 2023-04-06 16:01:42.000000 pyxk-0.4.6/pyxk/__init__.py
│ │ +drwxrwx---   0 root         (0) everybody  (9997)        0 2023-04-06 16:04:35.103993 pyxk-0.4.6/pyxk/aes/
│ │ +-rw-rw----   0 root         (0) everybody  (9997)       79 2023-02-24 04:10:40.000000 pyxk-0.4.6/pyxk/aes/__init__.py
│ │ +-rw-rw----   0 root         (0) everybody  (9997)     3639 2023-04-06 15:25:24.000000 pyxk-0.4.6/pyxk/aes/_fmtdata.py
│ │ +-rw-rw----   0 root         (0) everybody  (9997)     4701 2023-04-06 15:27:39.000000 pyxk-0.4.6/pyxk/aes/cryptor.py
│ │ +-rw-rw----   0 root         (0) everybody  (9997)      954 2023-03-15 06:04:12.000000 pyxk-0.4.6/pyxk/lazy_loader.py
│ │ +drwxrwx---   0 root         (0) everybody  (9997)        0 2023-04-06 16:04:35.103993 pyxk-0.4.6/pyxk/m3u8/
│ │ +-rw-rw----   0 root         (0) everybody  (9997)       82 2023-03-16 14:08:36.000000 pyxk-0.4.6/pyxk/m3u8/__init__.py
│ │ +-rw-rw----   0 root         (0) everybody  (9997)     8292 2023-03-16 12:13:38.000000 pyxk-0.4.6/pyxk/m3u8/_download.py
│ │ +-rw-rw----   0 root         (0) everybody  (9997)     3199 2023-03-16 16:35:49.000000 pyxk-0.4.6/pyxk/m3u8/_entry_point.py
│ │ +-rw-rw----   0 root         (0) everybody  (9997)     7791 2023-03-16 16:35:32.000000 pyxk-0.4.6/pyxk/m3u8/_m3u8.py
│ │ +-rw-rw----   0 root         (0) everybody  (9997)     4504 2023-03-17 04:00:18.000000 pyxk-0.4.6/pyxk/m3u8/_parser.py
│ │ +drwxrwx---   0 root         (0) everybody  (9997)        0 2023-04-06 16:04:35.103993 pyxk-0.4.6/pyxk/requests/
│ │ +-rw-rw----   0 root         (0) everybody  (9997)      235 2023-04-06 15:53:39.000000 pyxk-0.4.6/pyxk/requests/__init__.py
│ │ +-rw-rw----   0 root         (0) everybody  (9997)     5648 2023-04-06 15:32:32.000000 pyxk-0.4.6/pyxk/requests/_entry_point.py
│ │ +-rw-rw----   0 root         (0) everybody  (9997)     7514 2023-03-31 10:17:41.000000 pyxk-0.4.6/pyxk/requests/api.py
│ │ +-rw-rw----   0 root         (0) everybody  (9997)    21859 2023-04-06 15:20:21.000000 pyxk-0.4.6/pyxk/requests/sessions.py
│ │ +-rw-rw----   0 root         (0) everybody  (9997)    12202 2023-04-06 16:00:37.000000 pyxk-0.4.6/pyxk/utils.py
│ │ +drwxrwx---   0 root         (0) everybody  (9997)        0 2023-04-06 16:04:35.103993 pyxk-0.4.6/pyxk.egg-info/
│ │ +-rw-rw----   0 root         (0) everybody  (9997)      343 2023-04-06 16:04:34.000000 pyxk-0.4.6/pyxk.egg-info/PKG-INFO
│ │ +-rw-rw----   0 root         (0) everybody  (9997)      523 2023-04-06 16:04:35.000000 pyxk-0.4.6/pyxk.egg-info/SOURCES.txt
│ │ +-rw-rw----   0 root         (0) everybody  (9997)        1 2023-04-06 16:04:34.000000 pyxk-0.4.6/pyxk.egg-info/dependency_links.txt
│ │ +-rw-rw----   0 root         (0) everybody  (9997)       91 2023-04-06 16:04:34.000000 pyxk-0.4.6/pyxk.egg-info/entry_points.txt
│ │ +-rw-rw----   0 root         (0) everybody  (9997)       55 2023-04-06 16:04:34.000000 pyxk-0.4.6/pyxk.egg-info/requires.txt
│ │ +-rw-rw----   0 root         (0) everybody  (9997)        5 2023-04-06 16:04:34.000000 pyxk-0.4.6/pyxk.egg-info/top_level.txt
│ │ +-rw-rw----   0 root         (0) everybody  (9997)       38 2023-04-06 16:04:35.103993 pyxk-0.4.6/setup.cfg
│ │ +-rw-rw----   0 root         (0) everybody  (9997)      916 2023-04-06 16:03:44.000000 pyxk-0.4.6/setup.py
│ │   --- pyxk-0.4.5/LICENSE
│ ├── +++ pyxk-0.4.6/LICENSE
│ │┄ Files identical despite different names
│ │   --- pyxk-0.4.5/pyxk/aes/_fmtdata.py
│ ├── +++ pyxk-0.4.6/pyxk/aes/_fmtdata.py
│ │┄ Files 6% similar despite different names
│ │ @@ -5,18 +5,25 @@
│ │  
│ │  AES = LazyLoader("AES", globals(), "Crypto.Cipher.AES")
│ │  
│ │  
│ │  
│ │  # 目前支持的模式
│ │  MODES = {
│ │ -    "ECB": 1,  "CBC": 2, "CFB": 3,
│ │ -    "OFB": 5,  "CTR": 6, "OPENPGP": 7,
│ │ -    "EAX": 9,  "CCM": 8, "SIV": 10,
│ │ -    "GCM": 11, "OCB": 12
│ │ +    "ECB": 1,
│ │ +    "CBC": 2,
│ │ +    "CFB": 3,
│ │ +    "OFB": 5,
│ │ +    "CTR": 6,
│ │ +    "OPENPGP": 7,
│ │ +    "EAX": 9,
│ │ +    "CCM": 8,
│ │ +    "SIV": 10,
│ │ +    "GCM": 11,
│ │ +    "OCB": 12
│ │  }
│ │  
│ │  
│ │  
│ │  class FormatData:
│ │      """
│ │      AES数据初始化
│ │ @@ -27,24 +34,22 @@
│ │          self._key  = key
│ │          self._mode = mode
│ │          self._iv   = iv
│ │          self._encode = encode
│ │          self._state = kwargs
│ │          self.__initialization()
│ │  
│ │ -
│ │      def __initialization(self):
│ │          """
│ │          初始化 key mode iv
│ │          """
│ │          self.__key_to_bytes()
│ │          self.__mode_fmt()
│ │          self.__iv_to_bytes()
│ │  
│ │ -
│ │      def __key_to_bytes(self):
│ │          """
│ │          key 转换为 bytes
│ │          """
│ │          key = self.key
│ │          if isinstance(key, str):
│ │              key = key.encode(self._encode)
│ │ @@ -58,15 +63,14 @@
│ │          key_lenght = len(key)
│ │          if key_lenght not in AES.key_size:
│ │              raise ValueError(
│ │                  f"\033[31m'key' lenght must be {AES.key_size},"
│ │                  f" not '{key_lenght}'\033[0m")
│ │          setattr(self, "_key", key)
│ │  
│ │ -
│ │      def __mode_fmt(self):
│ │          """
│ │          mode 判断
│ │          """
│ │          mode = self.mode
│ │          if (
│ │              isinstance(mode, str)
│ │ @@ -81,15 +85,14 @@
│ │              mode_val = list(MODES.keys())
│ │              mode_val.extend(list(MODES.values()))
│ │              raise TypeError(
│ │                  f"\033[31mmode must exist in the {mode_val},"
│ │                  f" not '{mode}'\033[0m")
│ │          setattr(self, "_mode", mode)
│ │  
│ │ -
│ │      def __iv_to_bytes(self):
│ │          """
│ │          iv 转换为 bytes
│ │          """
│ │          iv = self.iv
│ │          if iv is None:
│ │              if self._mode != MODES["CBC"]:
│ │ @@ -108,15 +111,14 @@
│ │          iv_lenght = len(iv)
│ │          if iv_lenght != AES.block_size:
│ │              raise ValueError(
│ │                  f"\033[31m'iv' lenght must be equal to '{AES.block_size}'"
│ │                  f", not '{iv_lenght}'\033[0m")
│ │          setattr(self, "_iv", iv)
│ │  
│ │ -
│ │      @property
│ │      def key(self):
│ │          if not hasattr(self, "_key"):
│ │              raise ValueError("\033[31m缺少'key'\033[0m")
│ │          return getattr(self, "_key")
│ │  
│ │      @key.setter
│ │   --- pyxk-0.4.5/pyxk/aes/cryptor.py
│ ├── +++ pyxk-0.4.6/pyxk/aes/cryptor.py
│ │┄ Files 14% similar despite different names
│ │ @@ -17,140 +17,117 @@
│ │      # 消除 padding 字符
│ │      if remove:
│ │          return data.rstrip(pad)
│ │      remainder = len(data) % AES.block_size or AES.block_size
│ │      data += pad * (AES.block_size - remainder)
│ │      return data
│ │  
│ │ -
│ │  def zero_padding(data, remove=False, pad=b"\x00"):
│ │      """
│ │      ZeroPadding填充模式
│ │      """
│ │      # 消除 padding 字符
│ │      if remove:
│ │          return data.rstrip(pad)
│ │      remainder = len(data) % AES.block_size
│ │      # 不填充
│ │      data += pad * (AES.block_size - remainder)
│ │      return data
│ │  
│ │ -
│ │  PADDING_ALL = {
│ │      "Raw": lambda data, *args, **kwagrs: data,
│ │      "NoPadding": no_padding,
│ │      "ZeroPadding": zero_padding,
│ │  }
│ │  
│ │  
│ │ -
│ │  class Cryptor(fmtdata.FormatData):
│ │ -    """
│ │ -    AES加解密
│ │ -    """
│ │ -
│ │ +    """AES加解密"""
│ │      def __init__(
│ │          self, key, iv=None, mode="CBC", padding="NoPadding", **kwargs
│ │      ):
│ │          self._cipher = None
│ │          self._padding = padding
│ │          self.__padding_fmt()
│ │          super().__init__(key, iv, mode, **kwargs)
│ │  
│ │ -
│ │      def __padding_fmt(self):
│ │ -        """
│ │ -        加解密数据的填充方式
│ │ -        """
│ │ +        """加解密数据的填充方式"""
│ │          padding = getattr(self, "_padding", None)
│ │          if padding is None:
│ │              setattr(self, "_padding", "NoPadding")
│ │              return
│ │  
│ │          if (
│ │              not isinstance(padding, str)
│ │              or padding not in PADDING_ALL
│ │          ):
│ │              raise ValueError(
│ │                  f"\033[31m'padding' must exist in the {list(PADDING_ALL)},"
│ │                  f" not '{padding}'\033[0m")
│ │  
│ │ -
│ │      def encrypt(self, plaintext):
│ │ -        """
│ │ -        加密
│ │ -        """
│ │ +        """加密"""
│ │          if isinstance(plaintext, str):
│ │              plaintext = plaintext.encode(self._encode)
│ │  
│ │          elif not isinstance(plaintext, bytes):
│ │              raise TypeError(
│ │                  "\033[31m'plaintext' type must be 'str' or 'bytes',"
│ │                  f" not '{type(plaintext).__name__}'\033[0m")
│ │  
│ │          # 创建 cipher - 加密
│ │          self.__create_cipher()
│ │          padding_func = PADDING_ALL[self.padding]
│ │          return self._cipher.encrypt( padding_func(plaintext) )
│ │  
│ │ -
│ │      def decrypt(self, ciphertext):
│ │ -        """
│ │ -        解密
│ │ -        """
│ │ +        """解密"""
│ │          if isinstance(ciphertext, str):
│ │              ciphertext = ciphertext.encode(self._encode)
│ │  
│ │          elif not isinstance(ciphertext, bytes):
│ │              raise TypeError(
│ │                  "\033[31m'plaintext' type must be 'str' or 'bytes',"
│ │                  f" not '{type(ciphertext).__name__}'\033[0m")
│ │  
│ │          # 创建 cipher - 解密
│ │          self.__create_cipher()
│ │          padding_func = PADDING_ALL[self.padding]
│ │          return padding_func(self._cipher.decrypt(ciphertext), True)
│ │  
│ │ -
│ │      def __create_cipher(self):
│ │ -        """
│ │ -        创建 cipher
│ │ -        """
│ │ +        """创建 cipher"""
│ │          state = copy.deepcopy(self._state)
│ │          state["key"]  = self.key
│ │          state["mode"] = self.mode
│ │          if self.iv is not None:
│ │              state["iv"] = self._iv
│ │          setattr(self, "_cipher", AES.new(**state))
│ │  
│ │ -
│ │      @property
│ │      def padding(self):
│ │          if not hasattr(self, "_padding"):
│ │              setattr(self, "_padding", "NoPadding")
│ │          return getattr(self, "_padding")
│ │  
│ │ -
│ │      @padding.setter
│ │      def padding(self, value):
│ │          setattr(self, "_padding", value)
│ │          self.__padding_fmt()
│ │  
│ │ -
│ │      def __enter__(self):
│ │          return self
│ │  
│ │ -
│ │      def __exit__(self, exc_type, exc_val, exc_tb):
│ │          if exc_type:
│ │              raise
│ │          self._cipher = None
│ │  
│ │  
│ │ -
│ │  def encrypt(
│ │      key: typing.Union[str, bytes],
│ │      plaintext: typing.Union[str, bytes],
│ │      *,
│ │      mode: typing.Union[int, str]="CBC",
│ │      iv: typing.Union[str, bytes]=None,
│ │      **kwargs
│ │ @@ -162,15 +139,14 @@
│ │      :params: mode: 加密模式
│ │      :params: iv: 加密偏移量(部分加密模式不需要偏移量)
│ │      :params: **kwargs: 可选关键字参数
│ │      """
│ │      with Cryptor(key=key, mode=mode, iv=iv, **kwargs) as _cipher:
│ │          return _cipher.encrypt(plaintext)
│ │  
│ │ -
│ │  def decrypt(
│ │      key: typing.Union[str, bytes],
│ │      ciphertext: typing.Union[str, bytes],
│ │      *,
│ │      mode: typing.Union[int, str]="CBC",
│ │      iv: typing.Union[str, bytes]=None,
│ │      **kwargs
│ │   --- pyxk-0.4.5/pyxk/lazy_loader.py
│ ├── +++ pyxk-0.4.6/pyxk/lazy_loader.py
│ │┄ Files identical despite different names
│ │   --- pyxk-0.4.5/pyxk/m3u8/_download.py
│ ├── +++ pyxk-0.4.6/pyxk/m3u8/_download.py
│ │┄ Files identical despite different names
│ │   --- pyxk-0.4.5/pyxk/m3u8/_entry_point.py
│ ├── +++ pyxk-0.4.6/pyxk/m3u8/_entry_point.py
│ │┄ Files identical despite different names
│ │   --- pyxk-0.4.5/pyxk/m3u8/_m3u8.py
│ ├── +++ pyxk-0.4.6/pyxk/m3u8/_m3u8.py
│ │┄ Files identical despite different names
│ │   --- pyxk-0.4.5/pyxk/m3u8/_parser.py
│ ├── +++ pyxk-0.4.6/pyxk/m3u8/_parser.py
│ │┄ Files identical despite different names
│ │   --- pyxk-0.4.5/pyxk/requests/_entry_point.py
│ ├── +++ pyxk-0.4.6/pyxk/requests/_entry_point.py
│ │┄ Files 2% similar despite different names
│ │ @@ -21,15 +21,14 @@
│ │      if value == (None, None):
│ │          return None
│ │      username, password = value
│ │      if password == "-":  # pragma: no cover
│ │          password = click.prompt("Password", hide_input=True)
│ │      return (username, password)
│ │  
│ │ -
│ │  @click.command()
│ │  @click.argument("url", type=str)
│ │  @click.option(
│ │      "--method",
│ │      "-m",
│ │      "method",
│ │      type=str,
│ │ @@ -244,16 +243,17 @@
│ │              padding=1,
│ │              border_style="bright_blue"
│ │          )
│ │          console.print(renders)
│ │  
│ │      if not no_show_content and not output and threads==1:
│ │          response.encoding = response.apparent_encoding
│ │ -        for chunk in response.iter_content(chunk_size=1024):
│ │ +        console = rich_console.Console()
│ │ +        for chunk in response.iter_lines():
│ │              try:
│ │                  chunk = chunk.decode(response.encoding)
│ │              except (
│ │                  UnicodeDecodeError,
│ │                  AttributeError
│ │              ):
│ │ -                pass
│ │ -            print(chunk, end="")
│ │ +                raise
│ │ +            console.print(chunk, end="")
│ │   --- pyxk-0.4.5/pyxk/requests/api.py
│ ├── +++ pyxk-0.4.6/pyxk/requests/api.py
│ │┄ Files identical despite different names
│ │   --- pyxk-0.4.5/pyxk/requests/sessions.py
│ ├── +++ pyxk-0.4.6/pyxk/requests/sessions.py
│ │┄ Files 1% similar despite different names
│ │ @@ -1,8 +1,9 @@
│ │ -from requests import Session as requests_Session
│ │ +import requests.exceptions
│ │ +from requests import Session as _Session
│ │  from requests.structures import CaseInsensitiveDict
│ │  from pyxk.lazy_loader import LazyLoader
│ │  
│ │  os = LazyLoader("os", globals())
│ │  time = LazyLoader("time", globals())
│ │  warnings = LazyLoader("warnings", globals())
│ │  urllib_parse = LazyLoader("urllib_parse", globals(), "urllib.parse")
│ │ @@ -10,19 +11,18 @@
│ │  
│ │  rich_box = LazyLoader("rich_box", globals(), "rich.box")
│ │  rich_progress = LazyLoader("rich_progress", globals(), "rich.progress")
│ │  rich_live = LazyLoader("rich_live", globals(), "rich.live")
│ │  rich_panel = LazyLoader("rich_panel", globals(), "rich.panel")
│ │  rich_table = LazyLoader("rich_table", globals(), "rich.table")
│ │  rich_console = LazyLoader("rich_console", globals(), "rich.console")
│ │ -
│ │  utils = LazyLoader("utils", globals(), "pyxk.utils")
│ │  
│ │  
│ │ -class Session(requests_Session):
│ │ +class Session(_Session):
│ │  
│ │      default_timeout = 5
│ │  
│ │      def __init__(
│ │          self,
│ │          *,
│ │          base_url: str=None,
│ │ @@ -84,19 +84,15 @@
│ │          json=None,
│ │          transient=None
│ │      ):
│ │          url = self.build_absolute_url(url)
│ │          request_status, exc_count = None, 10
│ │          transient = self._transient if transient is None else bool(transient)
│ │          if not transient:
│ │ -            request_status = self._console.status(
│ │ -            f"[magenta b]send request([/][cyan]{method}[/][magenta b])[/]"
│ │ -            f": [dim u]{url}[/]",
│ │ -                spinner="arc"
│ │ -            )
│ │ +            request_status = self._console.status(f"Request <[magenta]{method}[/] [bright_blue u]{url}[/]>", spinner="arc")
│ │              request_status.start()
│ │          try:
│ │              while True:
│ │                  try:
│ │                      response = super().request(
│ │                          method=method,
│ │                          url=url,
│ │ @@ -117,27 +113,27 @@
│ │                      )
│ │                      break
│ │  
│ │                  except requests.exceptions.Timeout:
│ │                      exc_count -= 1
│ │                      if exc_count < 0:
│ │                          raise
│ │ -                    warnings.warn(f"Timeout: {timeout!r}")
│ │ +                    warnings.warn(f"Timeout: {timeout!r}", stacklevel=4)
│ │                      time.sleep(1)
│ │  
│ │                  except requests.exceptions.ConnectionError as exc:
│ │                      reason = str(exc.args[0])
│ │                      reason_re = ("[Errno 7]", )
│ │                      reason_ok = lambda : True in [item in reason for item in reason_re]
│ │                      if not reason_ok():
│ │                          raise
│ │                      exc_count -= 1
│ │                      if exc_count < 0:
│ │                          raise
│ │ -                    warnings.warn("Network connection failed")
│ │ +                    warnings.warn("Network connection failed", stacklevel=4)
│ │                      time.sleep(1)
│ │          finally:
│ │              if request_status:
│ │                  request_status.stop()
│ │          return response
│ │  
│ │      def get(
│ │ @@ -621,14 +617,15 @@
│ │                  write_file.write(chunk)
│ │                  download_progress.update(download_task, advance=1024)
│ │          return response
│ │  
│ │      def _init_wget_attr(self, url, output, resume, threads, **kwargs):
│ │          """初始化 wget 数据"""
│ │          kwargs["transient"] = True
│ │ +        kwargs["allow_redirects"] = True
│ │          response = self.head(url, **kwargs)
│ │          # 获取文件 content_length
│ │          output = self._complete_file_path(response=response, output=output)
│ │          content_length = response.headers.get("Content-Length")
│ │          if not content_length or content_length == "0":
│ │              threads, content_length = 1, 0
│ │   --- pyxk-0.4.5/pyxk/utils.py
│ ├── +++ pyxk-0.4.6/pyxk/utils.py
│ │┄ Files 8% similar despite different names
│ │ @@ -13,14 +13,32 @@
│ │  warnings = LazyLoader("warnings", globals())
│ │  multidict = LazyLoader("multidict", globals())
│ │  functools = LazyLoader("functools", globals())
│ │  itertools = LazyLoader("itertools", globals())
│ │  collections = LazyLoader("collections", globals())
│ │  
│ │  
│ │ +__all__ = [
│ │ +    "runtime",
│ │ +    "async_runtime",
│ │ +    "open_decorator",
│ │ +    "is_base64",
│ │ +    "tobytes_from_base64",
│ │ +    "get_user_agent",
│ │ +    "default_headers",
│ │ +    "md5",
│ │ +    "rename_file",
│ │ +    "rename_folder",
│ │ +    "human_playtime_pr",
│ │ +    "hash256",
│ │ +    "transfer_lazyloader",
│ │ +    "transfer_lazyloader_from_file",
│ │ +    "units_conversion_from_byte"
│ │ +]
│ │ +
│ │  
│ │  def runtime(func):
│ │      """计算函数运行时间"""
│ │      @functools.wraps(func)
│ │      def wrapper(*args, **kwargs):
│ │          start_time = time.perf_counter()
│ │          ret = func(*args, **kwargs)
│ │ @@ -287,44 +305,52 @@
│ │      :params: encoding: type(data) is 'str' 通过 encoding 转换为 bytes
│ │      """
│ │      if isinstance(data, str):
│ │          data = data.encode(encoding)
│ │      return hashlib.sha256(data).hexdigest()
│ │  
│ │  
│ │ -def transfer_lazyloader(code: str, /) -> str:
│ │ +def transfer_lazyloader(string: str, /) -> str:
│ │      """python模块转换懒加载
│ │  
│ │ -    :params: code: python代码
│ │ +    :params: string: python代码
│ │      """
│ │ -    def repl_string(match):
│ │ +    pattern = re.compile(
│ │ +        r"^from\s+?(?P<from_name>\S+)\s+?import\s+?(?P<from_import_name>\S+)\s*?(as\s+?(?P<from_import_alias>\S+))?$|^import\s+?(?P<import_name>\S+)(\s+?as\s+(?P<import_alias>\S+?))?\s*?$",
│ │ +        flags=re.M
│ │ +    )
│ │ +    is_replace = False
│ │  
│ │ -        module_name  = match.group("module_name")
│ │ -        package_name = match.group("package_name")
│ │ -        import_name  = match.group("import_name")
│ │ -
│ │ -        if module_name:
│ │ -            string = "\n".join(
│ │ -                [
│ │ -                    f'{item.strip()} = LazyLoader("{item.strip()}", globals(), "{package_name}.{item.strip()}")'
│ │ -                    for item in module_name.split(",")
│ │ -                ]
│ │ -            )
│ │ -        elif import_name:
│ │ -            string = "\n".join(
│ │ -                [
│ │ -                    f'{item.strip()} = LazyLoader("{item.strip()}", globals())'
│ │ -                    for item in import_name.split(",")
│ │ -                ]
│ │ -            )
│ │ -        return string
│ │ -
│ │ -    pattern = re.compile(r"^from\s+?(?P<package_name>.*?)\s+?import\s+?(?P<module_name>.*?)\s*?$|^import\s+?(?P<import_name>.*?)\s*?$", flags=re.M)
│ │ -    lazy_loader = "from pyxk.lazy_loader import LazyLoader\n\n"
│ │ -    return lazy_loader + pattern.sub(repl=repl_string, string=code)
│ │ +    def repl_string(match):
│ │ +        match_dict = match.groupdict()
│ │ +        nonlocal is_replace
│ │ +        import_name, alias, is_replace = None, None, True
│ │ +        result = '{alias} = LazyLoader("{alias}", globals(), "{import_name}")'
│ │ +
│ │ +        # from导入
│ │ +        if match_dict["from_name"]:
│ │ +            import_name = f'{match_dict["from_name"]}.{match_dict["from_import_name"]}'
│ │ +            alias = match_dict["from_import_name"]
│ │ +        else:
│ │ +            import_name = f'{match_dict["import_name"]}'
│ │ +            alias = match_dict["import_name"]
│ │ +
│ │ +        # alias
│ │ +        if match_dict["from_import_alias"]:
│ │ +            alias = match_dict["from_import_alias"]
│ │ +        elif match_dict["import_alias"]:
│ │ +            alias = match_dict["import_alias"]
│ │ +
│ │ +        return result.format(alias=alias, import_name=import_name)
│ │ +
│ │ +    # 替换懒加载
│ │ +    string = pattern.sub(repl=repl_string, string=string)
│ │ +    if is_replace:
│ │ +        string = "from pyxk.lazy_loader import LazyLoader\n\n" + string
│ │ +    return string
│ │  
│ │  
│ │  def transfer_lazyloader_from_file(
│ │      read_file: str, write_file: str, *, encoding="utf-8"
│ │  ):
│ │      """python模块转换懒加载 从文件
│ │  
│ │ @@ -338,15 +364,15 @@
│ │          content = transfer_lazyloader(content)
│ │          fileobj.write(content)
│ │  
│ │  def units_conversion_from_byte(
│ │      target: typing.Union[int, float], /
│ │  ) -> typing.Tuple[float, str]:
│ │      """字节单位自动换算
│ │ -    
│ │ +
│ │      :params: 换算目标(Bytes)
│ │      """
│ │      target, target_units = float(target), "Bytes"
│ │      units_dict = {"Bytes": 1, "KB": 1024, "MB": 1024, "GB": 1024, "TB": 1024, "PB": 1024, "EB": 1024, "ZB": 1024, "YB": 1024, "BB": 1024}
│ │      for units, rate in units_dict.items():
│ │          if target >= rate:
│ │              target, target_units = target/rate, units
│ │   --- pyxk-0.4.5/pyxk.egg-info/SOURCES.txt
│ ├── +++ pyxk-0.4.6/pyxk.egg-info/SOURCES.txt
│ │┄ Files 26% similar despite different names
│ │ @@ -9,17 +9,14 @@
│ │  pyxk.egg-info/dependency_links.txt
│ │  pyxk.egg-info/entry_points.txt
│ │  pyxk.egg-info/requires.txt
│ │  pyxk.egg-info/top_level.txt
│ │  pyxk/aes/__init__.py
│ │  pyxk/aes/_fmtdata.py
│ │  pyxk/aes/cryptor.py
│ │ -pyxk/httpx/__init__.py
│ │ -pyxk/httpx/_api.py
│ │ -pyxk/httpx/_client.py
│ │  pyxk/m3u8/__init__.py
│ │  pyxk/m3u8/_download.py
│ │  pyxk/m3u8/_entry_point.py
│ │  pyxk/m3u8/_m3u8.py
│ │  pyxk/m3u8/_parser.py
│ │  pyxk/requests/__init__.py
│ │  pyxk/requests/_entry_point.py
│ │   --- pyxk-0.4.5/setup.py
│ ├── +++ pyxk-0.4.6/setup.py
│ │┄ Files 11% similar despite different names
│ │ @@ -2,30 +2,29 @@
│ │  
│ │  
│ │  with open("README.md", "r", encoding="utf-8") as fh:
│ │      long_description = fh.read()
│ │  
│ │  setuptools.setup(
│ │      name="pyxk",
│ │ -    version="0.4.5",
│ │ -    author="xk",
│ │ +    version="0.4.6",
│ │ +    author="xiek",
│ │      install_requires=[
│ │          "requests",
│ │          "pycryptodome",
│ │          "rich",
│ │          "m3u8",
│ │          "aiohttp",
│ │          "aiofiles",
│ │          "click",
│ │ -        "httpx"
│ │      ],
│ │      entry_points={
│ │          'console_scripts': [
│ │              'm3u8 = pyxk.m3u8._entry_point:main',
│ │ -            'requests = pyxk.requests._entry_point:main'
│ │ +            'req = pyxk.requests._entry_point:main'
│ │          ],
│ │      },
│ │      author_email="925330867@qq.com",
│ │      description="pyxk",
│ │      long_description=long_description,
│ │      long_description_content_type="text/markdown",
│ │      # url="",
