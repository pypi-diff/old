--- tmp/areas-0.1.4.tar.gz
+++ tmp/areas-0.1.5.tar.gz
├── filetype from file(1)
│ @@ -1 +1 @@
│ -gzip compressed data, was "areas-0.1.4.tar", max compression
│ +gzip compressed data, was "areas-0.1.5.tar", max compression
│   --- areas-0.1.4.tar
├── +++ areas-0.1.5.tar
│ ├── file list
│ │ @@ -1,28 +1,28 @@
│ │ --rw-r--r--   0        0        0     1091 2022-07-10 20:34:09.292968 areas-0.1.4/LICENSE
│ │ --rw-r--r--   0        0        0     8590 2023-04-05 15:11:22.994752 areas-0.1.4/README.md
│ │ --rw-r--r--   0        0        0       60 2022-09-03 17:56:00.424811 areas-0.1.4/areas/__init__.py
│ │ --rw-r--r--   0        0        0      357 2023-04-05 15:09:12.614604 areas-0.1.4/areas/config/architectures.py
│ │ --rw-r--r--   0        0        0      168 2022-09-03 17:56:00.425471 areas-0.1.4/areas/exception/__init__.py
│ │ --rw-r--r--   0        0        0      307 2022-09-03 17:56:00.425628 areas-0.1.4/areas/exception/compile_error.py
│ │ --rw-r--r--   0        0        0      162 2022-09-03 17:56:00.425742 areas-0.1.4/areas/exception/runtime_error.py
│ │ --rw-r--r--   0        0        0      100 2022-09-03 17:56:00.425867 areas-0.1.4/areas/exception/tool_file_error.py
│ │ --rw-r--r--   0        0        0     4165 2023-03-07 17:56:25.298171 areas-0.1.4/areas/main.py
│ │ --rw-r--r--   0        0        0      186 2022-09-03 17:56:00.426288 areas-0.1.4/areas/parameters/__init__.py
│ │ --rw-r--r--   0        0        0     1853 2022-09-03 17:56:00.426511 areas-0.1.4/areas/parameters/array_parameter.py
│ │ --rw-r--r--   0        0        0      808 2022-09-03 17:56:00.426740 areas-0.1.4/areas/parameters/numeric_parameter.py
│ │ --rw-r--r--   0        0        0     1244 2022-09-03 17:56:00.426870 areas-0.1.4/areas/parameters/parameter.py
│ │ --rw-r--r--   0        0        0      775 2022-09-03 17:56:00.427161 areas-0.1.4/areas/parameters/string_parameter.py
│ │ --rw-r--r--   0        0        0      254 2022-09-03 17:56:00.427442 areas-0.1.4/areas/subroutines/__init__.py
│ │ --rw-r--r--   0        0        0     3736 2022-09-03 17:56:00.427779 areas-0.1.4/areas/subroutines/array_subroutine.py
│ │ --rw-r--r--   0        0        0     3997 2022-09-03 17:56:00.428127 areas-0.1.4/areas/subroutines/mixed_subroutine.py
│ │ --rw-r--r--   0        0        0     2103 2022-09-03 17:56:00.428360 areas-0.1.4/areas/subroutines/numeric_subroutine.py
│ │ --rw-r--r--   0        0        0     1773 2022-09-03 17:56:00.428562 areas-0.1.4/areas/subroutines/subroutine.py
│ │ --rw-r--r--   0        0        0     1356 2022-09-03 17:56:00.428979 areas-0.1.4/areas/subroutines/void_subroutine.py
│ │ --rw-r--r--   0        0        0     4589 2023-04-05 12:31:43.067046 areas-0.1.4/areas/test.py
│ │ --rw-r--r--   0        0        0    11669 2022-09-03 17:56:00.429565 areas-0.1.4/areas/tester.py
│ │ --rw-r--r--   0        0        0        0 2022-09-03 17:56:00.429619 areas-0.1.4/areas/util/__init__.py
│ │ --rw-r--r--   0        0        0     2859 2022-09-03 17:56:00.429956 areas-0.1.4/areas/util/subroutine_integrity.py
│ │ --rw-r--r--   0        0        0      226 2022-09-03 17:56:00.430092 areas-0.1.4/areas/util/type_casting.py
│ │ --rw-r--r--   0        0        0      574 2023-04-05 15:11:43.360989 areas-0.1.4/pyproject.toml
│ │ --rw-r--r--   0        0        0     9498 1970-01-01 00:00:00.000000 areas-0.1.4/setup.py
│ │ --rw-r--r--   0        0        0     9031 1970-01-01 00:00:00.000000 areas-0.1.4/PKG-INFO
│ │ +-rw-r--r--   0        0        0     1091 2022-07-10 20:34:09.292968 areas-0.1.5/LICENSE
│ │ +-rw-r--r--   0        0        0     8590 2023-04-05 15:11:22.994752 areas-0.1.5/README.md
│ │ +-rw-r--r--   0        0        0       60 2022-09-03 17:56:00.424811 areas-0.1.5/areas/__init__.py
│ │ +-rw-r--r--   0        0        0      357 2023-04-05 15:09:12.614604 areas-0.1.5/areas/config/architectures.py
│ │ +-rw-r--r--   0        0        0      168 2022-09-03 17:56:00.425471 areas-0.1.5/areas/exception/__init__.py
│ │ +-rw-r--r--   0        0        0      307 2022-09-03 17:56:00.425628 areas-0.1.5/areas/exception/compile_error.py
│ │ +-rw-r--r--   0        0        0      162 2022-09-03 17:56:00.425742 areas-0.1.5/areas/exception/runtime_error.py
│ │ +-rw-r--r--   0        0        0      100 2022-09-03 17:56:00.425867 areas-0.1.5/areas/exception/tool_file_error.py
│ │ +-rw-r--r--   0        0        0     4165 2023-03-07 17:56:25.298171 areas-0.1.5/areas/main.py
│ │ +-rw-r--r--   0        0        0      186 2022-09-03 17:56:00.426288 areas-0.1.5/areas/parameters/__init__.py
│ │ +-rw-r--r--   0        0        0     1853 2023-04-07 13:37:32.479679 areas-0.1.5/areas/parameters/array_parameter.py
│ │ +-rw-r--r--   0        0        0      807 2023-04-07 13:37:21.737957 areas-0.1.5/areas/parameters/numeric_parameter.py
│ │ +-rw-r--r--   0        0        0     1243 2023-04-07 13:37:29.419047 areas-0.1.5/areas/parameters/parameter.py
│ │ +-rw-r--r--   0        0        0      774 2023-04-07 13:37:26.893885 areas-0.1.5/areas/parameters/string_parameter.py
│ │ +-rw-r--r--   0        0        0      254 2022-09-03 17:56:00.427442 areas-0.1.5/areas/subroutines/__init__.py
│ │ +-rw-r--r--   0        0        0     3736 2022-09-03 17:56:00.427779 areas-0.1.5/areas/subroutines/array_subroutine.py
│ │ +-rw-r--r--   0        0        0     3997 2022-09-03 17:56:00.428127 areas-0.1.5/areas/subroutines/mixed_subroutine.py
│ │ +-rw-r--r--   0        0        0     2103 2022-09-03 17:56:00.428360 areas-0.1.5/areas/subroutines/numeric_subroutine.py
│ │ +-rw-r--r--   0        0        0     1773 2022-09-03 17:56:00.428562 areas-0.1.5/areas/subroutines/subroutine.py
│ │ +-rw-r--r--   0        0        0     1356 2022-09-03 17:56:00.428979 areas-0.1.5/areas/subroutines/void_subroutine.py
│ │ +-rw-r--r--   0        0        0     4589 2023-04-05 12:31:43.067046 areas-0.1.5/areas/test.py
│ │ +-rw-r--r--   0        0        0    11668 2023-04-07 14:05:32.675390 areas-0.1.5/areas/tester.py
│ │ +-rw-r--r--   0        0        0        0 2022-09-03 17:56:00.429619 areas-0.1.5/areas/util/__init__.py
│ │ +-rw-r--r--   0        0        0     3113 2023-04-07 12:58:14.476852 areas-0.1.5/areas/util/subroutine_integrity.py
│ │ +-rw-r--r--   0        0        0      226 2022-09-03 17:56:00.430092 areas-0.1.5/areas/util/type_casting.py
│ │ +-rw-r--r--   0        0        0      574 2023-04-07 14:12:50.133755 areas-0.1.5/pyproject.toml
│ │ +-rw-r--r--   0        0        0     9498 1970-01-01 00:00:00.000000 areas-0.1.5/setup.py
│ │ +-rw-r--r--   0        0        0     9031 1970-01-01 00:00:00.000000 areas-0.1.5/PKG-INFO
│ │   --- areas-0.1.4/LICENSE
│ ├── +++ areas-0.1.5/LICENSE
│ │┄ Files identical despite different names
│ │   --- areas-0.1.4/README.md
│ ├── +++ areas-0.1.5/README.md
│ │┄ Files identical despite different names
│ │   --- areas-0.1.4/areas/main.py
│ ├── +++ areas-0.1.5/areas/main.py
│ │┄ Files identical despite different names
│ │   --- areas-0.1.4/areas/parameters/array_parameter.py
│ ├── +++ areas-0.1.5/areas/parameters/array_parameter.py
│ │┄ Files 7% similar despite different names
│ │ @@ -25,17 +25,17 @@
│ │  
│ │      def get_test_declaration_representation(self):
│ │          return '{} arg{}[] = {{{{ {{}} }}}};'.format(self.element_type, self.idx) if self.is_output else ''
│ │  
│ │      def get_test_call_representation(self):
│ │          return 'arg{}'.format(self.idx) if self.is_output else '({}[]){{{{ {{}} }}}}'.format(self.element_type)
│ │  
│ │ -    def get_literal_representantion(self, value):
│ │ +    def get_literal_representation(self, value):
│ │          return ','.join(map(str, value)) if (self.element_type != 'char'
│ │ -                                             and self.element_type != 'chari') else','.join(map(lambda x: str(x) if isinstance(x, int) else "'{}'".format(x), value))
│ │ +                                             and self.element_type != 'chari') else ','.join(map(lambda x: str(x) if isinstance(x, int) else "'{}'".format(x), value))
│ │  
│ │      def get_test_call_output_representation(self):
│ │          var_name = 'arg{}'.format(self.idx)
│ │          array_size = 'sizeof({})/sizeof({}[0])'.format(var_name, var_name)
│ │          return '{}{}{}'.format(
│ │              'printf("[");',
│ │              'for(int i = 0; i < {}; ++i) printf("%{}%s", {}[i], (i < {} - 1 ? "," : "\\0"));'.format(
│ │   --- areas-0.1.4/areas/parameters/numeric_parameter.py
│ ├── +++ areas-0.1.5/areas/parameters/numeric_parameter.py
│ │┄ Files 12% similar despite different names
│ │ @@ -14,13 +14,13 @@
│ │      def get_test_declaration_representation(self):
│ │          # Not applicable to numeric parameters (they're always only input)
│ │          return ''
│ │  
│ │      def get_test_call_representation(self):
│ │          return '{}'
│ │  
│ │ -    def get_literal_representantion(self, value):
│ │ +    def get_literal_representation(self, value):
│ │          return str(value)
│ │  
│ │      def get_test_call_output_representation(self):
│ │          # Not applicable to numeric parameters (when they are output they can be incorporated with the subroutine call)
│ │          return ''
│ │   --- areas-0.1.4/areas/parameters/parameter.py
│ ├── +++ areas-0.1.5/areas/parameters/parameter.py
│ │┄ Files 4% similar despite different names
│ │ @@ -14,14 +14,14 @@
│ │          """Method that returns parameter's declaration to use before a function call, when it is of the adequate type"""
│ │          pass
│ │  
│ │      def get_test_call_representation(self):
│ │          """Method that returns parameter's representation as an actual argument to a subroutine call (may be direct value or variable, where value is not used)"""
│ │          pass
│ │  
│ │ -    def get_literal_representantion(self, value):
│ │ +    def get_literal_representation(self, value):
│ │          """Method that returns parameter's representation for when to format an input into a template C file"""
│ │          pass
│ │  
│ │      def get_test_call_output_representation(self):
│ │          """Method that calculates the adequate printf statements post-subroutine call for arrays and strings"""
│ │          pass
│ │   --- areas-0.1.4/areas/parameters/string_parameter.py
│ ├── +++ areas-0.1.5/areas/parameters/string_parameter.py
│ │┄ Files 17% similar despite different names
│ │ @@ -13,12 +13,12 @@
│ │  
│ │      def get_test_declaration_representation(self):
│ │          return 'char arg{}[] = "{{}}";'.format(self.idx) if self.is_output else ''
│ │  
│ │      def get_test_call_representation(self):
│ │          return 'arg{}'.format(self.idx) if self.is_output else '"{}"'
│ │  
│ │ -    def get_literal_representantion(self, value):
│ │ +    def get_literal_representation(self, value):
│ │          return value
│ │  
│ │      def get_test_call_output_representation(self):
│ │          return 'printf("%s", arg{});'.format(self.idx) if self.is_output else ''
│ │   --- areas-0.1.4/areas/subroutines/array_subroutine.py
│ ├── +++ areas-0.1.5/areas/subroutines/array_subroutine.py
│ │┄ Files identical despite different names
│ │   --- areas-0.1.4/areas/subroutines/mixed_subroutine.py
│ ├── +++ areas-0.1.5/areas/subroutines/mixed_subroutine.py
│ │┄ Files identical despite different names
│ │   --- areas-0.1.4/areas/subroutines/numeric_subroutine.py
│ ├── +++ areas-0.1.5/areas/subroutines/numeric_subroutine.py
│ │┄ Files identical despite different names
│ │   --- areas-0.1.4/areas/subroutines/subroutine.py
│ ├── +++ areas-0.1.5/areas/subroutines/subroutine.py
│ │┄ Files identical despite different names
│ │   --- areas-0.1.4/areas/subroutines/void_subroutine.py
│ ├── +++ areas-0.1.5/areas/subroutines/void_subroutine.py
│ │┄ Files identical despite different names
│ │   --- areas-0.1.4/areas/test.py
│ ├── +++ areas-0.1.5/areas/test.py
│ │┄ Files identical despite different names
│ │   --- areas-0.1.4/areas/tester.py
│ ├── +++ areas-0.1.5/areas/tester.py
│ │┄ Files 0% similar despite different names
│ │ @@ -86,15 +86,15 @@
│ │          # Rearrange parameter-input pair order for format due to possible parameters that are output and, therefore, declared first
│ │          sorted_param_list = list(zip(sr.parameters, inp))
│ │          sorted_param_list = sorted_param_list[-sr_non_int_outputs:] + \
│ │              sorted_param_list[:-sr_non_int_outputs]
│ │  
│ │          # Build C file from template
│ │          open('{}.c'.format(output_file), 'w').write(
│ │ -            template_file.format(*[param.get_literal_representantion(inp_literal) for param, inp_literal in sorted_param_list]))
│ │ +            template_file.format(*[param.get_literal_representation(inp_literal) for param, inp_literal in sorted_param_list]))
│ │  
│ │          compilation_files = list(
│ │              map(lambda x: "{}/{}.s".format(self.temp_grading_folder, x.lower()),
│ │                  [subroutine, *self.get_extra_assembly_to_include(subroutine)])
│ │          )
│ │  
│ │          try:
│ │   --- areas-0.1.4/areas/util/subroutine_integrity.py
│ ├── +++ areas-0.1.5/areas/util/subroutine_integrity.py
│ │┄ Files 18% similar despite different names
│ │ @@ -16,29 +16,29 @@
│ │      "array float",
│ │      "array double",
│ │      "array char",
│ │      "array chari"
│ │  ]
│ │  
│ │  PYTHON_COMPATIBLE_TYPES = {
│ │ -    "int": int,
│ │ -    "long": int,
│ │ -    "float": float,
│ │ -    "double": float,
│ │ -    "char": str,
│ │ -    "chari": int,
│ │ +    "int": [int],
│ │ +    "long": [int],
│ │ +    "float": [int, float],
│ │ +    "double": [int, float],
│ │ +    "char": [str],
│ │ +    "chari": [int],
│ │      # arrays
│ │ -    "char*": str,
│ │ -    "string": str,
│ │ -    "array int": list,
│ │ -    "array long": list,
│ │ -    "array float": list,
│ │ -    "array double": list,
│ │ -    "array char": list,
│ │ -    "array chari": list
│ │ +    "char*": [str],
│ │ +    "string": [str],
│ │ +    "array int": [list],
│ │ +    "array long": [list],
│ │ +    "array float": [list],
│ │ +    "array double": [list],
│ │ +    "array char": [list],
│ │ +    "array chari": [list]
│ │  }
│ │  
│ │  
│ │  def __parse_subroutine_definition(subroutine):
│ │      if "params" not in subroutine:
│ │          raise ToolFileError("No parameters in subroutine definition")
│ │  
│ │ @@ -69,26 +69,32 @@
│ │              "Number of inputs does not match number of parameters")
│ │  
│ │      if len(outputs) != len(returns):
│ │          raise ToolFileError(
│ │              "Number of outputs does not match number of returns")
│ │  
│ │      for param, input in zip(params, inputs):
│ │ -        expected_type = PYTHON_COMPATIBLE_TYPES[param]
│ │ +        expected_types = PYTHON_COMPATIBLE_TYPES[param]
│ │  
│ │ -        if not isinstance(input, expected_type):
│ │ +        matches = [isinstance(input, expected_type)
│ │ +                   for expected_type in expected_types]
│ │ +
│ │ +        if not any(matches):
│ │              raise ToolFileError(
│ │ -                f"Input {input} is not of type {expected_type}")
│ │ +                f"Input {input} ({type(output)}) is not of type {expected_types}")
│ │  
│ │      for return_type, output in zip(returns, outputs):
│ │ -        expected_type = PYTHON_COMPATIBLE_TYPES[return_type]
│ │ +        expected_types = PYTHON_COMPATIBLE_TYPES[return_type]
│ │ +
│ │ +        matches = [isinstance(output, expected_type)
│ │ +                   for expected_type in expected_types]
│ │  
│ │ -        if not isinstance(output, expected_type):
│ │ +        if not any(matches):
│ │              raise ToolFileError(
│ │ -                f"Output {output} is not of type {expected_type}")
│ │ +                f"Output {output} ({type(output)}) is not of type {expected_types}")
│ │  
│ │  
│ │  def __parse_subroutine_tests(tests, params, returns):
│ │      for test in tests:
│ │          if "inputs" not in test:
│ │              raise ToolFileError("No inputs in test suite")
│ │   --- areas-0.1.4/pyproject.toml
│ ├── +++ areas-0.1.5/pyproject.toml
│ │┄ Files 0% similar despite different names
│ │ @@ -1,10 +1,10 @@
│ │  [tool.poetry]
│ │  name = "areas"
│ │ -version = "0.1.4"
│ │ +version = "0.1.5"
│ │  description = "ARM64 and RISC-V (extensible) assessment system"
│ │  authors = ["Luis Tavares <luistavares10@outlook.pt>"]
│ │  repository = "https://github.com/luist18/areasear"
│ │  license = "MIT"
│ │  readme = "README.md"
│ │  packages = [{include = "areas"}]
│ │   --- areas-0.1.4/setup.py
│ ├── +++ areas-0.1.5/setup.py
│ │┄ Files 0% similar despite different names
│ │ @@ -16,15 +16,15 @@
│ │  ['PyYAML>=6.0,<7.0', 'Unidecode>=1.3.4,<2.0.0', 'pytest>=7.2.0,<8.0.0']
│ │  
│ │  entry_points = \
│ │  {'console_scripts': ['test = scripts:test']}
│ │  
│ │  setup_kwargs = {
│ │      'name': 'areas',
│ │ -    'version': '0.1.4',
│ │ +    'version': '0.1.5',
│ │      'description': 'ARM64 and RISC-V (extensible) assessment system',
│ │      'long_description': '# areas<!-- omit in toc -->\n\n[![GitHub license](https://img.shields.io/github/license/luist18/areas?color=blue)](https://github.com/luist18/areas/blob/main/LICENSE)\n\n**A**RM64 and **R**ISC-V (**e**xtensible) **A**ssessment **S**ystem.\n\n*areas* is originally a fork from [João Damas\'](https://github.com/cyrilico) [Automatic Observation and (grade) Calculation for (subroutine) Operations tool](https://github.com/cyrilico/aoco-code-correction). It is a tool to automate student\'s grading in the assignments done during the Microprocessor and Personal Computers course unit.\n\n## Differences with the original tool<!-- omit in toc -->\n\nTo ease the communication between the backend server and the tool the output demanded changes. Output `.txt` and `.csv` files are now combined in a more complete `.json` file. Structure of the `.zip` input file is simplified. Unsupported data types such as long and double are now supported. A new input parameter - weight - is introduced.\n\n---\n\n## Table of contents<!-- omit in toc -->\n\n- [1. Installation](#1-installation)\n- [2. Developing](#2-developing)\n- [3. Running](#3-running)\n- [4. Usage](#4-usage)\n- [5. File syntax and structure](#5-file-syntax-and-structure)\n  - [5.1. Available data types](#51-available-data-types)\n    - [5.1.1. Primitive data types](#511-primitive-data-types)\n    - [5.1.2. Array data types](#512-array-data-types)\n  - [5.2. subroutines.yaml](#52-subroutinesyaml)\n  - [5.3. tests.yaml](#53-testsyaml)\n  - [5.4. submission.zip](#54-submissionzip)\n- [6. Results](#6-results)\n\n## 1. Installation\n\nUsing Docker:\n\n```bash\ndocker pull luist188/areas\n```\n\n## 2. Developing\n\nTo develop the tool you must setup a Docker development environment to ease the dependencies installation and setup an isolated environment.\n\n1. Build the Docker development image:\n\n   ```bash\n   docker build -f Dockerfile.dev -t areas .\n   ```\n\n2. Run the image with the shared folder:\n\n   ```bash\n   docker run -it -v $(pwd):/usr/app areas\n   ```\n\nNote: if you are running MacOS with the M1 (or superior) chip you must add `--platform linux/x86_64` to `docker build` and `docker run`.\n\n## 3. Running\n\n1. Place the input files inside any directory.\n2. Run the image with a shared volume pointing to the input directory: `docker run -v input:destination -it luist188/areas` (you can learn more about `docker run` usage [here](https://docs.docker.com/engine/reference/run/))\n3. Run the alias command (assure you are using `/bin/bash`) `areas` or run `python main.py` in the tool\'s source.\n\n## 4. Usage\n\n```console\n$ areas [-h] -sr SR -t T -sm SM [SM ...] [-gfd GFD] [-ffd FFD] [-grf GRF] [-tout TOUT] [-fpre FPRE]\n\n$ areas [args]\n\nOptions:\n  --help, -h                Show help                                         [boolean]\n  -sr <subroutines.yaml>    .yaml file containing subroutine declaration      [required] [string]\n  -t <tests.yaml>           .yaml file containing the test cases              [required] [string]\n  -sm <submission.zip...>   .zip files containing user submission             [required] [string array]\n  -gfd <directory>          path to the directory to store temporary files\n    (e.g., compiled binaries)                                                 [default:grading] [string]\n  -ffd <directory>          path to the directory to store the grading for\n    each submission                                                           [default:feedback] [string]\n  -tout <timeout>           float timeout value                               [default:2.0] [float]\n  -fpre <precision>         floating point threshold for comparing floating\n    points in test cases                                                      [default:1e-6] [float]\n```\n\n## 5. File syntax and structure\n\n### 5.1. Available data types\n\n#### 5.1.1. Primitive data types\n\n- `int`\n- `long`\n- `float`\n- `double`\n- `char`\n- `chari` (char represented as an unsgined intenger - similar to char but has to be used when printed characters are not ASCII characters)\n\n#### 5.1.2. Array data types\n\n- `char*/string`\n- `array int`\n- `array long`\n- `array float`\n- `array double`\n- `array char`\n- `array chari`\n\n### 5.2. subroutines.yaml\n\nThe input file for the subroutine declaration has to follow a specific structure and syntax described as follows:\n\n```yaml\nfoo: \n  params: \n    - int\n    - array char\n    - array int\n    - array int\n  return: \n    - int\n    - array int\n\nbar: \n  params: \n    - long\n  return: \n    - long\n```\n\nEach subroutine has an optional parameter to define the subroutine architecture, the syntax is as follows:\n\n```yaml\nfoo: \n  architecture: arm\n  params: \n    - int\n    - array char\n    - array int\n    - array int\n  return: \n    - int\n    - array int\n```\n\nBy default, if the architecture parameter is omitted, the system will assume ARM64 as the subroutine architecture. The available architectures are the following:\n\n- `arm` - ARM64 architecture\n- `riscv` - RISC-V architecture\n\nThe subroutine name has to match the `.s` to test and is case insensitive. Thus, the subroutine `foo` or `bar` is going to check any `.s` file that matches its name case insensitive. All subroutines must contain an array of parameters, `params`, and an array of returns, `return`.\n\n### 5.3. tests.yaml\n\nThe input file for the test cases declaration has to follow a specific structure and syntax described as follows:\n\n```yaml\nbar:\n  - inputs:\n    - 6\n    outputs: \n    - 36\n    weight: 0.5\n  - inputs:\n    - 5\n    outputs: \n    - 25\n    weight: 0.5\n```\n\nThe root declaration of a test case must match the name declared in the `subroutines.yaml` file. Test cases have an array of inputs that has a list of outputs and a test weight. The sum of the test weights must be 1.0.\n\n### 5.4. submission.zip\n\nThe submission `zip` file must contain a `.s` file in its root. For example, for the subroutine `foo` and `bar` the `zip` structure should be as follows:\n\n```tree\nsubmission.zip\n├── foo.s\n└── bar.s\n```\n\n## 6. Results\n\nFor each submission file a `.json` file is created in the feedback directory with the same name of the `.zip` file. The file contains all information about compilation status and test cases. In addition, a simplified version of the result of all submissions is created in a `result.json`. The content of the files look as follows:\n\nFile **submission.json**\n\n```json\n[\n    {\n        "name": "foo",\n        "compiled": true,\n        "ok": true,\n        "passed_count": 2,\n        "test_count": 2,\n        "score": 1,\n        "tests": [\n            {\n                "weight": 1,\n                "run": true,\n                "input": [\n                    6,\n                    ["-", "+", "+", "-", "-", "+"],\n                    [1, 2, 3, 0, 1, -25],\n                    [13, 2, 8, 4, 5, 25]\n                ],\n                "output": [\n                    "0",\n                    ["12", "4", "11", "4", "4", "0"]\n                ],\n                "passed": true\n            }\n        ]\n    },\n    {\n        "name": "bar",\n        "compiled": true,\n        "ok": true,\n        "passed_count": 2,\n        "test_count": 2,\n        "score": 1,\n        "tests": [\n            {\n                "weight": 0.5,\n                "run": true,\n                "input": [\n                    6\n                ],\n                "output": [\n                    "36"\n                ],\n                "passed": true\n            },\n            {\n                "weight": 0.5,\n                "run": true,\n                "input": [\n                    5\n                ],\n                "output": [\n                    "25"\n                ],\n                "passed": true\n            }\n        ]\n    }\n]\n```\n\nFile **result.json**\n\n```json\n[\n    {\n        "submission_name": "submission",\n        "subroutines": [\n            {\n                "name": "foo",\n                "score": 0\n            },\n            {\n                "name": "bar",\n                "score": 0.5\n            }\n        ]\n    },\n    {\n        "submission_name": "submission2",\n        "subroutines": [\n            {\n                "name": "foo",\n                "score": 1\n            },\n            {\n                "name": "bar",\n                "score": 1\n            }\n        ]\n    }\n]\n```\n\n## License<!-- omit in toc -->\n\n[MIT](https://choosealicense.com/licenses/mit/)\n',
│ │      'author': 'Luis Tavares',
│ │      'author_email': 'luistavares10@outlook.pt',
│ │      'maintainer': 'None',
│ │      'maintainer_email': 'None',
│ │      'url': 'https://github.com/luist18/areasear',
│ │   --- areas-0.1.4/PKG-INFO
│ ├── +++ areas-0.1.5/PKG-INFO
│ │┄ Files 0% similar despite different names
│ │ @@ -1,10 +1,10 @@
│ │  Metadata-Version: 2.1
│ │  Name: areas
│ │ -Version: 0.1.4
│ │ +Version: 0.1.5
│ │  Summary: ARM64 and RISC-V (extensible) assessment system
│ │  Home-page: https://github.com/luist18/areasear
│ │  License: MIT
│ │  Author: Luis Tavares
│ │  Author-email: luistavares10@outlook.pt
│ │  Requires-Python: >=3.9,<4.0
│ │  Classifier: License :: OSI Approved :: MIT License
