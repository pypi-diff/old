--- tmp/nowcasting_datamodel-1.2.3.tar.gz
+++ tmp/nowcasting_datamodel-1.2.4.tar.gz
├── filetype from file(1)
│ @@ -1 +1 @@
│ -gzip compressed data, was "nowcasting_datamodel-1.2.3.tar", last modified: Thu Apr  6 10:51:25 2023, max compression
│ +gzip compressed data, was "nowcasting_datamodel-1.2.4.tar", last modified: Thu Apr  6 13:15:45 2023, max compression
│   --- nowcasting_datamodel-1.2.3.tar
├── +++ nowcasting_datamodel-1.2.4.tar
│ ├── file list
│ │ @@ -1,52 +1,52 @@
│ │ -drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 10:51:25.266016 nowcasting_datamodel-1.2.3/
│ │ --rw-r--r--   0 runner    (1001) docker     (123)       20 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/MANIFEST.in
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     5336 2023-04-06 10:51:25.266016 nowcasting_datamodel-1.2.3/PKG-INFO
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     5015 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/README.md
│ │ --rw-r--r--   0 runner    (1001) docker     (123)   151651 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/diagram.png
│ │ --rw-r--r--   0 runner    (1001) docker     (123)    49887 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/diagram_pv.png
│ │ -drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 10:51:25.258016 nowcasting_datamodel-1.2.3/nowcasting_datamodel/
│ │ --rw-r--r--   0 runner    (1001) docker     (123)       53 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/__init__.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     1989 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/connection.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     9342 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/fake.py
│ │ -drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 10:51:25.262016 nowcasting_datamodel-1.2.3/nowcasting_datamodel/migrations/
│ │ --rw-r--r--   0 runner    (1001) docker     (123)       28 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/migrations/__init__.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     2173 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/migrations/app.py
│ │ -drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 10:51:25.262016 nowcasting_datamodel-1.2.3/nowcasting_datamodel/models/
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     1052 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/models/__init__.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)      163 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/models/base.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     3597 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/models/convert.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)    17821 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/models/forecast.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     4480 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/models/gsp.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     5923 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/models/metric.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     4471 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/models/models.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     5035 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/models/pv.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)      821 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/models/utils.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     3401 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/national.py
│ │ -drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 10:51:25.262016 nowcasting_datamodel-1.2.3/nowcasting_datamodel/read/
│ │ --rw-r--r--   0 runner    (1001) docker     (123)       32 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/read/__init__.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)    11847 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/read/blend.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)    21953 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/read/read.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     7252 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/read/read_gsp.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     3279 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/read/read_metric.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     6647 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/read/read_pv.py
│ │ -drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 10:51:25.266016 nowcasting_datamodel-1.2.3/nowcasting_datamodel/save/
│ │ --rw-r--r--   0 runner    (1001) docker     (123)       32 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/save/__init__.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     4517 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/save/adjust.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     3434 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/save/save.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     9070 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/save/update.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)      631 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel/utils.py
│ │ -drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 10:51:25.262016 nowcasting_datamodel-1.2.3/nowcasting_datamodel.egg-info/
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     5336 2023-04-06 10:51:25.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel.egg-info/PKG-INFO
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     1357 2023-04-06 10:51:25.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel.egg-info/SOURCES.txt
│ │ --rw-r--r--   0 runner    (1001) docker     (123)        1 2023-04-06 10:51:25.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel.egg-info/dependency_links.txt
│ │ --rw-r--r--   0 runner    (1001) docker     (123)       73 2023-04-06 10:51:25.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel.egg-info/requires.txt
│ │ --rw-r--r--   0 runner    (1001) docker     (123)       21 2023-04-06 10:51:25.000000 nowcasting_datamodel-1.2.3/nowcasting_datamodel.egg-info/top_level.txt
│ │ --rw-r--r--   0 runner    (1001) docker     (123)       73 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/requirements.txt
│ │ --rw-r--r--   0 runner    (1001) docker     (123)       38 2023-04-06 10:51:25.266016 nowcasting_datamodel-1.2.3/setup.cfg
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     1051 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/setup.py
│ │ -drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 10:51:25.266016 nowcasting_datamodel-1.2.3/tests/
│ │ --rw-r--r--   0 runner    (1001) docker     (123)      626 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/tests/test_databaseconnection.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     3082 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/tests/test_fake.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)      706 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/tests/test_fake_pv.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)     1330 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/tests/test_national.py
│ │ --rw-r--r--   0 runner    (1001) docker     (123)      863 2023-04-06 10:51:09.000000 nowcasting_datamodel-1.2.3/tests/test_utils.py
│ │ +drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 13:15:45.325997 nowcasting_datamodel-1.2.4/
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)       20 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/MANIFEST.in
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     5336 2023-04-06 13:15:45.325997 nowcasting_datamodel-1.2.4/PKG-INFO
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     5015 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/README.md
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)   151651 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/diagram.png
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)    49887 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/diagram_pv.png
│ │ +drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 13:15:45.321997 nowcasting_datamodel-1.2.4/nowcasting_datamodel/
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)       53 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/__init__.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     1989 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/connection.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     9342 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/fake.py
│ │ +drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 13:15:45.321997 nowcasting_datamodel-1.2.4/nowcasting_datamodel/migrations/
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)       28 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/migrations/__init__.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     2173 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/migrations/app.py
│ │ +drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 13:15:45.325997 nowcasting_datamodel-1.2.4/nowcasting_datamodel/models/
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     1052 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/models/__init__.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)      163 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/models/base.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     3597 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/models/convert.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)    17821 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/models/forecast.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     4480 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/models/gsp.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     5923 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/models/metric.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     4471 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/models/models.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     5035 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/models/pv.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)      821 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/models/utils.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     3401 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/national.py
│ │ +drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 13:15:45.325997 nowcasting_datamodel-1.2.4/nowcasting_datamodel/read/
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)       32 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/read/__init__.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)    12531 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/read/blend.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)    22415 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/read/read.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     7252 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/read/read_gsp.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     3279 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/read/read_metric.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     6647 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/read/read_pv.py
│ │ +drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 13:15:45.325997 nowcasting_datamodel-1.2.4/nowcasting_datamodel/save/
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)       32 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/save/__init__.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     4517 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/save/adjust.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     3434 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/save/save.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     9557 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/save/update.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)      631 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel/utils.py
│ │ +drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 13:15:45.321997 nowcasting_datamodel-1.2.4/nowcasting_datamodel.egg-info/
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     5336 2023-04-06 13:15:45.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel.egg-info/PKG-INFO
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     1357 2023-04-06 13:15:45.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel.egg-info/SOURCES.txt
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)        1 2023-04-06 13:15:45.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel.egg-info/dependency_links.txt
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)       73 2023-04-06 13:15:45.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel.egg-info/requires.txt
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)       21 2023-04-06 13:15:45.000000 nowcasting_datamodel-1.2.4/nowcasting_datamodel.egg-info/top_level.txt
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)       73 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/requirements.txt
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)       38 2023-04-06 13:15:45.325997 nowcasting_datamodel-1.2.4/setup.cfg
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     1051 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/setup.py
│ │ +drwxr-xr-x   0 runner    (1001) docker     (123)        0 2023-04-06 13:15:45.325997 nowcasting_datamodel-1.2.4/tests/
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)      626 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/tests/test_databaseconnection.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     3082 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/tests/test_fake.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)      706 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/tests/test_fake_pv.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)     1330 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/tests/test_national.py
│ │ +-rw-r--r--   0 runner    (1001) docker     (123)      863 2023-04-06 13:15:31.000000 nowcasting_datamodel-1.2.4/tests/test_utils.py
│ │   --- nowcasting_datamodel-1.2.3/PKG-INFO
│ ├── +++ nowcasting_datamodel-1.2.4/PKG-INFO
│ │┄ Files 1% similar despite different names
│ │ @@ -1,10 +1,10 @@
│ │  Metadata-Version: 2.1
│ │  Name: nowcasting_datamodel
│ │ -Version: 1.2.3
│ │ +Version: 1.2.4
│ │  Summary: Data Model for the OCF nowcasting project
│ │  Home-page: https://github.com/openclimatefix/nowcasting_datamodel
│ │  Author: Peter Dudfield
│ │  Author-email: peter@openclimatefix.org
│ │  License: MIT
│ │  Keywords: SQL,Datamodel
│ │  Description-Content-Type: text/markdown
│ │   --- nowcasting_datamodel-1.2.3/README.md
│ ├── +++ nowcasting_datamodel-1.2.4/README.md
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/diagram.png
│ ├── +++ nowcasting_datamodel-1.2.4/diagram.png
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/diagram_pv.png
│ ├── +++ nowcasting_datamodel-1.2.4/diagram_pv.png
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel/connection.py
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel/connection.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel/fake.py
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel/fake.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel/migrations/app.py
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel/migrations/app.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel/models/__init__.py
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel/models/__init__.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel/models/convert.py
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel/models/convert.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel/models/forecast.py
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel/models/forecast.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel/models/gsp.py
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel/models/gsp.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel/models/metric.py
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel/models/metric.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel/models/models.py
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel/models/models.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel/models/pv.py
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel/models/pv.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel/models/utils.py
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel/models/utils.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel/national.py
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel/national.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel/read/blend.py
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel/read/blend.py
│ │┄ Files 3% similar despite different names
│ │ @@ -218,15 +218,15 @@
│ │          )
│ │          forecast_value._adjust_mw = row.adjust_mw
│ │          forecast_values.append(forecast_value)
│ │  
│ │      return forecast_values
│ │  
│ │  
│ │ -def make_weights_df(model_names, weights, start_datetime_now=None):
│ │ +def make_weights_df(model_names, weights, start_datetime=None):
│ │      """Makes weights to half an hour and blocks
│ │  
│ │      A pd data frame like
│ │      target_time weight cnn National_xg
│ │      2020-01-01 00:00:00 1.0 0.0
│ │      2020-01-01 00:30:00 0.5 0.5
│ │      2020-01-01 01:00:00 0.0 1.0
│ │ @@ -250,25 +250,28 @@
│ │              },
│ │              {
│ │                  "start_horizon_hour": 6,
│ │                  "start_weight": [0, 1],
│ │              },
│ │          ]
│ │      # get time now rounded up to 30 mins
│ │ -    if start_datetime_now is None:
│ │ -        start_datetime_now = datetime.now().replace(second=0, microsecond=0)
│ │ -        if start_datetime_now.minute >= 30:
│ │ -            start_datetime_now += timedelta(hours=1)
│ │ -            start_datetime_now = start_datetime_now.replace(minute=00)
│ │ -        else:
│ │ -            start_datetime_now = start_datetime_now.replace(minute=30)
│ │ +    start_datetime_now = datetime.now(tz=timezone.utc).replace(second=0, microsecond=0)
│ │ +    if start_datetime_now.minute >= 30:
│ │ +        start_datetime_now += timedelta(hours=1)
│ │ +        start_datetime_now = start_datetime_now.replace(minute=00)
│ │ +    else:
│ │ +        start_datetime_now = start_datetime_now.replace(minute=30)
│ │ +
│ │ +    if start_datetime is None:
│ │ +        start_datetime = start_datetime_now
│ │  
│ │      # make dataframe of 8 hours in 30 minutes chunks from now
│ │      weights_all_df = []
│ │ -    for weight in weights:
│ │ +    for i in range(len(weights)):
│ │ +        weight = weights[i]
│ │          if "start_horizon_hour" not in weight:
│ │              start_horizon_hour = 0
│ │          else:
│ │              start_horizon_hour = weight["start_horizon_hour"]
│ │          if "end_horizon_hour" not in weight:
│ │              end_horizon_hour = 8
│ │          else:
│ │ @@ -279,45 +282,59 @@
│ │          else:
│ │              start_weight = weight["start_weight"]
│ │          if "end_weight" not in weight:
│ │              end_weight = weight["start_weight"]
│ │          else:
│ │              end_weight = weight["end_weight"]
│ │  
│ │ +        # add the first weight to the dataframe, from  start_datetime to start_datetime_now.
│ │ +        # This could be for the two days before now
│ │ +        if i == 0:
│ │ +            weights_df = pd.DataFrame(
│ │ +                index=pd.date_range(start=start_datetime, end=start_datetime_now, freq="30min")
│ │ +            )
│ │ +            weights_df[model_names] = start_weight
│ │ +            weights_all_df.append(weights_df)
│ │ +
│ │          logger.debug(
│ │              f"Making weights for {start_horizon_hour} to {end_horizon_hour} "
│ │              f"hours with weights {start_weight} to {end_weight}"
│ │          )
│ │  
│ │ -        start_datetime = (
│ │ +        start_datetime_one_weight = (
│ │              start_datetime_now + timedelta(hours=start_horizon_hour) - timedelta(minutes=30)
│ │          )
│ │          if start_horizon_hour == 0:
│ │ -            start_datetime += timedelta(minutes=30)
│ │ +            start_datetime_one_weight += timedelta(minutes=30)
│ │ +
│ │          end_datetime = (
│ │              start_datetime_now + timedelta(hours=end_horizon_hour) - timedelta(minutes=30)
│ │          )
│ │          if end_horizon_hour == 8:
│ │              end_datetime += timedelta(minutes=30)
│ │  
│ │ +        logger.debug(f"Making weights from {start_datetime_one_weight} to {end_datetime}")
│ │          weights_df = pd.DataFrame(
│ │ -            index=pd.date_range(start=start_datetime, end=end_datetime, freq="30min")
│ │ +            index=pd.date_range(start=start_datetime_one_weight, end=end_datetime, freq="30min")
│ │          )
│ │ +
│ │          # get rid of last timestamp
│ │          weights_df = weights_df[:-1]
│ │  
│ │          assert len(model_names) == len(start_weight)
│ │          assert len(model_names) == len(end_weight)
│ │          for model_name, start_weight, end_weight in zip(model_names, start_weight, end_weight):
│ │              weights_df[model_name] = start_weight + (end_weight - start_weight) * (
│ │ -                weights_df.index - start_datetime
│ │ -            ) / (end_datetime - start_datetime)
│ │ +                weights_df.index - start_datetime_one_weight
│ │ +            ) / (end_datetime - start_datetime_one_weight)
│ │  
│ │          weights_all_df.append(weights_df)
│ │  
│ │      weights_all_df = pd.concat(weights_all_df)
│ │      weights_all_df = weights_all_df[~weights_all_df.index.duplicated(keep="first")]
│ │  
│ │      # only keep from now
│ │ -    weights_all_df = weights_all_df[weights_all_df.index >= start_datetime_now]
│ │ +    logger.debug(weights_all_df)
│ │ +    logger.debug(start_datetime)
│ │ +    weights_all_df = weights_all_df[weights_all_df.index >= start_datetime]
│ │  
│ │      return weights_all_df
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel/read/read.py
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel/read/read.py
│ │┄ Files 1% similar despite different names
│ │ @@ -120,25 +120,27 @@
│ │  
│ │  
│ │  def get_latest_forecast(
│ │      session: Session,
│ │      gsp_id: Optional[int] = None,
│ │      historic: bool = False,
│ │      start_target_time: Optional[datetime] = None,
│ │ +    model_name: Optional[str] = None,
│ │  ) -> ForecastSQL:
│ │      """
│ │      Read forecasts
│ │  
│ │      :param session: database session
│ │      :param gsp_id: optional to gsp id, to filter query on
│ │          If None is given then all are returned.
│ │      :param session: database session
│ │      :param historic: Option to load historic values or not
│ │      :param start_target_time:
│ │          Filter: forecast values target time should be larger than this datetime
│ │ +    :param model_name: Filter: model name
│ │  
│ │      return: List of forecasts objects from database
│ │      """
│ │  
│ │      logger.debug(f"Getting latest forecast for gsp {gsp_id}")
│ │  
│ │      if gsp_id is not None:
│ │ @@ -147,14 +149,15 @@
│ │          gsp_ids = None
│ │  
│ │      forecasts = get_latest_forecast_for_gsps(
│ │          session=session,
│ │          start_target_time=start_target_time,
│ │          historic=historic,
│ │          gsp_ids=gsp_ids,
│ │ +        model_name=model_name,
│ │      )
│ │  
│ │      if forecasts is None:
│ │          return None
│ │      if len(forecasts) == 0:
│ │          return None
│ │  
│ │ @@ -251,31 +254,35 @@
│ │      session: Session,
│ │      start_created_utc: Optional[datetime] = None,
│ │      start_target_time: Optional[datetime] = None,
│ │      end_target_time: Optional[datetime] = None,
│ │      preload_children: Optional[bool] = False,
│ │      historic: bool = False,
│ │      gsp_ids: List[int] = None,
│ │ +    model_name: Optional[int] = None,
│ │  ):
│ │      """
│ │      Read forecasts
│ │  
│ │      :param session: database session
│ │      :param start_created_utc: Filter: forecast creation time should be larger than this datetime
│ │      :param start_target_time:
│ │          Filter: forecast values target time should be larger than this datetime
│ │      :param end_target_time:
│ │          Filter: forecast values target time should be before than this datetime
│ │      :param preload_children: Option to preload children. This is a speed up, if we need them.
│ │      :param historic: Option to load historic values or not
│ │      :param gsp_ids: Option to filter on gsps. If None, then only the lastest forecast is loaded.
│ │ +    :param model_name: Option to filter on model name
│ │  
│ │      :return: List of forecasts objects from database
│ │  
│ │      """
│ │ +    logger.debug(f"Getting latest forecast for gsps {gsp_ids} {historic=} {model_name=}")
│ │ +
│ │      order_by_cols = []
│ │  
│ │      # start main query
│ │      query = session.query(ForecastSQL)
│ │  
│ │      # filter on created_utc
│ │      if start_created_utc is not None:
│ │ @@ -288,14 +295,19 @@
│ │              query = query.distinct(LocationSQL.gsp_id)
│ │          query = query.filter(LocationSQL.gsp_id.in_(gsp_ids))
│ │          order_by_cols.append(LocationSQL.gsp_id)
│ │  
│ │      # filter on historic
│ │      query = query.filter(ForecastSQL.historic == historic)
│ │  
│ │ +    # filter on model name
│ │ +    if model_name is not None:
│ │ +        query = query.join(MLModelSQL)
│ │ +        query = query.filter(MLModelSQL.name == model_name)
│ │ +
│ │      # filter on target time
│ │      if start_target_time is not None:
│ │          query = filter_query_on_target_time(
│ │              query=query,
│ │              start_target_time=start_target_time,
│ │              historic=historic,
│ │              end_target_time=end_target_time,
│ │ @@ -673,15 +685,15 @@
│ │      if get_national:
│ │          nation = get_location(session=session, gsp_id=0, label=national_gb_label)
│ │          locations = [nation] + locations
│ │  
│ │      return locations
│ │  
│ │  
│ │ -def get_model(session: Session, name: str, version: str) -> MLModelSQL:
│ │ +def get_model(session: Session, name: str, version: Optional[str]) -> MLModelSQL:
│ │      """
│ │      Get model object from name and version
│ │  
│ │      :param session: database session
│ │      :param name: name of the model
│ │      :param version: version of the model
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel/read/read_gsp.py
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel/read/read_gsp.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel/read/read_metric.py
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel/read/read_metric.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel/read/read_pv.py
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel/read/read_pv.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel/save/adjust.py
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel/save/adjust.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel/save/save.py
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel/save/save.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel/save/update.py
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel/save/update.py
│ │┄ Files 5% similar despite different names
│ │ @@ -13,42 +13,46 @@
│ │      ForecastSQL,
│ │      ForecastValueLatestSQL,
│ │      ForecastValueSQL,
│ │  )
│ │  from nowcasting_datamodel.read.read import (
│ │      get_latest_forecast,
│ │      get_latest_forecast_for_gsps,
│ │ -    get_model,
│ │  )
│ │  
│ │  logger = logging.getLogger(__name__)
│ │  
│ │  
│ │ -def get_historic_forecast(session: Session, forecast: ForecastSQL) -> ForecastSQL:
│ │ +def get_historic_forecast(
│ │ +    session: Session, forecast: ForecastSQL, model_name: Optional[str] = None
│ │ +) -> ForecastSQL:
│ │      """
│ │      Get historic forecast
│ │  
│ │      :param session:
│ │      :param gsp_id:
│ │ +    :param model_name: the model name to filter on
│ │      :return:
│ │      """
│ │  
│ │      gsp_id = forecast.location.gsp_id
│ │  
│ │ -    forecast_historic = get_latest_forecast(session=session, gsp_id=gsp_id, historic=True)
│ │ +    forecast_historic = get_latest_forecast(
│ │ +        session=session, gsp_id=gsp_id, historic=True, model_name=model_name
│ │ +    )
│ │  
│ │      if forecast_historic is None:
│ │          logger.debug("Could not find a historic forecast, so will make one")
│ │  
│ │          forecast_historic = ForecastSQL(
│ │              historic=True,
│ │              forecast_creation_time=datetime.now(timezone.utc),
│ │              location=forecast.location,
│ │              input_data_last_updated=forecast.input_data_last_updated,
│ │ -            model=get_model(session=session, name="historic", version="all"),
│ │ +            model=forecast.model,
│ │          )
│ │          session.add(forecast_historic)
│ │          session.commit()
│ │      else:
│ │          logger.debug("Found historic forecast")
│ │  
│ │      return forecast_historic
│ │ @@ -75,41 +79,48 @@
│ │          raise ValueError("insert_or_update resulted in an empty update_dict")
│ │  
│ │      stmt = stmt.on_conflict_do_update(index_elements=primary_keys, set_=update_dict)
│ │      session.execute(stmt, rows)
│ │  
│ │  
│ │  def update_forecast_latest(
│ │ -    forecast: ForecastSQL, session: Session, forecast_historic: Optional[ForecastSQL] = None
│ │ +    forecast: ForecastSQL,
│ │ +    session: Session,
│ │ +    forecast_historic: Optional[ForecastSQL] = None,
│ │ +    model_name: Optional[str] = None,
│ │  ):
│ │      """
│ │      Update the forecast_values table
│ │  
│ │      1. Get the Forecast object that is for the latest,
│ │          and don't load children
│ │      2. create ForecastValueLatestSQL objects
│ │      3. upsert them (update and or insert)
│ │  
│ │      :param forecast:
│ │ +    :param model_name: the model name to filter on
│ │      :return:
│ │      """
│ │  
│ │      # 1. get forecast object
│ │      if forecast_historic is None:
│ │ -        forecast_historic = get_historic_forecast(session=session, forecast=forecast)
│ │ +        forecast_historic = get_historic_forecast(
│ │ +            session=session, forecast=forecast, model_name=model_name
│ │ +        )
│ │  
│ │      # 2. create forecast value latest
│ │      forecast_values = []
│ │      for forecast_value in forecast.forecast_values:
│ │          forecast_value_latest = change_forecast_value_to_latest(
│ │              forecast_value,
│ │              gsp_id=forecast.location.gsp_id,
│ │              forecast_id=forecast_historic.id,
│ │              model_id=forecast_historic.model_id,
│ │          )
│ │ +        logger.debug(f"{forecast_historic.model_id=}")
│ │          forecast_values.append(forecast_value_latest.__dict__)
│ │  
│ │      # upsert forecast values
│ │      upsert(session=session, model=ForecastValueLatestSQL, rows=forecast_values)
│ │  
│ │      # update forecast creation time
│ │      forecast_historic.forecast_creation_time = datetime.now(tz=timezone.utc)
│ │ @@ -147,23 +158,25 @@
│ │  
│ │  
│ │  def update_all_forecast_latest(
│ │      forecasts: List[ForecastSQL],
│ │      session: Session,
│ │      update_national: Optional[bool] = True,
│ │      update_gsp: Optional[bool] = True,
│ │ +    model_name: Optional[str] = None,
│ │  ):
│ │      """
│ │      Update all latest forecasts
│ │  
│ │      :param forecasts: The forecasts that should be updated that should be used to update
│ │          the latest table
│ │      :param session: sqlalmacy session
│ │      :param update_national: Optional (default true), to update the national forecast
│ │      :param update_gsp: Optional (default true), to update all the GSP forecasts
│ │ +    :param model_name: Optional (default None), if not None will only update the forecasts
│ │      """
│ │  
│ │      logger.debug("Getting the earliest forecast target time for the first forecast")
│ │      forecast_values_target_times = [f.target_time for f in forecasts[0].forecast_values]
│ │      start_target_time = min(forecast_values_target_times) - timedelta(days=1)
│ │      logger.debug(
│ │          f"First forecast start target time is {min(forecast_values_target_times)} "
│ │ @@ -180,14 +193,15 @@
│ │      logger.debug("Getting all latest forecasts")
│ │      forecasts_historic_all_gsps = get_latest_forecast_for_gsps(
│ │          session=session,
│ │          historic=True,
│ │          preload_children=True,
│ │          gsp_ids=gsp_ids,
│ │          start_target_time=start_target_time,
│ │ +        model_name=model_name,
│ │      )
│ │      # get all these ids, so we only have to load it once
│ │      historic_gsp_ids = [forecast.location.gsp_id for forecast in forecasts_historic_all_gsps]
│ │      logger.debug(f"Found {len(forecasts_historic_all_gsps)} historic forecasts")
│ │  
│ │      logger.debug(f"There are {len(forecasts)} forecasts that we will update")
│ │  
│ │ @@ -216,15 +230,18 @@
│ │              logger.debug(f"Could not find historic, so will be creating one (GSP id{gsp_id})")
│ │          else:
│ │              forecast_historic = forecast_historic[0]
│ │  
│ │              logger.debug(f"Found historic for GSP id {gsp_id}")
│ │  
│ │          update_forecast_latest(
│ │ -            forecast=forecast, session=session, forecast_historic=forecast_historic
│ │ +            forecast=forecast,
│ │ +            session=session,
│ │ +            forecast_historic=forecast_historic,
│ │ +            model_name=model_name,
│ │          )
│ │          session.commit()
│ │  
│ │  
│ │  def get_gsp_ids(include_national: bool = True, include_gsps: bool = True) -> List[int]:
│ │      """
│ │      Get list of gsps ids
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel/utils.py
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel/utils.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel.egg-info/PKG-INFO
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel.egg-info/PKG-INFO
│ │┄ Files 2% similar despite different names
│ │ @@ -1,10 +1,10 @@
│ │  Metadata-Version: 2.1
│ │  Name: nowcasting-datamodel
│ │ -Version: 1.2.3
│ │ +Version: 1.2.4
│ │  Summary: Data Model for the OCF nowcasting project
│ │  Home-page: https://github.com/openclimatefix/nowcasting_datamodel
│ │  Author: Peter Dudfield
│ │  Author-email: peter@openclimatefix.org
│ │  License: MIT
│ │  Keywords: SQL,Datamodel
│ │  Description-Content-Type: text/markdown
│ │   --- nowcasting_datamodel-1.2.3/nowcasting_datamodel.egg-info/SOURCES.txt
│ ├── +++ nowcasting_datamodel-1.2.4/nowcasting_datamodel.egg-info/SOURCES.txt
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/setup.py
│ ├── +++ nowcasting_datamodel-1.2.4/setup.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/tests/test_databaseconnection.py
│ ├── +++ nowcasting_datamodel-1.2.4/tests/test_databaseconnection.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/tests/test_fake.py
│ ├── +++ nowcasting_datamodel-1.2.4/tests/test_fake.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/tests/test_fake_pv.py
│ ├── +++ nowcasting_datamodel-1.2.4/tests/test_fake_pv.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/tests/test_national.py
│ ├── +++ nowcasting_datamodel-1.2.4/tests/test_national.py
│ │┄ Files identical despite different names
│ │   --- nowcasting_datamodel-1.2.3/tests/test_utils.py
│ ├── +++ nowcasting_datamodel-1.2.4/tests/test_utils.py
│ │┄ Files identical despite different names
