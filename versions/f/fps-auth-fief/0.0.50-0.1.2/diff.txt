--- tmp/fps_auth_fief-0.0.50.tar.gz
+++ tmp/fps_auth_fief-0.1.2.tar.gz
│   --- fps_auth_fief-0.0.50.tar
├── +++ fps_auth_fief-0.1.2.tar
│ ├── file list
│ │ @@ -1,11 +1,11 @@
│ │ --rw-r--r--   0        0        0       13 2020-02-02 00:00:00.000000 fps_auth_fief-0.0.50/MANIFEST.in
│ │ --rw-r--r--   0        0        0       23 2020-02-02 00:00:00.000000 fps_auth_fief-0.0.50/fps_auth_fief/__init__.py
│ │ --rw-r--r--   0        0        0     3190 2020-02-02 00:00:00.000000 fps_auth_fief-0.0.50/fps_auth_fief/backend.py
│ │ --rw-r--r--   0        0        0      748 2020-02-02 00:00:00.000000 fps_auth_fief-0.0.50/fps_auth_fief/config.py
│ │ --rw-r--r--   0        0        0      395 2020-02-02 00:00:00.000000 fps_auth_fief-0.0.50/fps_auth_fief/models.py
│ │ --rw-r--r--   0        0        0     2108 2020-02-02 00:00:00.000000 fps_auth_fief-0.0.50/fps_auth_fief/routes.py
│ │ --rw-r--r--   0        0        0     6359 2020-02-02 00:00:00.000000 fps_auth_fief-0.0.50/.gitignore
│ │ --rw-r--r--   0        0        0     2833 2020-02-02 00:00:00.000000 fps_auth_fief-0.0.50/COPYING.md
│ │ --rw-r--r--   0        0        0       71 2020-02-02 00:00:00.000000 fps_auth_fief-0.0.50/README.md
│ │ --rw-r--r--   0        0        0     1148 2020-02-02 00:00:00.000000 fps_auth_fief-0.0.50/pyproject.toml
│ │ --rw-r--r--   0        0        0      529 2020-02-02 00:00:00.000000 fps_auth_fief-0.0.50/PKG-INFO
│ │ +-rw-r--r--   0        0        0       13 2020-02-02 00:00:00.000000 fps_auth_fief-0.1.2/MANIFEST.in
│ │ +-rw-r--r--   0        0        0       22 2020-02-02 00:00:00.000000 fps_auth_fief-0.1.2/fps_auth_fief/__init__.py
│ │ +-rw-r--r--   0        0        0     4008 2020-02-02 00:00:00.000000 fps_auth_fief-0.1.2/fps_auth_fief/backend.py
│ │ +-rw-r--r--   0        0        0      212 2020-02-02 00:00:00.000000 fps_auth_fief-0.1.2/fps_auth_fief/config.py
│ │ +-rw-r--r--   0        0        0      616 2020-02-02 00:00:00.000000 fps_auth_fief-0.1.2/fps_auth_fief/main.py
│ │ +-rw-r--r--   0        0        0     2797 2020-02-02 00:00:00.000000 fps_auth_fief-0.1.2/fps_auth_fief/routes.py
│ │ +-rw-r--r--   0        0        0     6359 2020-02-02 00:00:00.000000 fps_auth_fief-0.1.2/.gitignore
│ │ +-rw-r--r--   0        0        0     2833 2020-02-02 00:00:00.000000 fps_auth_fief-0.1.2/COPYING.md
│ │ +-rw-r--r--   0        0        0       71 2020-02-02 00:00:00.000000 fps_auth_fief-0.1.2/README.md
│ │ +-rw-r--r--   0        0        0      934 2020-02-02 00:00:00.000000 fps_auth_fief-0.1.2/pyproject.toml
│ │ +-rw-r--r--   0        0        0      524 2020-02-02 00:00:00.000000 fps_auth_fief-0.1.2/PKG-INFO
│ │   --- fps_auth_fief-0.0.50/fps_auth_fief/backend.py
│ ├── +++ fps_auth_fief-0.1.2/fps_auth_fief/backend.py
│ │┄ Files 16% similar despite different names
│ │ @@ -1,92 +1,96 @@
│ │  from typing import Any, Dict, List, Optional, Tuple
│ │  
│ │  from fastapi import Depends, HTTPException, Request, Response, WebSocket, status
│ │  from fastapi.security import APIKeyCookie
│ │ -from fief_client import FiefAccessTokenInfo, FiefAsync, FiefUserInfo
│ │ -from fief_client.integrations.fastapi import FiefAuth
│ │ -
│ │ -from .config import get_auth_fief_config
│ │ -from .models import UserRead
│ │ -
│ │ -
│ │ -class CustomFiefAuth(FiefAuth):
│ │ -    client: FiefAsync
│ │ -
│ │ -    async def get_unauthorized_response(self, request: Request, response: Response):
│ │ -        redirect_uri = request.url_for("auth_callback")
│ │ -        auth_url = await self.client.auth_url(redirect_uri, scope=["openid"])
│ │ -        raise HTTPException(
│ │ -            status_code=status.HTTP_307_TEMPORARY_REDIRECT,
│ │ -            headers={"Location": auth_url},
│ │ +from fief_client import FiefAccessTokenInfo, FiefAsync, FiefUserInfo  # type: ignore
│ │ +from fief_client.integrations.fastapi import FiefAuth  # type: ignore
│ │ +from jupyverse_api.auth import User
│ │ +
│ │ +from .config import _AuthFiefConfig
│ │ +
│ │ +
│ │ +class Backend:
│ │ +    def __init__(self, auth_fief_config: _AuthFiefConfig):
│ │ +        class CustomFiefAuth(FiefAuth):
│ │ +            client: FiefAsync
│ │ +
│ │ +            async def get_unauthorized_response(self, request: Request, response: Response):
│ │ +                redirect_uri = str(request.url_for("auth_callback"))
│ │ +                auth_url = await self.client.auth_url(redirect_uri, scope=["openid"])
│ │ +                raise HTTPException(
│ │ +                    status_code=status.HTTP_307_TEMPORARY_REDIRECT,
│ │ +                    headers={"Location": auth_url},
│ │ +                )
│ │ +
│ │ +        self.fief = FiefAsync(
│ │ +            auth_fief_config.base_url,
│ │ +            auth_fief_config.client_id,
│ │ +            auth_fief_config.client_secret,
│ │          )
│ │  
│ │ -
│ │ -auth_fief_config = get_auth_fief_config()
│ │ -
│ │ -fief = FiefAsync(
│ │ -    auth_fief_config.base_url,
│ │ -    auth_fief_config.client_id,
│ │ -    auth_fief_config.client_secret.get_secret_value(),
│ │ -)
│ │ -
│ │ -SESSION_COOKIE_NAME = "fps_auth_fief_user_session"
│ │ -scheme = APIKeyCookie(name=SESSION_COOKIE_NAME, auto_error=False)
│ │ -auth = CustomFiefAuth(fief, scheme)
│ │ -
│ │ -
│ │ -async def update_user(
│ │ -    user: FiefUserInfo = Depends(auth.current_user()),
│ │ -    access_token_info: FiefAccessTokenInfo = Depends(auth.authenticated()),
│ │ -):
│ │ -    async def _(data: Dict[str, Any]) -> FiefUserInfo:
│ │ -        user = await fief.update_profile(access_token_info["access_token"], {"fields": data})
│ │ -        return user
│ │ -
│ │ -    return _
│ │ -
│ │ -
│ │ -def websocket_auth(permissions: Optional[Dict[str, List[str]]] = None):
│ │ -    async def _(
│ │ -        websocket: WebSocket,
│ │ -    ) -> Optional[Tuple[WebSocket, Optional[Dict[str, List[str]]]]]:
│ │ -        accept_websocket = False
│ │ -        checked_permissions: Optional[Dict[str, List[str]]] = None
│ │ -        if SESSION_COOKIE_NAME in websocket._cookies:
│ │ -            access_token = websocket._cookies[SESSION_COOKIE_NAME]
│ │ -            if permissions is None:
│ │ -                accept_websocket = True
│ │ -            else:
│ │ -                checked_permissions = {}
│ │ -                for resource, actions in permissions.items():
│ │ -                    allowed = checked_permissions[resource] = []
│ │ -                    for action in actions:
│ │ -                        try:
│ │ -                            await fief.validate_access_token(
│ │ -                                access_token, required_permissions=[f"{resource}:{action}"]
│ │ -                            )
│ │ -                        except BaseException:
│ │ -                            pass
│ │ -                        else:
│ │ -                            allowed.append(action)
│ │ -                            accept_websocket = True
│ │ -        if accept_websocket:
│ │ -            return websocket, checked_permissions
│ │ -        else:
│ │ -            await websocket.close(code=status.WS_1008_POLICY_VIOLATION)
│ │ -            return None
│ │ -
│ │ -    return _
│ │ -
│ │ -
│ │ -def current_user(permissions=None):
│ │ -    if permissions is not None:
│ │ -        permissions = [
│ │ -            f"{resource}:{action}"
│ │ -            for resource, actions in permissions.items()
│ │ -            for action in actions
│ │ -        ]
│ │ -
│ │ -    async def _(user: FiefUserInfo = Depends(auth.current_user(permissions=permissions))):
│ │ -        return UserRead(**user["fields"])
│ │ -
│ │ -    return _
│ │ +        self.SESSION_COOKIE_NAME = "fps_auth_fief_user_session"
│ │ +        scheme = APIKeyCookie(name=self.SESSION_COOKIE_NAME, auto_error=False)
│ │ +        self.auth = CustomFiefAuth(self.fief, scheme)
│ │ +
│ │ +        async def update_user(
│ │ +            user: FiefUserInfo = Depends(self.auth.current_user()),
│ │ +            access_token_info: FiefAccessTokenInfo = Depends(self.auth.authenticated()),
│ │ +        ):
│ │ +            async def _(data: Dict[str, Any]) -> FiefUserInfo:
│ │ +                user = await self.fief.update_profile(
│ │ +                    access_token_info["access_token"], {"fields": data}
│ │ +                )
│ │ +                return user
│ │ +
│ │ +            return _
│ │ +
│ │ +        def websocket_auth(permissions: Optional[Dict[str, List[str]]] = None):
│ │ +            async def _(
│ │ +                websocket: WebSocket,
│ │ +            ) -> Optional[Tuple[WebSocket, Optional[Dict[str, List[str]]]]]:
│ │ +                accept_websocket = False
│ │ +                checked_permissions: Optional[Dict[str, List[str]]] = None
│ │ +                if self.SESSION_COOKIE_NAME in websocket._cookies:
│ │ +                    access_token = websocket._cookies[self.SESSION_COOKIE_NAME]
│ │ +                    if permissions is None:
│ │ +                        accept_websocket = True
│ │ +                    else:
│ │ +                        checked_permissions = {}
│ │ +                        for resource, actions in permissions.items():
│ │ +                            allowed = checked_permissions[resource] = []
│ │ +                            for action in actions:
│ │ +                                try:
│ │ +                                    await self.fief.validate_access_token(
│ │ +                                        access_token, required_permissions=[f"{resource}:{action}"]
│ │ +                                    )
│ │ +                                except BaseException:
│ │ +                                    pass
│ │ +                                else:
│ │ +                                    allowed.append(action)
│ │ +                                    accept_websocket = True
│ │ +                if accept_websocket:
│ │ +                    return websocket, checked_permissions
│ │ +                else:
│ │ +                    await websocket.close(code=status.WS_1008_POLICY_VIOLATION)
│ │ +                    return None
│ │ +
│ │ +            return _
│ │ +
│ │ +        def current_user(permissions=None):
│ │ +            if permissions is not None:
│ │ +                permissions = [
│ │ +                    f"{resource}:{action}"
│ │ +                    for resource, actions in permissions.items()
│ │ +                    for action in actions
│ │ +                ]
│ │ +
│ │ +            async def _(
│ │ +                user: FiefUserInfo = Depends(self.auth.current_user(permissions=permissions)),
│ │ +            ):
│ │ +                return User(**user["fields"])
│ │ +
│ │ +            return _
│ │ +
│ │ +        self.current_user = current_user
│ │ +        self.update_user = update_user
│ │ +        self.websocket_auth = websocket_auth
│ │   --- fps_auth_fief-0.0.50/fps_auth_fief/routes.py
│ ├── +++ fps_auth_fief-0.1.2/fps_auth_fief/routes.py
│ │┄ Files 20% similar despite different names
│ │ @@ -1,62 +1,73 @@
│ │  import json
│ │  from typing import Dict, List
│ │  
│ │  from fastapi import APIRouter, Depends, Query, Request, Response
│ │  from fastapi.responses import RedirectResponse
│ │ -from fief_client import FiefAccessTokenInfo
│ │ -from fps.hooks import register_router
│ │ +from fief_client import FiefAccessTokenInfo  # type: ignore
│ │ +from jupyverse_api import Router
│ │ +from jupyverse_api.app import App
│ │ +from jupyverse_api.auth import Auth, User
│ │ +
│ │ +from .backend import Backend
│ │ +from .config import _AuthFiefConfig
│ │ +
│ │ +
│ │ +class _AuthFief(Backend, Auth, Router):
│ │ +    def __init__(
│ │ +        self,
│ │ +        app: App,
│ │ +        auth_fief_config: _AuthFiefConfig,
│ │ +    ) -> None:
│ │ +        Router.__init__(self, app)
│ │ +        Backend.__init__(self, auth_fief_config)
│ │ +
│ │ +        router = APIRouter()
│ │ +
│ │ +        @router.get("/auth-callback", name="auth_callback")
│ │ +        async def auth_callback(request: Request, response: Response, code: str = Query(...)):
│ │ +            redirect_uri = str(request.url_for("auth_callback"))
│ │ +            tokens, _ = await self.fief.auth_callback(code, redirect_uri)
│ │ +
│ │ +            response = RedirectResponse(request.url_for("root"))
│ │ +            response.set_cookie(
│ │ +                self.SESSION_COOKIE_NAME,
│ │ +                tokens["access_token"],
│ │ +                max_age=tokens["expires_in"],
│ │ +                httponly=True,
│ │ +                secure=False,
│ │ +            )
│ │ +
│ │ +            return response
│ │ +
│ │ +        @router.get("/api/me")
│ │ +        async def get_api_me(
│ │ +            request: Request,
│ │ +            user: User = Depends(self.current_user()),
│ │ +            access_token_info: FiefAccessTokenInfo = Depends(self.auth.authenticated()),
│ │ +        ):
│ │ +            checked_permissions: Dict[str, List[str]] = {}
│ │ +            permissions = json.loads(
│ │ +                dict(request.query_params).get("permissions", "{}").replace("'", '"')
│ │ +            )
│ │ +            if permissions:
│ │ +                user_permissions: Dict[str, List[str]] = {}
│ │ +                for permission in access_token_info["permissions"]:
│ │ +                    resource, action = permission.split(":")
│ │ +                    if resource not in user_permissions:
│ │ +                        user_permissions[resource] = []
│ │ +                    user_permissions[resource].append(action)
│ │ +                for resource, actions in permissions.items():
│ │ +                    user_resource_permissions = user_permissions.get(resource, [])
│ │ +                    allowed = checked_permissions[resource] = []
│ │ +                    for action in actions:
│ │ +                        if action in user_resource_permissions:
│ │ +                            allowed.append(action)
│ │ +
│ │ +            keys = ["username", "name", "display_name", "initials", "avatar_url", "color"]
│ │ +            identity = {k: getattr(user, k) for k in keys}
│ │ +            return {
│ │ +                "identity": identity,
│ │ +                "permissions": checked_permissions,
│ │ +            }
│ │  
│ │ -from .backend import SESSION_COOKIE_NAME, auth, current_user, fief
│ │ -from .models import UserRead
│ │ -
│ │ -router = APIRouter()
│ │ -
│ │ -
│ │ -@router.get("/auth-callback", name="auth_callback")
│ │ -async def auth_callback(request: Request, response: Response, code: str = Query(...)):
│ │ -    redirect_uri = request.url_for("auth_callback")
│ │ -    tokens, _ = await fief.auth_callback(code, redirect_uri)
│ │ -
│ │ -    response = RedirectResponse(request.url_for("root"))
│ │ -    response.set_cookie(
│ │ -        SESSION_COOKIE_NAME,
│ │ -        tokens["access_token"],
│ │ -        max_age=tokens["expires_in"],
│ │ -        httponly=True,
│ │ -        secure=False,
│ │ -    )
│ │ -
│ │ -    return response
│ │ -
│ │ -
│ │ -@router.get("/api/me")
│ │ -async def get_api_me(
│ │ -    request: Request,
│ │ -    user: UserRead = Depends(current_user()),
│ │ -    access_token_info: FiefAccessTokenInfo = Depends(auth.authenticated()),
│ │ -):
│ │ -    checked_permissions: Dict[str, List[str]] = {}
│ │ -    permissions = json.loads(dict(request.query_params).get("permissions", "{}").replace("'", '"'))
│ │ -    if permissions:
│ │ -        user_permissions = {}
│ │ -        for permission in access_token_info["permissions"]:
│ │ -            resource, action = permission.split(":")
│ │ -            if resource not in user_permissions.keys():
│ │ -                user_permissions[resource] = []
│ │ -            user_permissions[resource].append(action)
│ │ -        for resource, actions in permissions.items():
│ │ -            user_resource_permissions = user_permissions.get(resource, [])
│ │ -            allowed = checked_permissions[resource] = []
│ │ -            for action in actions:
│ │ -                if action in user_resource_permissions:
│ │ -                    allowed.append(action)
│ │ -
│ │ -    keys = ["username", "name", "display_name", "initials", "avatar_url", "color"]
│ │ -    identity = {k: getattr(user, k) for k in keys}
│ │ -    return {
│ │ -        "identity": identity,
│ │ -        "permissions": checked_permissions,
│ │ -    }
│ │ -
│ │ -
│ │ -r = register_router(router)
│ │ +        self.include_router(router)
│ │   --- fps_auth_fief-0.0.50/.gitignore
│ ├── +++ fps_auth_fief-0.1.2/.gitignore
│ │┄ Files identical despite different names
│ │   --- fps_auth_fief-0.0.50/COPYING.md
│ ├── +++ fps_auth_fief-0.1.2/COPYING.md
│ │┄ Files identical despite different names
│ │   --- fps_auth_fief-0.0.50/PKG-INFO
│ ├── +++ fps_auth_fief-0.1.2/PKG-INFO
│ │┄ Files 6% similar despite different names
│ │ @@ -1,17 +1,17 @@
│ │  Metadata-Version: 2.1
│ │  Name: fps_auth_fief
│ │ -Version: 0.0.50
│ │ +Version: 0.1.2
│ │  Summary: An FPS plugin for the authentication API, using Fief
│ │  Project-URL: Homepage, https://jupyter.org
│ │  Author-email: Jupyter Development Team <jupyter@googlegroups.com>
│ │  License: BSD 3-Clause License
│ │  License-File: COPYING.md
│ │ -Keywords: fastapi,jupyter,pluggy,plugins,server
│ │ +Keywords: fastapi,jupyter,plugins,server
│ │  Requires-Python: >=3.8
│ │  Requires-Dist: fief-client[fastapi]
│ │ -Requires-Dist: fps>=0.0.8
│ │ +Requires-Dist: jupyverse-api
│ │  Description-Content-Type: text/markdown
│ │  
│ │  # fps-auth-fief
│ │  
│ │  An FPS plugin for the authentication API, using Fief.
