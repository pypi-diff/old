--- tmp/fps_auth-0.0.50.tar.gz
+++ tmp/fps_auth-0.1.2.tar.gz
│   --- fps_auth-0.0.50.tar
├── +++ fps_auth-0.1.2.tar
│ ├── file list
│ │ @@ -1,13 +1,14 @@
│ │ --rw-r--r--   0        0        0       13 2020-02-02 00:00:00.000000 fps_auth-0.0.50/MANIFEST.in
│ │ --rw-r--r--   0        0        0       23 2020-02-02 00:00:00.000000 fps_auth-0.0.50/fps_auth/__init__.py
│ │ --rw-r--r--   0        0        0     9756 2020-02-02 00:00:00.000000 fps_auth-0.0.50/fps_auth/backends.py
│ │ --rw-r--r--   0        0        0      859 2020-02-02 00:00:00.000000 fps_auth-0.0.50/fps_auth/config.py
│ │ --rw-r--r--   0        0        0     2759 2020-02-02 00:00:00.000000 fps_auth-0.0.50/fps_auth/db.py
│ │ --rw-r--r--   0        0        0     2466 2020-02-02 00:00:00.000000 fps_auth-0.0.50/fps_auth/fixtures.py
│ │ --rw-r--r--   0        0        0      674 2020-02-02 00:00:00.000000 fps_auth-0.0.50/fps_auth/models.py
│ │ --rw-r--r--   0        0        0     5465 2020-02-02 00:00:00.000000 fps_auth-0.0.50/fps_auth/routes.py
│ │ --rw-r--r--   0        0        0     6359 2020-02-02 00:00:00.000000 fps_auth-0.0.50/.gitignore
│ │ --rw-r--r--   0        0        0     2833 2020-02-02 00:00:00.000000 fps_auth-0.0.50/COPYING.md
│ │ --rw-r--r--   0        0        0       54 2020-02-02 00:00:00.000000 fps_auth-0.0.50/README.md
│ │ --rw-r--r--   0        0        0     1195 2020-02-02 00:00:00.000000 fps_auth-0.0.50/pyproject.toml
│ │ --rw-r--r--   0        0        0      633 2020-02-02 00:00:00.000000 fps_auth-0.0.50/PKG-INFO
│ │ +-rw-r--r--   0        0        0       13 2020-02-02 00:00:00.000000 fps_auth-0.1.2/MANIFEST.in
│ │ +-rw-r--r--   0        0        0       22 2020-02-02 00:00:00.000000 fps_auth-0.1.2/fps_auth/__init__.py
│ │ +-rw-r--r--   0        0        0    10954 2020-02-02 00:00:00.000000 fps_auth-0.1.2/fps_auth/backends.py
│ │ +-rw-r--r--   0        0        0      542 2020-02-02 00:00:00.000000 fps_auth-0.1.2/fps_auth/config.py
│ │ +-rw-r--r--   0        0        0     3281 2020-02-02 00:00:00.000000 fps_auth-0.1.2/fps_auth/db.py
│ │ +-rw-r--r--   0        0        0     2229 2020-02-02 00:00:00.000000 fps_auth-0.1.2/fps_auth/main.py
│ │ +-rw-r--r--   0        0        0      406 2020-02-02 00:00:00.000000 fps_auth-0.1.2/fps_auth/models.py
│ │ +-rw-r--r--   0        0        0        0 2020-02-02 00:00:00.000000 fps_auth-0.1.2/fps_auth/py.typed
│ │ +-rw-r--r--   0        0        0     5837 2020-02-02 00:00:00.000000 fps_auth-0.1.2/fps_auth/routes.py
│ │ +-rw-r--r--   0        0        0     6359 2020-02-02 00:00:00.000000 fps_auth-0.1.2/.gitignore
│ │ +-rw-r--r--   0        0        0     2833 2020-02-02 00:00:00.000000 fps_auth-0.1.2/COPYING.md
│ │ +-rw-r--r--   0        0        0       54 2020-02-02 00:00:00.000000 fps_auth-0.1.2/README.md
│ │ +-rw-r--r--   0        0        0      950 2020-02-02 00:00:00.000000 fps_auth-0.1.2/pyproject.toml
│ │ +-rw-r--r--   0        0        0      570 2020-02-02 00:00:00.000000 fps_auth-0.1.2/PKG-INFO
│ │   --- fps_auth-0.0.50/fps_auth/backends.py
│ ├── +++ fps_auth-0.1.2/fps_auth/backends.py
│ │┄ Files 13% similar despite different names
│ │ @@ -1,268 +1,285 @@
│ │ +import logging
│ │  import uuid
│ │ +from dataclasses import dataclass
│ │  from typing import Any, Dict, Generic, List, Optional, Tuple
│ │  
│ │  import httpx
│ │  from fastapi import Depends, HTTPException, Response, WebSocket, status
│ │ -from fastapi_users import (  # type: ignore
│ │ +from fastapi_users import (
│ │      BaseUserManager,
│ │      FastAPIUsers,
│ │      UUIDIDMixin,
│ │      models,
│ │  )
│ │  from fastapi_users.authentication import (
│ │      AuthenticationBackend,
│ │      CookieTransport,
│ │      JWTStrategy,
│ │  )
│ │  from fastapi_users.authentication.strategy.base import Strategy
│ │  from fastapi_users.authentication.transport.base import Transport
│ │  from fastapi_users.db import SQLAlchemyUserDatabase
│ │ -from fps.exceptions import RedirectException  # type: ignore
│ │ -from fps.logging import get_configured_logger  # type: ignore
│ │ -from fps_lab.config import get_lab_config  # type: ignore
│ │ -from httpx_oauth.clients.github import GitHubOAuth2  # type: ignore
│ │ +from httpx_oauth.clients.github import GitHubOAuth2
│ │ +from jupyverse_api.exceptions import RedirectException
│ │ +from jupyverse_api.frontend import FrontendConfig
│ │  from starlette.requests import Request
│ │  
│ │ -from .config import get_auth_config
│ │ -from .db import User, get_user_db, secret
│ │ +from .config import _AuthConfig
│ │ +from .db import User
│ │  from .models import UserCreate, UserRead
│ │  
│ │ -logger = get_configured_logger("auth")
│ │  
│ │ +logger = logging.getLogger("auth")
│ │  
│ │ -class NoAuthTransport(Transport):
│ │ -    scheme = None  # type: ignore
│ │ -
│ │ -    async def get_login_response(self, token: str, response: Response):
│ │ -        pass
│ │ -
│ │ -    async def get_logout_response(self, response: Response):
│ │ -        pass
│ │ -
│ │ -    @staticmethod
│ │ -    def get_openapi_login_responses_success():
│ │ -        pass
│ │ -
│ │ -    @staticmethod
│ │ -    def get_openapi_logout_responses_success():
│ │ -        pass
│ │ -
│ │ -
│ │ -class NoAuthStrategy(Strategy, Generic[models.UP, models.ID]):
│ │ -    async def read_token(
│ │ -        self, token: Optional[str], user_manager: BaseUserManager[models.UP, models.ID]
│ │ -    ) -> Optional[models.UP]:
│ │ -        active_user = await user_manager.user_db.get_by_email(get_auth_config().global_email)
│ │ -        return active_user
│ │ -
│ │ -    async def write_token(self, user: models.UP):
│ │ -        pass
│ │ -
│ │ -    async def destroy_token(self, token: str, user: models.UP):
│ │ -        pass
│ │ -
│ │ -
│ │ -class GitHubTransport(CookieTransport):
│ │ -    async def get_login_response(self, token: str, response: Response):
│ │ -        await super().get_login_response(token, response)
│ │ -        response.status_code = status.HTTP_302_FOUND
│ │ -        response.headers["Location"] = "/lab"
│ │ -
│ │ -
│ │ -noauth_transport = NoAuthTransport()
│ │ -cookie_transport = CookieTransport(cookie_secure=get_auth_config().cookie_secure)
│ │ -github_transport = GitHubTransport()
│ │ -
│ │ -
│ │ -def get_noauth_strategy() -> NoAuthStrategy:
│ │ -    return NoAuthStrategy()
│ │ -
│ │ -
│ │ -def get_jwt_strategy() -> JWTStrategy:
│ │ -    return JWTStrategy(secret=secret, lifetime_seconds=None)  # type: ignore
│ │  
│ │ +@dataclass
│ │ +class Res:
│ │ +    cookie_authentication: Any
│ │ +    current_user: Any
│ │ +    update_user: Any
│ │ +    fapi_users: Any
│ │ +    get_user_manager: Any
│ │ +    github_authentication: Any
│ │ +    github_cookie_authentication: Any
│ │ +    websocket_auth: Any
│ │ +
│ │ +
│ │ +def get_backend(auth_config: _AuthConfig, frontend_config: FrontendConfig, db) -> Res:
│ │ +    class NoAuthScheme:
│ │ +        def __call__(self):
│ │ +            return "noauth"
│ │ +
│ │ +    class NoAuthTransport(Transport):
│ │ +        scheme = NoAuthScheme()  # type: ignore
│ │ +
│ │ +        async def get_login_response(self, token: str, response: Response):
│ │ +            pass
│ │ +
│ │ +        async def get_logout_response(self, response: Response):
│ │ +            pass
│ │ +
│ │ +        @staticmethod
│ │ +        def get_openapi_login_responses_success():
│ │ +            pass
│ │ +
│ │ +        @staticmethod
│ │ +        def get_openapi_logout_responses_success():
│ │ +            pass
│ │ +
│ │ +    class NoAuthStrategy(Strategy, Generic[models.UP, models.ID]):
│ │ +        async def read_token(
│ │ +            self, token: Optional[str], user_manager: BaseUserManager[models.UP, models.ID]
│ │ +        ) -> Optional[models.UP]:
│ │ +            active_user = await user_manager.user_db.get_by_email(auth_config.global_email)
│ │ +            return active_user
│ │ +
│ │ +        async def write_token(self, user: models.UP):
│ │ +            pass
│ │ +
│ │ +        async def destroy_token(self, token: str, user: models.UP):
│ │ +            pass
│ │ +
│ │ +    class GitHubTransport(CookieTransport):
│ │ +        async def get_login_response(self, token: str, response: Response):
│ │ +            await super().get_login_response(token, response)
│ │ +            response.status_code = status.HTTP_302_FOUND
│ │ +            response.headers["Location"] = "/lab"
│ │ +
│ │ +    def get_noauth_strategy() -> NoAuthStrategy:
│ │ +        return NoAuthStrategy()
│ │ +
│ │ +    def get_jwt_strategy() -> JWTStrategy:
│ │ +        return JWTStrategy(secret=db.secret, lifetime_seconds=None)
│ │ +
│ │ +    noauth_authentication = AuthenticationBackend(
│ │ +        name="noauth",
│ │ +        transport=NoAuthTransport(),
│ │ +        get_strategy=get_noauth_strategy,
│ │ +    )
│ │  
│ │ -noauth_authentication = AuthenticationBackend(
│ │ -    name="noauth",
│ │ -    transport=noauth_transport,
│ │ -    get_strategy=get_noauth_strategy,
│ │ -)
│ │ -cookie_authentication = AuthenticationBackend(
│ │ -    name="cookie",
│ │ -    transport=cookie_transport,
│ │ -    get_strategy=get_jwt_strategy,
│ │ -)
│ │ -github_cookie_authentication = AuthenticationBackend(
│ │ -    name="github",
│ │ -    transport=github_transport,
│ │ -    get_strategy=get_jwt_strategy,
│ │ -)
│ │ -github_authentication = GitHubOAuth2(
│ │ -    get_auth_config().client_id, get_auth_config().client_secret.get_secret_value()
│ │ -)
│ │ +    cookie_authentication = AuthenticationBackend(
│ │ +        name="cookie",
│ │ +        transport=CookieTransport(cookie_secure=auth_config.cookie_secure),
│ │ +        get_strategy=get_jwt_strategy,
│ │ +    )
│ │  
│ │ +    github_cookie_authentication = AuthenticationBackend(
│ │ +        name="github",
│ │ +        transport=GitHubTransport(),
│ │ +        get_strategy=get_jwt_strategy,
│ │ +    )
│ │  
│ │ -class UserManager(UUIDIDMixin, BaseUserManager[User, uuid.UUID]):
│ │ -    async def on_after_register(self, user: User, request: Optional[Request] = None):
│ │ -        for oauth_account in user.oauth_accounts:
│ │ -            if oauth_account.oauth_name == "github":
│ │ -                async with httpx.AsyncClient() as client:
│ │ -                    r = (
│ │ -                        await client.get(f"https://api.github.com/user/{oauth_account.account_id}")
│ │ -                    ).json()
│ │ -
│ │ -                await self.user_db.update(
│ │ -                    user,
│ │ -                    dict(
│ │ -                        anonymous=False,
│ │ -                        username=r["login"],
│ │ -                        color=None,
│ │ -                        avatar_url=r["avatar_url"],
│ │ -                        is_active=True,
│ │ -                    ),
│ │ -                )
│ │ -
│ │ -
│ │ -async def get_user_manager(user_db: SQLAlchemyUserDatabase = Depends(get_user_db)):
│ │ -    yield UserManager(user_db)
│ │ -
│ │ -
│ │ -async def get_enabled_backends(
│ │ -    auth_config=Depends(get_auth_config), lab_config=Depends(get_lab_config)
│ │ -):
│ │ -    if auth_config.mode == "noauth" and not lab_config.collaborative:
│ │ -        return [noauth_authentication, github_cookie_authentication]
│ │ -    else:
│ │ -        return [cookie_authentication, github_cookie_authentication]
│ │ -
│ │ -
│ │ -fapi_users = FastAPIUsers[User, uuid.UUID](
│ │ -    get_user_manager,
│ │ -    [noauth_authentication, cookie_authentication, github_cookie_authentication],
│ │ -)
│ │ +    github_authentication = GitHubOAuth2(auth_config.client_id, auth_config.client_secret)
│ │  
│ │ +    class UserManager(UUIDIDMixin, BaseUserManager[User, uuid.UUID]):
│ │ +        async def on_after_register(self, user: User, request: Optional[Request] = None):
│ │ +            for oauth_account in user.oauth_accounts:
│ │ +                if oauth_account.oauth_name == "github":
│ │ +                    async with httpx.AsyncClient() as client:
│ │ +                        r = (
│ │ +                            await client.get(
│ │ +                                f"https://api.github.com/user/{oauth_account.account_id}"
│ │ +                            )
│ │ +                        ).json()
│ │ +
│ │ +                    await self.user_db.update(
│ │ +                        user,
│ │ +                        dict(
│ │ +                            anonymous=False,
│ │ +                            username=r["login"],
│ │ +                            color=None,
│ │ +                            avatar_url=r["avatar_url"],
│ │ +                            is_active=True,
│ │ +                        ),
│ │ +                    )
│ │ +
│ │ +    async def get_user_manager(user_db: SQLAlchemyUserDatabase = Depends(db.get_user_db)):
│ │ +        yield UserManager(user_db)
│ │ +
│ │ +    def get_enabled_backends():
│ │ +        if auth_config.mode == "noauth" and not frontend_config.collaborative:
│ │ +            res = [noauth_authentication, github_cookie_authentication]
│ │ +        else:
│ │ +            res = [cookie_authentication, github_cookie_authentication]
│ │ +        return res
│ │  
│ │ -async def create_guest(user_manager, auth_config):
│ │ -    # workspace and settings are copied from global user
│ │ -    # but this is a new user
│ │ -    global_user = await user_manager.get_by_email(auth_config.global_email)
│ │ -    user_id = str(uuid.uuid4())
│ │ -    guest = dict(
│ │ -        anonymous=True,
│ │ -        email=f"{user_id}@jupyter.com",
│ │ -        username=f"{user_id}@jupyter.com",
│ │ -        password="",
│ │ -        workspace=global_user.workspace,
│ │ -        settings=global_user.settings,
│ │ -        permissions={},
│ │ +    fapi_users = FastAPIUsers[User, uuid.UUID](
│ │ +        get_user_manager,
│ │ +        [
│ │ +            noauth_authentication,
│ │ +            cookie_authentication,
│ │ +            github_cookie_authentication,
│ │ +        ],
│ │      )
│ │ -    return await user_manager.create(UserCreate(**guest))
│ │  
│ │ -
│ │ -def current_user(permissions: Optional[Dict[str, List[str]]] = None):
│ │ -    async def _(
│ │ -        response: Response,
│ │ -        token: Optional[str] = None,
│ │ -        user: Optional[User] = Depends(
│ │ -            fapi_users.current_user(optional=True, get_enabled_backends=get_enabled_backends)
│ │ -        ),
│ │ -        user_manager: UserManager = Depends(get_user_manager),
│ │ -        auth_config=Depends(get_auth_config),
│ │ -        lab_config=Depends(get_lab_config),
│ │ -    ):
│ │ -        if auth_config.mode == "user":
│ │ -            # "user" authentication: check authorization
│ │ -            if user and permissions:
│ │ -                for resource, actions in permissions.items():
│ │ -                    user_actions_for_resource = user.permissions.get(resource, [])
│ │ -                    if not all([a in user_actions_for_resource for a in actions]):
│ │ -                        user = None
│ │ -                        break
│ │ -        else:
│ │ -            # "noauth" or "token" authentication
│ │ -            if lab_config.collaborative:
│ │ -                if not user and auth_config.mode == "noauth":
│ │ -                    user = await create_guest(user_manager, auth_config)
│ │ -                    await cookie_authentication.login(get_jwt_strategy(), user, response)
│ │ -
│ │ -                elif not user and auth_config.mode == "token":
│ │ -                    global_user = await user_manager.get_by_email(auth_config.global_email)
│ │ -                    if global_user and global_user.username == token:
│ │ -                        user = await create_guest(user_manager, auth_config)
│ │ -                        await cookie_authentication.login(get_jwt_strategy(), user, response)
│ │ +    async def create_guest(user_manager):
│ │ +        # workspace and settings are copied from global user
│ │ +        # but this is a new user
│ │ +        global_user = await user_manager.get_by_email(auth_config.global_email)
│ │ +        user_id = str(uuid.uuid4())
│ │ +        guest = dict(
│ │ +            anonymous=True,
│ │ +            email=f"{user_id}@jupyter.com",
│ │ +            username=f"{user_id}@jupyter.com",
│ │ +            password="",
│ │ +            workspace=global_user.workspace,
│ │ +            settings=global_user.settings,
│ │ +            permissions={},
│ │ +        )
│ │ +        return await user_manager.create(UserCreate(**guest))
│ │ +
│ │ +    def current_user(permissions: Optional[Dict[str, List[str]]] = None):
│ │ +        async def _(
│ │ +            response: Response,
│ │ +            token: Optional[str] = None,
│ │ +            user: Optional[User] = Depends(
│ │ +                fapi_users.current_user(optional=True, get_enabled_backends=get_enabled_backends)
│ │ +            ),
│ │ +            user_manager: BaseUserManager[User, models.ID] = Depends(get_user_manager),
│ │ +        ):
│ │ +            if auth_config.mode == "user":
│ │ +                # "user" authentication: check authorization
│ │ +                if user and permissions:
│ │ +                    for resource, actions in permissions.items():
│ │ +                        user_actions_for_resource = user.permissions.get(resource, [])
│ │ +                        if not all([a in user_actions_for_resource for a in actions]):
│ │ +                            user = None
│ │ +                            break
│ │              else:
│ │ -                if auth_config.mode == "token":
│ │ -                    global_user = await user_manager.get_by_email(auth_config.global_email)
│ │ -                    if global_user and global_user.username == token:
│ │ -                        user = global_user
│ │ +                # "noauth" or "token" authentication
│ │ +                if frontend_config.collaborative:
│ │ +                    if not user and auth_config.mode == "noauth":
│ │ +                        user = await create_guest(user_manager)
│ │                          await cookie_authentication.login(get_jwt_strategy(), user, response)
│ │  
│ │ -        if user:
│ │ -            return user
│ │ +                    elif not user and auth_config.mode == "token":
│ │ +                        global_user = await user_manager.get_by_email(auth_config.global_email)
│ │ +                        if global_user and global_user.username == token:
│ │ +                            user = await create_guest(user_manager)
│ │ +                            await cookie_authentication.login(get_jwt_strategy(), user, response)
│ │ +                else:
│ │ +                    if auth_config.mode == "token":
│ │ +                        global_user = await user_manager.get_by_email(auth_config.global_email)
│ │ +                        if global_user and global_user.username == token:
│ │ +                            user = global_user
│ │ +                            await cookie_authentication.login(get_jwt_strategy(), user, response)
│ │  
│ │ -        elif auth_config.login_url:
│ │ -            raise RedirectException(auth_config.login_url)
│ │ +            if user:
│ │ +                return user
│ │  
│ │ -        else:
│ │ -            raise HTTPException(status_code=status.HTTP_403_FORBIDDEN)
│ │ +            elif auth_config.login_url:
│ │ +                raise RedirectException(auth_config.login_url)
│ │  
│ │ -    return _
│ │ +            else:
│ │ +                raise HTTPException(status_code=status.HTTP_403_FORBIDDEN)
│ │  
│ │ +        return _
│ │  
│ │ -def websocket_auth(permissions: Optional[Dict[str, List[str]]] = None):
│ │ -    """
│ │ -    A function returning a dependency for the WebSocket connection.
│ │ -
│ │ -    :param permissions: the permissions the user should be granted access to. The user should have
│ │ -    access to at least one of them for the WebSocket to be opened.
│ │ -    :returns: a dependency for the WebSocket connection. The dependency returns a tuple consisting
│ │ -    of the websocket and the checked user permissions if the websocket is accepted, None otherwise.
│ │ -    """
│ │ -
│ │ -    async def _(
│ │ -        websocket: WebSocket,
│ │ -        auth_config=Depends(get_auth_config),
│ │ -        user_manager: UserManager = Depends(get_user_manager),
│ │ -    ) -> Optional[Tuple[WebSocket, Optional[Dict[str, List[str]]]]]:
│ │ -        accept_websocket = False
│ │ -        checked_permissions: Optional[Dict[str, List[str]]] = None
│ │ -        if auth_config.mode == "noauth":
│ │ -            accept_websocket = True
│ │ -        elif "fastapiusersauth" in websocket._cookies:
│ │ -            token = websocket._cookies["fastapiusersauth"]
│ │ -            user = await get_jwt_strategy().read_token(token, user_manager)
│ │ -            if user:
│ │ -                if auth_config.mode == "user":
│ │ -                    # "user" authentication: check authorization
│ │ -                    if permissions is None:
│ │ -                        accept_websocket = True
│ │ +    def websocket_auth(permissions: Optional[Dict[str, List[str]]] = None):
│ │ +        """
│ │ +        A function returning a dependency for the WebSocket connection.
│ │ +
│ │ +        :param permissions: the permissions the user should be granted access to. The user should
│ │ +        have access to at least one of them for the WebSocket to be opened.
│ │ +        :returns: a dependency for the WebSocket connection. The dependency returns a tuple
│ │ +        consisting of the websocket and the checked user permissions if the websocket is accepted,
│ │ +        None otherwise.
│ │ +        """
│ │ +
│ │ +        async def _(
│ │ +            websocket: WebSocket,
│ │ +            user_manager: BaseUserManager[models.UP, models.ID] = Depends(get_user_manager),
│ │ +        ) -> Optional[Tuple[WebSocket, Optional[Dict[str, List[str]]]]]:
│ │ +            accept_websocket = False
│ │ +            checked_permissions: Optional[Dict[str, List[str]]] = None
│ │ +            if auth_config.mode == "noauth":
│ │ +                accept_websocket = True
│ │ +            elif "fastapiusersauth" in websocket._cookies:
│ │ +                token = websocket._cookies["fastapiusersauth"]
│ │ +                user = await get_jwt_strategy().read_token(token, user_manager)
│ │ +                if user:
│ │ +                    if auth_config.mode == "user":
│ │ +                        # "user" authentication: check authorization
│ │ +                        if permissions is None:
│ │ +                            accept_websocket = True
│ │ +                        else:
│ │ +                            checked_permissions = {}
│ │ +                            for resource, actions in permissions.items():
│ │ +                                user_actions_for_resource = user.permissions.get(resource)
│ │ +                                if user_actions_for_resource is None:
│ │ +                                    continue
│ │ +                                allowed = checked_permissions[resource] = []
│ │ +                                for action in actions:
│ │ +                                    if action in user_actions_for_resource:
│ │ +                                        allowed.append(action)
│ │ +                                        accept_websocket = True
│ │                      else:
│ │ -                        checked_permissions = {}
│ │ -                        for resource, actions in permissions.items():
│ │ -                            user_actions_for_resource = user.permissions.get(resource)
│ │ -                            if user_actions_for_resource is None:
│ │ -                                continue
│ │ -                            allowed = checked_permissions[resource] = []
│ │ -                            for action in actions:
│ │ -                                if action in user_actions_for_resource:
│ │ -                                    allowed.append(action)
│ │ -                                    accept_websocket = True
│ │ -                else:
│ │ -                    accept_websocket = True
│ │ -        if accept_websocket:
│ │ -            return websocket, checked_permissions
│ │ -        else:
│ │ -            await websocket.close(code=status.WS_1008_POLICY_VIOLATION)
│ │ -            return None
│ │ +                        accept_websocket = True
│ │ +            if accept_websocket:
│ │ +                return websocket, checked_permissions
│ │ +            else:
│ │ +                await websocket.close(code=status.WS_1008_POLICY_VIOLATION)
│ │ +                return None
│ │  
│ │ -    return _
│ │ +        return _
│ │  
│ │ +    async def update_user(
│ │ +        user: UserRead = Depends(current_user()),
│ │ +        user_db: SQLAlchemyUserDatabase = Depends(db.get_user_db),
│ │ +    ):
│ │ +        async def _(data: Dict[str, Any]) -> UserRead:
│ │ +            await user_db.update(user, data)
│ │ +            return user
│ │  
│ │ -async def update_user(
│ │ -    user: UserRead = Depends(current_user()), user_db: SQLAlchemyUserDatabase = Depends(get_user_db)
│ │ -):
│ │ -    async def _(data: Dict[str, Any]) -> UserRead:
│ │ -        await user_db.update(user, data)
│ │ -        return user
│ │ +        return _
│ │  
│ │ -    return _
│ │ +    return Res(
│ │ +        cookie_authentication=cookie_authentication,
│ │ +        current_user=current_user,
│ │ +        update_user=update_user,
│ │ +        fapi_users=fapi_users,
│ │ +        get_user_manager=get_user_manager,
│ │ +        github_authentication=github_authentication,
│ │ +        github_cookie_authentication=github_cookie_authentication,
│ │ +        websocket_auth=websocket_auth,
│ │ +    )
│ │   --- fps_auth-0.0.50/fps_auth/db.py
│ ├── +++ fps_auth-0.1.2/fps_auth/db.py
│ │┄ Files 20% similar despite different names
│ │ @@ -1,48 +1,29 @@
│ │ +import logging
│ │  import secrets
│ │ +from dataclasses import dataclass
│ │  from pathlib import Path
│ │ -from typing import AsyncGenerator, List
│ │ +from typing import Any, AsyncGenerator, List
│ │  
│ │  from fastapi import Depends
│ │ -from fastapi_users.db import SQLAlchemyBaseOAuthAccountTableUUID  # type: ignore
│ │ -from fastapi_users.db import (  # type: ignore
│ │ +from fastapi_users.db import SQLAlchemyBaseOAuthAccountTableUUID
│ │ +from fastapi_users.db import (
│ │      SQLAlchemyBaseUserTableUUID,
│ │      SQLAlchemyUserDatabase,
│ │  )
│ │ -from fps.config import get_config  # type: ignore
│ │  from sqlalchemy import JSON, Boolean, Column, String, Text  # type: ignore
│ │  from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine  # type: ignore
│ │  from sqlalchemy.ext.declarative import DeclarativeMeta, declarative_base  # type: ignore
│ │  from sqlalchemy.orm import relationship, sessionmaker  # type: ignore
│ │  
│ │ -from .config import AuthConfig
│ │ +from .config import _AuthConfig
│ │  
│ │ -auth_config = get_config(AuthConfig)
│ │  
│ │ -jupyter_dir = Path.home() / ".local" / "share" / "jupyter"
│ │ -jupyter_dir.mkdir(parents=True, exist_ok=True)
│ │ -name = "jupyverse"
│ │ -if auth_config.test:
│ │ -    name += "_test"
│ │ -secret_path = jupyter_dir / f"{name}_secret"
│ │ -userdb_path = jupyter_dir / f"{name}_users.db"
│ │ +logger = logging.getLogger("auth")
│ │  
│ │ -if auth_config.clear_users:
│ │ -    if userdb_path.is_file():
│ │ -        userdb_path.unlink()
│ │ -    if secret_path.is_file():
│ │ -        secret_path.unlink()
│ │ -
│ │ -if not secret_path.is_file():
│ │ -    secret_path.write_text(secrets.token_hex(32))
│ │ -
│ │ -secret = secret_path.read_text()
│ │ -
│ │ -
│ │ -DATABASE_URL = f"sqlite+aiosqlite:///{userdb_path}"
│ │  Base: DeclarativeMeta = declarative_base()
│ │  
│ │  
│ │  class OAuthAccount(SQLAlchemyBaseOAuthAccountTableUUID, Base):
│ │      pass
│ │  
│ │  
│ │ @@ -57,23 +38,61 @@
│ │      avatar_url = Column(String(length=32), nullable=True)
│ │      workspace = Column(Text(), default="{}", nullable=False)
│ │      settings = Column(Text(), default="{}", nullable=False)
│ │      permissions = Column(JSON, default={}, nullable=False)
│ │      oauth_accounts: List[OAuthAccount] = relationship("OAuthAccount", lazy="joined")
│ │  
│ │  
│ │ -engine = create_async_engine(DATABASE_URL)
│ │ -async_session_maker = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
│ │ -
│ │ -
│ │ -async def create_db_and_tables():
│ │ -    async with engine.begin() as conn:
│ │ -        await conn.run_sync(Base.metadata.create_all)
│ │ -
│ │ -
│ │ -async def get_async_session() -> AsyncGenerator[AsyncSession, None]:
│ │ -    async with async_session_maker() as session:
│ │ -        yield session
│ │ -
│ │ -
│ │ -async def get_user_db(session: AsyncSession = Depends(get_async_session)):
│ │ -    yield SQLAlchemyUserDatabase(session, User, OAuthAccount)
│ │ +@dataclass
│ │ +class Res:
│ │ +    User: Any
│ │ +    async_session_maker: Any
│ │ +    create_db_and_tables: Any
│ │ +    get_async_session: Any
│ │ +    get_user_db: Any
│ │ +    secret: Any
│ │ +
│ │ +
│ │ +def get_db(auth_config: _AuthConfig) -> Res:
│ │ +    jupyter_dir = Path.home() / ".local" / "share" / "jupyter"
│ │ +    jupyter_dir.mkdir(parents=True, exist_ok=True)
│ │ +    name = "jupyverse"
│ │ +    if auth_config.test:
│ │ +        name += "_test"
│ │ +    secret_path = jupyter_dir / f"{name}_secret"
│ │ +    userdb_path = jupyter_dir / f"{name}_users.db"
│ │ +
│ │ +    if auth_config.clear_users:
│ │ +        if userdb_path.is_file():
│ │ +            userdb_path.unlink()
│ │ +        if secret_path.is_file():
│ │ +            secret_path.unlink()
│ │ +
│ │ +    if not secret_path.is_file():
│ │ +        secret_path.write_text(secrets.token_hex(32))
│ │ +
│ │ +    secret = secret_path.read_text()
│ │ +
│ │ +    database_url = f"sqlite+aiosqlite:///{userdb_path}"
│ │ +
│ │ +    engine = create_async_engine(database_url)
│ │ +    async_session_maker = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
│ │ +
│ │ +    async def create_db_and_tables():
│ │ +        async with engine.begin() as conn:
│ │ +            await conn.run_sync(Base.metadata.create_all)
│ │ +
│ │ +    async def get_async_session() -> AsyncGenerator[AsyncSession, None]:
│ │ +        async with async_session_maker() as session:
│ │ +            yield session
│ │ +
│ │ +    async def get_user_db(session: AsyncSession = Depends(get_async_session)):
│ │ +        yield SQLAlchemyUserDatabase(session, User, OAuthAccount)
│ │ +
│ │ +    return Res(
│ │ +        User=User,
│ │ +        async_session_maker=async_session_maker,
│ │ +        create_db_and_tables=create_db_and_tables,
│ │ +        get_async_session=get_async_session,
│ │ +        get_user_db=get_user_db,
│ │ +        secret=secret,
│ │ +    )
│ │   --- fps_auth-0.0.50/.gitignore
│ ├── +++ fps_auth-0.1.2/.gitignore
│ │┄ Files identical despite different names
│ │   --- fps_auth-0.0.50/COPYING.md
│ ├── +++ fps_auth-0.1.2/COPYING.md
│ │┄ Files identical despite different names
│ │   --- fps_auth-0.0.50/pyproject.toml
│ ├── +++ fps_auth-0.1.2/pyproject.toml
│ │┄ Files 18% similar despite different names
│ │ @@ -1,24 +1,22 @@
│ │  [build-system]
│ │  requires = [ "hatchling",]
│ │  build-backend = "hatchling.build"
│ │  
│ │  [project]
│ │  name = "fps_auth"
│ │  description = "An FPS plugin for the authentication API"
│ │ -keywords = ["jupyter", "server", "fastapi", "pluggy", "plugins"]
│ │ +keywords = ["jupyter", "server", "fastapi", "plugins"]
│ │  dynamic = ["version"]
│ │  requires-python = ">=3.8"
│ │  dependencies = [
│ │ -    "fps[uvicorn] >=0.0.17",
│ │ -    "fps-lab",
│ │ -    "fps-login",
│ │      "aiosqlite",
│ │      "fastapi-users[sqlalchemy,oauth] >=10.1.4,<11",
│ │      "sqlalchemy >=1,<2",
│ │ +    "jupyverse-api",
│ │  ]
│ │  
│ │  [[project.authors]]
│ │  name = "Jupyter Development Team"
│ │  email = "jupyter@googlegroups.com"
│ │  
│ │  [project.readme]
│ │ @@ -33,21 +31,13 @@
│ │  
│ │  [tool.check-manifest]
│ │  ignore = [ ".*",]
│ │  
│ │  [tool.jupyter-releaser]
│ │  skip = [ "check-links",]
│ │  
│ │ -[project.entry-points.fps_router]
│ │ -fps-auth = "fps_auth.routes"
│ │ -
│ │ -[project.entry-points.fps_config]
│ │ -fps-auth = "fps_auth.config"
│ │ -
│ │ -[project.entry-points.jupyverse_auth]
│ │ -User = "fps_auth.models:UserRead"
│ │ -current_user = "fps_auth.backends:current_user"
│ │ -update_user = "fps_auth.backends:update_user"
│ │ -websocket_auth = "fps_auth.backends:websocket_auth"
│ │ +[project.entry-points]
│ │ +"asphalt.components"   = {auth = "fps_auth.main:AuthComponent"}
│ │ +"jupyverse.components" = {auth = "fps_auth.main:AuthComponent"}
│ │  
│ │  [tool.hatch.version]
│ │  path = "fps_auth/__init__.py"
│ │   --- fps_auth-0.0.50/PKG-INFO
│ ├── +++ fps_auth-0.1.2/PKG-INFO
│ │┄ Files 13% similar despite different names
│ │ @@ -1,21 +1,19 @@
│ │  Metadata-Version: 2.1
│ │  Name: fps_auth
│ │ -Version: 0.0.50
│ │ +Version: 0.1.2
│ │  Summary: An FPS plugin for the authentication API
│ │  Project-URL: Homepage, https://jupyter.org
│ │  Author-email: Jupyter Development Team <jupyter@googlegroups.com>
│ │  License: BSD 3-Clause License
│ │  License-File: COPYING.md
│ │ -Keywords: fastapi,jupyter,pluggy,plugins,server
│ │ +Keywords: fastapi,jupyter,plugins,server
│ │  Requires-Python: >=3.8
│ │  Requires-Dist: aiosqlite
│ │  Requires-Dist: fastapi-users[oauth,sqlalchemy]<11,>=10.1.4
│ │ -Requires-Dist: fps-lab
│ │ -Requires-Dist: fps-login
│ │ -Requires-Dist: fps[uvicorn]>=0.0.17
│ │ +Requires-Dist: jupyverse-api
│ │  Requires-Dist: sqlalchemy<2,>=1
│ │  Description-Content-Type: text/markdown
│ │  
│ │  # fps-auth
│ │  
│ │  An FPS plugin for the authentication API.
