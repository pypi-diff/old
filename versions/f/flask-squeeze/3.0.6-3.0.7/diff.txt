--- tmp/flask_squeeze-3.0.6.tar.gz
+++ tmp/flask_squeeze-3.0.7.tar.gz
├── filetype from file(1)
│ @@ -1 +1 @@
│ -gzip compressed data, was "flask_squeeze-3.0.6.tar", max compression
│ +gzip compressed data, was "flask_squeeze-3.0.7.tar", max compression
│   --- flask_squeeze-3.0.6.tar
├── +++ flask_squeeze-3.0.7.tar
│ ├── file list
│ │ @@ -1,10 +1,10 @@
│ │ --rw-r--r--   0        0        0     1061 2023-04-04 10:23:19.321417 flask_squeeze-3.0.6/LICENSE
│ │ --rw-r--r--   0        0        0     3535 2023-04-06 14:07:52.138505 flask_squeeze-3.0.6/README.md
│ │ --rw-r--r--   0        0        0       49 2023-04-04 12:50:40.490046 flask_squeeze-3.0.6/flask_squeeze/__init__.py
│ │ --rw-r--r--   0        0        0     1554 2023-04-04 12:57:27.961772 flask_squeeze-3.0.6/flask_squeeze/debug.py
│ │ --rw-r--r--   0        0        0     8554 2023-04-06 16:50:00.183505 flask_squeeze-3.0.6/flask_squeeze/flask_squeeze.py
│ │ --rw-r--r--   0        0        0     1760 2023-04-04 12:57:27.956281 flask_squeeze-3.0.6/flask_squeeze/log.py
│ │ --rw-r--r--   0        0        0     1482 2023-04-04 12:48:01.274755 flask_squeeze-3.0.6/flask_squeeze/minifiers.py
│ │ --rw-r--r--   0        0        0     1736 2023-04-06 16:03:45.531113 flask_squeeze-3.0.6/flask_squeeze/models.py
│ │ --rw-r--r--   0        0        0     1347 2023-04-06 16:51:12.053170 flask_squeeze-3.0.6/pyproject.toml
│ │ --rw-r--r--   0        0        0     4571 1970-01-01 00:00:00.000000 flask_squeeze-3.0.6/PKG-INFO
│ │ +-rw-r--r--   0        0        0     1061 2023-04-04 10:23:19.321417 flask_squeeze-3.0.7/LICENSE
│ │ +-rw-r--r--   0        0        0     3535 2023-04-06 14:07:52.138505 flask_squeeze-3.0.7/README.md
│ │ +-rw-r--r--   0        0        0       49 2023-04-04 12:50:40.490046 flask_squeeze-3.0.7/flask_squeeze/__init__.py
│ │ +-rw-r--r--   0        0        0     1558 2023-04-06 21:35:02.413149 flask_squeeze-3.0.7/flask_squeeze/debug.py
│ │ +-rw-r--r--   0        0        0     8772 2023-04-06 21:35:00.656772 flask_squeeze-3.0.7/flask_squeeze/flask_squeeze.py
│ │ +-rw-r--r--   0        0        0     1760 2023-04-04 12:57:27.956281 flask_squeeze-3.0.7/flask_squeeze/log.py
│ │ +-rw-r--r--   0        0        0     1482 2023-04-04 12:48:01.274755 flask_squeeze-3.0.7/flask_squeeze/minifiers.py
│ │ +-rw-r--r--   0        0        0     1736 2023-04-06 16:03:45.531113 flask_squeeze-3.0.7/flask_squeeze/models.py
│ │ +-rw-r--r--   0        0        0     1347 2023-04-06 21:36:03.868891 flask_squeeze-3.0.7/pyproject.toml
│ │ +-rw-r--r--   0        0        0     4571 1970-01-01 00:00:00.000000 flask_squeeze-3.0.7/PKG-INFO
│ │   --- flask_squeeze-3.0.6/LICENSE
│ ├── +++ flask_squeeze-3.0.7/LICENSE
│ │┄ Files identical despite different names
│ │   --- flask_squeeze-3.0.6/README.md
│ ├── +++ flask_squeeze-3.0.7/README.md
│ │┄ Files identical despite different names
│ │   --- flask_squeeze-3.0.6/flask_squeeze/debug.py
│ ├── +++ flask_squeeze-3.0.7/flask_squeeze/debug.py
│ │┄ Files 1% similar despite different names
│ │ @@ -11,15 +11,15 @@
│ │  	if current_app.config["SQUEEZE_ADD_DEBUG_HEADERS"]:
│ │  		dur_ms_str = f"{(t2 - t1) * 1000:.1f}ms"
│ │  		response.headers[header_name] = dur_ms_str
│ │  
│ │  
│ │  
│ │  @contextmanager
│ │ -def ctx_add_debug_header(header_name: str, response: Response) -> Generator:
│ │ +def ctx_add_benchmark_header(header_name: str, response: Response) -> Generator:
│ │  	t1 = time.perf_counter()
│ │  	yield
│ │  	t2 = time.perf_counter()
│ │  	_write_benchmark_debug_header(response, header_name, t1, t2)
│ │   --- flask_squeeze-3.0.6/flask_squeeze/flask_squeeze.py
│ ├── +++ flask_squeeze-3.0.7/flask_squeeze/flask_squeeze.py
│ │┄ Files 5% similar despite different names
│ │ @@ -1,18 +1,18 @@
│ │  import gzip
│ │  import random
│ │  import secrets
│ │  import time
│ │  import zlib
│ │ -from typing import Dict, Union, Tuple
│ │ +from typing import Dict, Tuple, Union
│ │  
│ │  import brotli
│ │  from flask import Flask, Response, request
│ │  
│ │ -from .debug import add_debug_header, ctx_add_debug_header
│ │ +from .debug import add_debug_header, ctx_add_benchmark_header
│ │  from .log import d_log, log
│ │  from .minifiers import minify_css, minify_html, minify_js
│ │  from .models import (
│ │  	Encoding,
│ │  	Minifcation,
│ │  	choose_encoding_from_headers_and_config,
│ │  	choose_minification_from_mimetype_and_config,
│ │ @@ -77,15 +77,15 @@
│ │  			Exit early if minification is not enabled for the repsonse mimetype.
│ │  		"""
│ │  		response.direct_passthrough = False
│ │  		data = response.get_data(as_text=True)
│ │  
│ │  		log(3, f"Minifying {self.minify_choice.value} resource")
│ │  
│ │ -		with ctx_add_debug_header("X-Flask-Squeeze-Minify-Duration", response):
│ │ +		with ctx_add_benchmark_header("X-Flask-Squeeze-Minify-Duration", response):
│ │  			if self.minify_choice == Minifcation.html:
│ │  				minified = minify_html(data)
│ │  			elif self.minify_choice == Minifcation.css:
│ │  				minified = minify_css(data)
│ │  			elif self.minify_choice == Minifcation.js:
│ │  				minified = minify_js(data)
│ │  			else:
│ │ @@ -123,15 +123,15 @@
│ │  		quality = self.select_quality_from_config()
│ │  
│ │  		log(3, (
│ │  			f"Compressing resource with {self.encode_choice.value} encoding",
│ │  			f", and quality {quality}."
│ │  		))
│ │  
│ │ -		with ctx_add_debug_header("X-Flask-Squeeze-Compress-Duration", response):
│ │ +		with ctx_add_benchmark_header("X-Flask-Squeeze-Compress-Duration", response):
│ │  			if self.encode_choice == Encoding.br:
│ │  				compressed_data = brotli.compress(data, quality=quality)
│ │  			elif self.encode_choice == Encoding.deflate:
│ │  				compressed_data = zlib.compress(data, level=quality)
│ │  			elif self.encode_choice == Encoding.gzip:
│ │  				compressed_data = gzip.compress(data, compresslevel=quality)
│ │  			else:
│ │ @@ -142,89 +142,97 @@
│ │  
│ │  		log(3, (
│ │  			f"Compression ratio: { len(data) / len(compressed_data):.1f}x, "
│ │  			f"used {self.encode_choice.value}"
│ │  		))
│ │  
│ │  		response.set_data(compressed_data)
│ │ +		self.set_header_after_compression(response)
│ │  
│ │  
│ │  
│ │  	@d_log(level=1)
│ │  	def run_for_dynamic_resource(self, response: Response) -> None:
│ │  		"""
│ │ -			Compress a dynamic resource.
│ │ -			- No caching is done.
│ │ +			Compress a dynamic resource. No caching is done.
│ │  		"""
│ │  
│ │ -		if self.minify_choice is not None:
│ │ +		if isinstance(self.minify_choice, Minifcation):
│ │  			self.execute_minify(response)
│ │ -		if self.encode_choice is not None:
│ │ +
│ │ +		if isinstance(self.encode_choice, Encoding):
│ │  			self.execute_compress(response)
│ │ -		# Protect against BREACH attack
│ │ -		if self.encode_choice:
│ │ +			# Protect against BREACH attack
│ │  			tx = 2 if int(time.time() ** 3.141592) % 2 else 1
│ │  			rand_str: str = secrets.token_urlsafe(random.randint(32 * tx, 128 * tx))
│ │  			response.headers["X-Breach-Exploit-Protection-Padding"] = rand_str
│ │  
│ │  
│ │  
│ │  	@d_log(level=1)
│ │  	def run_for_static_resource(
│ │  		self,
│ │  		response: Response,
│ │  	) -> None:
│ │  		"""
│ │ -			Compress a static resource.
│ │ +			Serve a static resource from cache if possible.
│ │ +			Otherwise, compress it, cache it and serve it.
│ │  		"""
│ │  
│ │ -
│ │  		# Serve from cache if possible
│ │  		encode_choice_str = self.encode_choice.value if self.encode_choice else "none"
│ │  		from_cache = self.cache.get((request.path, encode_choice_str), None)
│ │  		if from_cache is not None:
│ │  			log(2, "Found in cache. RETURN")
│ │  			response.direct_passthrough = False
│ │  			response.set_data(from_cache)
│ │  			response.headers["X-Flask-Squeeze-Cache"] = "HIT"
│ │  			return
│ │  
│ │  		# Assert: not in cache
│ │  
│ │ -		if self.minify_choice is not None:
│ │ +		if isinstance(self.minify_choice, Minifcation):
│ │  			self.execute_minify(response)
│ │ -		if self.encode_choice is not None:
│ │ +		if isinstance(self.encode_choice, Encoding):
│ │  			self.execute_compress(response)
│ │  
│ │  		# Assert: At least one of minify or compress was run
│ │ +
│ │  		response.headers["X-Flask-Squeeze-Cache"] = "MISS"
│ │  		self.cache[(request.path, encode_choice_str)] = response.get_data(as_text=False)
│ │  
│ │  
│ │  
│ │ -	@d_log(level=1, with_args=[1, 2])
│ │ -	def recompute_headers(
│ │ +	def set_headers_if_content_length_changed(
│ │  		self,
│ │  		response: Response,
│ │  		original_content_length: int
│ │  	) -> None:
│ │ -		# If direct_passthrough is set, the response was not modified.
│ │ +		"""
│ │ +			Set the Content-Length header if it has changed.
│ │ +		"""
│ │  		if response.direct_passthrough:
│ │  			return
│ │ +		if original_content_length == response.content_length:
│ │ +			return
│ │ +		response.headers["Content-Length"] = response.content_length
│ │ +		response.headers["X-Uncompressed-Content-Length"] = original_content_length
│ │ +
│ │ +
│ │ +
│ │ +	def set_header_after_compression(self, response: Response) -> None:
│ │ +		"""
│ │ +			Set the Content-Encoding header after compression.
│ │ +		"""
│ │ +		response.headers["Content-Encoding"] = self.encode_choice.value
│ │ +		vary = {x.strip() for x in response.headers.get("Vary", "").split(",")}
│ │ +		vary.add("Accept-Encoding")
│ │ +		vary.discard("")
│ │ +		response.headers["Vary"] = ",".join(vary)
│ │  
│ │ -		if self.encode_choice:
│ │ -			response.headers["Content-Encoding"] = self.encode_choice.value
│ │ -			vary = {x.strip() for x in response.headers.get("Vary", "").split(",")}
│ │ -			vary.add("Accept-Encoding")
│ │ -			vary.discard("")
│ │ -			response.headers["Vary"] = ",".join(vary)
│ │ -
│ │ -		if original_content_length != response.content_length:
│ │ -			response.headers["Content-Length"] = response.content_length
│ │ -			response.headers["X-Uncompressed-Content-Length"] = original_content_length
│ │  
│ │  
│ │  
│ │  	@d_log(level=0, with_args=[1])
│ │  	@add_debug_header("X-Flask-Squeeze-Total-Duration")
│ │  	def after_request(self, response: Response) -> Response:
│ │  		log(1, f"Enter after_request({response})")
│ │ @@ -261,18 +269,15 @@
│ │  			log(1, "No compression or minification requested. RETURN")
│ │  			return response
│ │  
│ │  		original_content_length = response.content_length
│ │  		self.resource_type = "static" if "/static/" in request.path else "dynamic"
│ │  
│ │  		if self.resource_type == "dynamic":
│ │ -			log(1, "Dynamic resource.")
│ │  			self.run_for_dynamic_resource(response)
│ │  		else:
│ │ -			log(1, "Static resource.")
│ │  			self.run_for_static_resource(response)
│ │ +		self.set_headers_if_content_length_changed(response, original_content_length)
│ │  
│ │ -		self.recompute_headers(response, original_content_length)
│ │ -
│ │ -		log(1, f"{self.cache}")
│ │ +		log(1, f"Cached: {self.cache.keys()}")
│ │  
│ │  		return response
│ │   --- flask_squeeze-3.0.6/flask_squeeze/log.py
│ ├── +++ flask_squeeze-3.0.7/flask_squeeze/log.py
│ │┄ Files identical despite different names
│ │   --- flask_squeeze-3.0.6/flask_squeeze/minifiers.py
│ ├── +++ flask_squeeze-3.0.7/flask_squeeze/minifiers.py
│ │┄ Files identical despite different names
│ │   --- flask_squeeze-3.0.6/flask_squeeze/models.py
│ ├── +++ flask_squeeze-3.0.7/flask_squeeze/models.py
│ │┄ Files identical despite different names
│ │   --- flask_squeeze-3.0.6/pyproject.toml
│ ├── +++ flask_squeeze-3.0.7/pyproject.toml
│ │┄ Files 7% similar despite different names
│ │ @@ -1,10 +1,10 @@
│ │  [tool.poetry]
│ │  name = "flask-squeeze"
│ │ -version = "3.0.6"
│ │ +version = "3.0.7"
│ │  repository = "https://github.com/mkrd/Flask-Squeeze"
│ │  description = "Compress and minify Flask responses!"
│ │  readme = "README.md"
│ │  authors = ["Marcel Kröker <kroeker.marcel@gmail.com>"]
│ │  license = "MIT"
│ │  classifiers=[
│ │  	"Programming Language :: Python :: 3",
│ │   --- flask_squeeze-3.0.6/PKG-INFO
│ ├── +++ flask_squeeze-3.0.7/PKG-INFO
│ │┄ Files 1% similar despite different names
│ │ @@ -1,10 +1,10 @@
│ │  Metadata-Version: 2.1
│ │  Name: flask-squeeze
│ │ -Version: 3.0.6
│ │ +Version: 3.0.7
│ │  Summary: Compress and minify Flask responses!
│ │  Home-page: https://github.com/mkrd/Flask-Squeeze
│ │  License: MIT
│ │  Author: Marcel Kröker
│ │  Author-email: kroeker.marcel@gmail.com
│ │  Requires-Python: >=3.8,<4.0
│ │  Classifier: Intended Audience :: Developers
